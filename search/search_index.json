{
  "config": {
    "lang": ["en"],
    "separator": "[\\s\\-]+",
    "pipeline": ["stopWordFilter"]
  },
  "docs": [
    { "location": "", "title": "Home", "text": "" },
    {
      "location": "#the-premier-network-source-of-truth",
      "title": "The Premier Network Source of Truth",
      "text": "<p>NetBox is the leading solution for modeling and documenting modern networks. By combining the traditional disciplines of IP address management (IPAM) and datacenter infrastructure management (DCIM) with powerful APIs and extensions, NetBox provides the ideal \"source of truth\" to power network automation. Read on to discover why thousands of organizations worldwide put NetBox at the heart of their infrastructure.</p> <p></p>"
    },
    {
      "location": "#built-for-networks",
      "title": "Built for Networks",
      "text": "<p>Unlike general-purpose CMDBs, NetBox has curated a data model which caters specifically to the needs of network engineers and operators. It delivers a wide assortment of object types carefully crafted to best serve the needs of infrastructure design and documentation. These cover all facets of network technology, from IP address managements to cabling to overlays and more:</p> <ul> <li>Hierarchical regions, sites, and locations</li> <li>Racks, devices, and device components</li> <li>Cables and wireless connections</li> <li>Power distribution tracking</li> <li>Data circuits and providers</li> <li>Virtual machines and clusters</li> <li>IP prefixes, ranges, and addresses</li> <li>VRFs and route targets</li> <li>FHRP groups (VRRP, HSRP, etc.)</li> <li>AS numbers</li> <li>VLANs and scoped VLAN groups</li> <li>L2VPN overlays</li> <li>Tenancy assignments</li> <li>Contact management</li> </ul>"
    },
    {
      "location": "#customizable-extensible",
      "title": "Customizable &amp; Extensible",
      "text": "<p>In addition to its expansive and robust data model, NetBox offers myriad mechanisms through which it can be customized and extended. Its powerful plugins architecture enables users to extend the application to meet their needs with minimal development effort.</p> <ul> <li>Custom fields</li> <li>Custom model validation</li> <li>Export templates</li> <li>Event rules</li> <li>Plugins</li> <li>REST &amp; GraphQL APIs</li> </ul>"
    },
    {
      "location": "#always-open",
      "title": "Always Open",
      "text": "<p>Because NetBox is an open source application licensed under Apache 2, its entire code base is completely accessible to the end user, and there's never a risk of vendor lock-in. Additionally, NetBox development is an entirely public, community-driven process to which everyone can provide input.</p> <p>NetBox Development</p> <p>Interested in contributing to NetBox? Check out our GitHub repository to get started!</p>"
    },
    {
      "location": "#powered-by-python",
      "title": "Powered by Python",
      "text": "<p>NetBox is built on the enormously popular Django framework for the Python programming language, already a favorite among network engineers. Users can leverage their existing skills coding Python tools to extend NetBox's already vast functionality via custom scripts and plugins.</p>"
    },
    {
      "location": "#getting-started",
      "title": "Getting Started",
      "text": "<ul> <li>Try out our public demo if you want to jump right in</li> <li>The installation guide will help you get your own deployment up and running</li> <li>Or try the community Docker image for a low-touch approach</li> <li>NetBox Cloud is a managed solution offered by NetBox Labs</li> </ul>"
    },
    {
      "location": "introduction/",
      "title": "Introduction to NetBox",
      "text": ""
    },
    {
      "location": "introduction/#origin-story",
      "title": "Origin Story",
      "text": "<p>NetBox was originally developed by its lead maintainer, Jeremy Stretch, while he was working as a network engineer at DigitalOcean in 2015 as part of an effort to automate their network provisioning. Recognizing the new tool's potential, DigitalOcean agreed to release it as an open source project in June 2016.</p> <p>Since then, thousands of organizations around the world have embraced NetBox as their central network source of truth to empower both network operators and automation. Today, the open source project is stewarded by NetBox Labs and a team of volunteer maintainers. Beyond the core product, myriad plugins have been developed by the NetBox community to enhance and expand its feature set.</p>"
    },
    {
      "location": "introduction/#key-features",
      "title": "Key Features",
      "text": "<p>NetBox was built specifically to serve the needs of network engineers and operators. Below is a very brief overview of the core features it provides.</p> <ul> <li>IP address management (IPAM) with full IPv4/IPv6 parity</li> <li>Automatic provisioning of next available prefix/IP</li> <li>VRFs with import &amp; export route targets</li> <li>VLANs with variably-scoped groups</li> <li>AS number (ASN) management</li> <li>Rack elevations with SVG rendering</li> <li>Device modeling using pre-defined types</li> <li>Virtual chassis and device contexts</li> <li>Network, power, and console cabling with SVG traces</li> <li>Breakout cables</li> <li>Power distribution modeling</li> <li>Data circuit and provider tracking</li> <li>Wireless LAN and point-to-point links</li> <li>VPN tunnels</li> <li>IKE &amp; IPSec policies</li> <li>Layer 2 VPN overlays</li> <li>FHRP groups (VRRP, HSRP, etc.)</li> <li>Application service bindings</li> <li>Virtual machines &amp; clusters</li> <li>Flexible hierarchy for sites and locations</li> <li>Tenant ownership assignment</li> <li>Device &amp; VM configuration contexts for advanced configuration rendering</li> <li>Custom fields for data model extension</li> <li>Custom validation &amp; protection rules</li> <li>Custom reports &amp; scripts executable directly within the UI</li> <li>Extensive plugin framework for adding custom functionality</li> <li>Single sign-on (SSO) authentication</li> <li>Robust object-based permissions</li> <li>Detailed, automatic change logging</li> <li>Global search engine</li> <li>Event-driven scripts &amp; webhooks</li> </ul>"
    },
    {
      "location": "introduction/#what-netbox-is-not",
      "title": "What NetBox Is Not",
      "text": "<p>While NetBox strives to cover many areas of network management, the scope of its feature set is necessarily limited. This ensures that development focuses on core functionality and that scope creep is reasonably contained. To that end, it might help to provide some examples of functionality that NetBox does not provide:</p> <ul> <li>Network monitoring</li> <li>DNS server</li> <li>RADIUS server</li> <li>Configuration management</li> <li>Facilities management</li> </ul> <p>That said, NetBox can be used to great effect in populating external tools with the data they need to perform these functions.</p>"
    },
    {
      "location": "introduction/#design-philosophy",
      "title": "Design Philosophy",
      "text": "<p>NetBox was designed with the following tenets foremost in mind.</p>"
    },
    {
      "location": "introduction/#replicate-the-real-world",
      "title": "Replicate the Real World",
      "text": "<p>Careful consideration has been given to the data model to ensure that it can accurately reflect a real-world network. For instance, IP addresses are assigned not to devices, but to specific interfaces attached to a device, and an interface may have multiple IP addresses assigned to it.</p>"
    },
    {
      "location": "introduction/#serve-as-a-source-of-truth",
      "title": "Serve as a \"Source of Truth\"",
      "text": "<p>NetBox intends to represent the desired state of a network versus its operational state. As such, automated import of live network state is strongly discouraged. All data created in NetBox should first be vetted by a human to ensure its integrity. NetBox can then be used to populate monitoring and provisioning systems with a high degree of confidence.</p>"
    },
    {
      "location": "introduction/#keep-it-simple",
      "title": "Keep it Simple",
      "text": "<p>When given a choice between a relatively simple 80% solution and a much more complex complete solution, the former will typically be favored. This ensures a lean codebase with a low learning curve.</p>"
    },
    {
      "location": "introduction/#application-stack",
      "title": "Application Stack",
      "text": "<p>NetBox is built on the Django Python framework and utilizes a PostgreSQL database. It runs as a WSGI service behind your choice of HTTP server.</p> Function Component HTTP service nginx or Apache WSGI service gunicorn or uWSGI Application Django/Python Database PostgreSQL 13+ Task queuing Redis/django-rq"
    },
    {
      "location": "administration/error-reporting/",
      "title": "Error Reporting",
      "text": ""
    },
    {
      "location": "administration/error-reporting/#sentry",
      "title": "Sentry",
      "text": ""
    },
    {
      "location": "administration/error-reporting/#enabling-error-reporting",
      "title": "Enabling Error Reporting",
      "text": "<p>NetBox supports native integration with Sentry for automatic error reporting. To enable this functionality, set <code>SENTRY_ENABLED</code> to True and define your unique data source name (DSN) in <code>configuration.py</code>.</p> <pre><code>SENTRY_ENABLED = True\nSENTRY_DSN = \"https://examplePublicKey@o0.ingest.sentry.io/0\"\n</code></pre> <p>Setting <code>SENTRY_ENABLED</code> to False will disable the Sentry integration.</p>"
    },
    {
      "location": "administration/error-reporting/#assigning-tags",
      "title": "Assigning Tags",
      "text": "<p>You can optionally attach one or more arbitrary tags to the outgoing error reports if desired by setting the <code>SENTRY_TAGS</code> parameter:</p> <pre><code>SENTRY_TAGS = {\n    \"custom.foo\": \"123\",\n    \"custom.bar\": \"abc\",\n}\n</code></pre> <p>Reserved tag prefixes</p> <p>Avoid using any tag names which begin with <code>netbox.</code>, as this prefix is reserved by the NetBox application.</p>"
    },
    {
      "location": "administration/error-reporting/#testing",
      "title": "Testing",
      "text": "<p>Once the configuration has been saved, restart the NetBox service.</p> <p>To test Sentry operation, try generating a 404 (page not found) error by navigating to an invalid URL, such as <code>https://netbox/404-error-testing</code>. (Be sure that debug mode has been disabled.) After receiving a 404 response from the NetBox server, you should see the issue appear shortly in Sentry.</p>"
    },
    {
      "location": "administration/housekeeping/",
      "title": "Housekeeping",
      "text": "<p>NetBox includes a <code>housekeeping</code> management command that should be run nightly. This command handles:</p> <ul> <li>Clearing expired authentication sessions from the database</li> <li>Deleting changelog records older than the configured retention time</li> <li>Deleting job result records older than the configured retention time</li> <li>Check for new NetBox releases (if <code>RELEASE_CHECK_URL</code> is set)</li> </ul> <p>This command can be invoked directly, or by using the shell script provided at <code>/opt/netbox/contrib/netbox-housekeeping.sh</code>.</p>"
    },
    {
      "location": "administration/housekeeping/#scheduling",
      "title": "Scheduling",
      "text": ""
    },
    {
      "location": "administration/housekeeping/#using-cron",
      "title": "Using Cron",
      "text": "<p>This script can be linked from your cron scheduler's daily jobs directory (e.g. <code>/etc/cron.daily</code>) or referenced directly within the cron configuration file.</p> <pre><code>sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n</code></pre> <p>Note</p> <p>On Debian-based systems, be sure to omit the <code>.sh</code> file extension when linking to the script from within a cron directory. Otherwise, the task may not run.</p>"
    },
    {
      "location": "administration/housekeeping/#using-systemd",
      "title": "Using Systemd",
      "text": "<p>First, create symbolic links for the systemd service and timer files. Link the existing service and timer files from the <code>/opt/netbox/contrib/</code> directory to the <code>/etc/systemd/system/</code> directory:</p> <pre><code>sudo ln -s /opt/netbox/contrib/netbox-housekeeping.service /etc/systemd/system/netbox-housekeeping.service\nsudo ln -s /opt/netbox/contrib/netbox-housekeeping.timer /etc/systemd/system/netbox-housekeeping.timer\n</code></pre> <p>Then, reload the systemd configuration and enable the timer to start automatically at boot:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable --now netbox-housekeeping.timer\n</code></pre> <p>Check the status of your timer by running:</p> <pre><code>sudo systemctl list-timers --all\n</code></pre> <p>This command will show a list of all timers, including your <code>netbox-housekeeping.timer</code>. Make sure the timer is active and properly scheduled.</p> <p>That's it! Your NetBox housekeeping service is now configured to run daily using systemd.</p>"
    },
    {
      "location": "administration/netbox-shell/",
      "title": "The NetBox Python Shell",
      "text": "<p>NetBox includes a Python management shell within which objects can be directly queried, created, modified, and deleted. To enter the shell, run the following command:</p> <pre><code>./manage.py nbshell\n</code></pre> <p>This will launch a lightly customized version of the built-in Django shell with all relevant NetBox models pre-loaded. (If desired, the stock Django shell is also available by executing <code>./manage.py shell</code>.)</p> <pre><code>$ ./manage.py nbshell\n### NetBox interactive shell (localhost)\n### Python 3.7.10 | Django 3.2.5 | NetBox 3.0\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n</code></pre> <p>The function <code>lsmodels()</code> will print a list of all available NetBox models:</p> <pre><code>&gt;&gt;&gt; lsmodels()\nDCIM:\n  ConsolePort\n  ConsolePortTemplate\n  ConsoleServerPort\n  ConsoleServerPortTemplate\n  Device\n  ...\n</code></pre> <p>Warning</p> <p>The NetBox shell affords direct access to NetBox data and function with very little validation in place. As such, it is crucial to ensure that only authorized, knowledgeable users are ever granted access to it. Never perform any action in the management shell without having a full backup in place.</p>"
    },
    {
      "location": "administration/netbox-shell/#querying-objects",
      "title": "Querying Objects",
      "text": "<p>Objects are retrieved from the database using a Django queryset. The base queryset for an object takes the form <code>&lt;model&gt;.objects.all()</code>, which will return a (truncated) list of all objects of that type.</p> <pre><code>&gt;&gt;&gt; Device.objects.all()\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice4&gt;, &lt;Device: TestDevice5&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Use a <code>for</code> loop to cycle through all objects in the list:</p> <pre><code>&gt;&gt;&gt; for device in Device.objects.all():\n...   print(device.name, device.device_type)\n...\n('TestDevice1', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice2', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice3', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice4', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice5', &lt;DeviceType: PacketThingy 9000&gt;)\n...\n</code></pre> <p>To count all objects matching the query, replace <code>all()</code> with <code>count()</code>:</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n1274\n</code></pre> <p>To retrieve a particular object (typically by its primary key or other unique field), use <code>get()</code>:</p> <pre><code>&gt;&gt;&gt; Site.objects.get(pk=7)\n&lt;Site: Test Lab&gt;\n</code></pre>"
    },
    {
      "location": "administration/netbox-shell/#filtering-querysets",
      "title": "Filtering Querysets",
      "text": "<p>In most cases, you will want to retrieve only a specific subset of objects. To filter a queryset, replace <code>all()</code> with <code>filter()</code> and pass one or more keyword arguments. For example:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status=\"active\")\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice8&gt;, &lt;Device: TestDevice9&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Querysets support slicing to return a specific range of objects.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status=\"active\")[:3]\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;]&gt;\n</code></pre> <p>The <code>count()</code> method can be appended to the queryset to return a count of objects rather than the full list.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status=\"active\").count()\n982\n</code></pre> <p>Relationships with other models can be traversed by concatenating attribute names with a double-underscore. For example, the following will return all devices assigned to the tenant named \"Pied Piper.\"</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(tenant__name=\"Pied Piper\")\n</code></pre> <p>This approach can span multiple levels of relations. For example, the following will return all IP addresses assigned to a device in North America:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.filter(interface__device__site__region__slug=\"north-america\")\n</code></pre> <p>Note</p> <p>While the above query is functional, it's not very efficient. There are ways to optimize such requests, however they are out of scope for this document. For more information, see the Django queryset method reference documentation.</p> <p>Reverse relationships can be traversed as well. For example, the following will find all devices with an interface named \"em0\":</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(interfaces__name=\"em0\")\n</code></pre> <p>Character fields can be filtered against partial matches using the <code>contains</code> or <code>icontains</code> field lookup (the later of which is case-insensitive).</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains=\"testdevice\")\n</code></pre> <p>Similarly, numeric fields can be filtered by values less than, greater than, and/or equal to a given value.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000)\n</code></pre> <p>Multiple filters can be combined to further refine a queryset.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000, name__icontains=\"engineering\")\n</code></pre> <p>To return the inverse of a filtered queryset, use <code>exclude()</code> instead of <code>filter()</code>.</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n4479\n&gt;&gt;&gt; Device.objects.filter(status=\"active\").count()\n4133\n&gt;&gt;&gt; Device.objects.exclude(status=\"active\").count()\n346\n</code></pre> <p>Info</p> <p>The examples above are intended only to provide a cursory introduction to queryset filtering. For an exhaustive list of the available filters, please consult the Django queryset API documentation.</p>"
    },
    {
      "location": "administration/netbox-shell/#creating-and-updating-objects",
      "title": "Creating and Updating Objects",
      "text": "<p>New objects can be created by instantiating the desired model, defining values for all required attributes, and calling <code>save()</code> on the instance. For example, we can create a new VLAN by specifying its numeric ID, name, and assigned site:</p> <pre><code>&gt;&gt;&gt; lab1 = Site.objects.get(pk=7)\n&gt;&gt;&gt; myvlan = VLAN(vid=123, name='MyNewVLAN', site=lab1)\n&gt;&gt;&gt; myvlan.full_clean()\n&gt;&gt;&gt; myvlan.save()\n</code></pre> <p>To modify an existing object, we retrieve it, update the desired field(s), and call <code>save()</code> again.</p> <pre><code>&gt;&gt;&gt; vlan = VLAN.objects.get(pk=1280)\n&gt;&gt;&gt; vlan.name\n'MyNewVLAN'\n&gt;&gt;&gt; vlan.name = 'BetterName'\n&gt;&gt;&gt; vlan.full_clean()\n&gt;&gt;&gt; vlan.save()\n&gt;&gt;&gt; VLAN.objects.get(pk=1280).name\n'BetterName'\n</code></pre> <p>Warning</p> <p>The Django ORM provides methods to create/edit many objects at once, namely <code>bulk_create()</code> and <code>update()</code>. These are best avoided in most cases as they bypass a model's built-in validation and can easily lead to database corruption if not used carefully.</p>"
    },
    {
      "location": "administration/netbox-shell/#deleting-objects",
      "title": "Deleting Objects",
      "text": "<p>To delete an object, simply call <code>delete()</code> on its instance. This will return a dictionary of all objects (including related objects) which have been deleted as a result of this operation.</p> <pre><code>&gt;&gt;&gt; vlan\n&lt;VLAN: 123 (BetterName)&gt;\n&gt;&gt;&gt; vlan.delete()\n(1, {'ipam.VLAN': 1})\n</code></pre> <p>To delete multiple objects at once, call <code>delete()</code> on a filtered queryset. It's a good idea to always sanity-check the count of selected objects before deleting them.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains='test').count()\n27\n&gt;&gt;&gt; Device.objects.filter(name__icontains='test').delete()\n(35, {'dcim.DeviceBay': 0, 'dcim.InterfaceConnection': 4,\n'extras.ImageAttachment': 0, 'dcim.Device': 27, 'dcim.Interface': 4,\n'dcim.ConsolePort': 0, 'dcim.PowerPort': 0})\n</code></pre> <p>Warning</p> <p>Deletions are immediate and irreversible. Always consider the impact of deleting objects carefully before calling <code>delete()</code> on an instance or queryset.</p>"
    },
    {
      "location": "administration/permissions/",
      "title": "Object-Based Permissions",
      "text": "<p>NetBox employs a new object-based permissions framework, which replaces Django's built-in permissions model. Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type. For example, it is possible to grant a user permission to view only sites within a particular region, or to modify only VLANs with a numeric ID within a certain range.</p> <p>A permission in NetBox represents a relationship shared by several components:</p> <ul> <li>Object type(s) - One or more types of object in NetBox</li> <li>User(s)/Group(s) - One or more users or groups of users</li> <li>Action(s) - The action(s) that can be performed on an object</li> <li>Constraints - An arbitrary filter used to limit the granted action(s) to a specific subset of objects</li> </ul> <p>At a minimum, a permission assignment must specify one object type, one user or group, and one action. The specification of constraints is optional: A permission without any constraints specified will apply to all instances of the selected model(s).</p>"
    },
    {
      "location": "administration/permissions/#actions",
      "title": "Actions",
      "text": "<p>There are four core actions that can be permitted for each type of object within NetBox, roughly analogous to the CRUD convention (create, read, update, and delete):</p> <ul> <li>View - Retrieve an object from the database</li> <li>Add - Create a new object</li> <li>Change - Modify an existing object</li> <li>Delete - Delete an existing object</li> </ul> <p>In addition to these, permissions can also grant custom actions that may be required by a specific model or plugin. For example, the <code>run</code> permission for scripts allows a user to execute custom scripts. These can be specified when granting a permission in the \"additional actions\" field.</p> <p>Note</p> <p>Internally, all actions granted by a permission (both built-in and custom) are stored as strings in an array field named <code>actions</code>.</p>"
    },
    {
      "location": "administration/permissions/#constraints",
      "title": "Constraints",
      "text": "<p>Constraints are expressed as a JSON object or list representing a Django query filter. This is the same syntax that you would pass to the QuerySet <code>filter()</code> method when performing a query using the Django ORM. As with query filters, double underscores can be used to traverse related objects or invoke lookup expressions. Some example queries and their corresponding definitions are shown below.</p> <p>All attributes defined within a single JSON object are applied with a logical AND. For example, suppose you assign a permission for the site model with the following constraints.</p> <pre><code>{\n  \"status\": \"active\",\n  \"region__name\": \"Americas\"\n}\n</code></pre> <p>The permission will grant access only to sites which have a status of \"active\" and which are assigned to the \"Americas\" region.</p> <p>To achieve a logical OR with a different set of constraints, define multiple objects within a list. For example, if you want to constrain the permission to VLANs with an ID between 100 and 199 or a status of \"reserved,\" do the following:</p> <pre><code>[\n  {\n    \"vid__gte\": 100,\n    \"vid__lt\": 200\n  },\n  {\n    \"status\": \"reserved\"\n  }\n]\n</code></pre> <p>Additionally, where multiple permissions have been assigned for an object type, their collective constraints will be merged using a logical \"OR\" operation.</p>"
    },
    {
      "location": "administration/permissions/#user-token",
      "title": "User Token",
      "text": "<p>When defining a permission constraint, administrators may use the special token <code>$user</code> to reference the current user at the time of evaluation. This can be helpful to restrict users to editing only their own journal entries, for example. Such a constraint might be defined as:</p> <pre><code>{\n  \"created_by\": \"$user\"\n}\n</code></pre> <p>The <code>$user</code> token can be used only as a constraint value, or as an item within a list of values. It cannot be modified or extended to reference specific user attributes.</p>"
    },
    {
      "location": "administration/permissions/#default-permissions",
      "title": "Default Permissions",
      "text": "<p>While permissions are typically assigned to specific groups and/or users, it is also possible to define a set of default permissions that are applied to all authenticated users. This is done using the <code>DEFAULT_PERMISSIONS</code> configuration parameter. Note that statically configuring permissions for specific users or groups is not supported.</p>"
    },
    {
      "location": "administration/permissions/#example-constraint-definitions",
      "title": "Example Constraint Definitions",
      "text": "Constraints Description <code>{\"status\": \"active\"}</code> Status is active <code>{\"status__in\": [\"planned\", \"reserved\"]}</code> Status is active OR reserved <code>{\"status\": \"active\", \"role\": \"testing\"}</code> Status is active AND role is testing <code>{\"name__startswith\": \"Foo\"}</code> Name starts with \"Foo\" (case-sensitive) <code>{\"name__iendswith\": \"bar\"}</code> Name ends with \"bar\" (case-insensitive) <code>{\"vid__gte\": 100, \"vid__lt\": 200}</code> VLAN ID is greater than or equal to 100 AND less than 200 <code>[{\"vid__lt\": 200}, {\"status\": \"reserved\"}]</code> VLAN ID is less than 200 OR status is reserved"
    },
    {
      "location": "administration/permissions/#permissions-enforcement",
      "title": "Permissions Enforcement",
      "text": ""
    },
    {
      "location": "administration/permissions/#viewing-objects",
      "title": "Viewing Objects",
      "text": "<p>Object-based permissions work by filtering the database query generated by a user's request to restrict the set of objects returned. When a request is received, NetBox first determines whether the user is authenticated and has been granted to perform the requested action. For example, if the requested URL is <code>/dcim/devices/</code>, NetBox will check for the <code>dcim.view_device</code> permission. If the user has not been assigned this permission (either directly or via a group assignment), NetBox will return a 403 (forbidden) HTTP response.</p> <p>If the permission has been granted, NetBox will compile any specified constraints for the model and action. For example, suppose two permissions have been assigned to the user granting view access to the device model, with the following constraints:</p> <pre><code>[\n    {\"site__name__in\":  [\"NYC1\", \"NYC2\"]},\n    {\"status\":  \"offline\", \"tenant__isnull\":  true}\n]\n</code></pre> <p>This grants the user access to view any device that is assigned to a site named NYC1 or NYC2, or which has a status of \"offline\" and has no tenant assigned. These constraints are equivalent to the following ORM query:</p> <pre><code>Site.objects.filter(\n    Q(site__name__in=['NYC1', 'NYC2']),\n    Q(status='active', tenant__isnull=True)\n)\n</code></pre>"
    },
    {
      "location": "administration/permissions/#creating-and-modifying-objects",
      "title": "Creating and Modifying Objects",
      "text": "<p>The same sort of logic is in play when a user attempts to create or modify an object in NetBox, with a twist. Once validation has completed, NetBox starts an atomic database transaction to facilitate the change, and the object is created or saved normally. Next, still within the transaction, NetBox issues a second query to retrieve the newly created/updated object, filtering the restricted queryset with the object's primary key. If this query fails to return the object, NetBox knows that the new revision does not match the constraints imposed by the permission. The transaction is then rolled back, leaving the database in its original state prior to the change, and the user is informed of the violation.</p>"
    },
    {
      "location": "administration/replicating-netbox/",
      "title": "Replicating NetBox",
      "text": ""
    },
    {
      "location": "administration/replicating-netbox/#replicating-the-database",
      "title": "Replicating the Database",
      "text": "<p>NetBox employs a PostgreSQL database, so general PostgreSQL best practices apply here. The database can be written to a file and restored using the <code>pg_dump</code> and <code>psql</code> utilities, respectively.</p> <p>Note</p> <p>The examples below assume that your database is named <code>netbox</code>.</p>"
    },
    {
      "location": "administration/replicating-netbox/#export-the-database",
      "title": "Export the Database",
      "text": "<p>Use the <code>pg_dump</code> utility to export the entire database to a file:</p> <pre><code>pg_dump --username netbox --password --host localhost netbox &gt; netbox.sql\n</code></pre> <p>Note</p> <p>You may need to change the username, host, and/or database in the command above to match your installation.</p> <p>When replicating a production database for development purposes, you may find it convenient to exclude changelog data, which can easily account for the bulk of a database's size. To do this, exclude the <code>extras_objectchange</code> table data from the export. The table will still be included in the output file, but will not be populated with any data.</p> <pre><code>pg_dump ... --exclude-table-data=extras_objectchange netbox &gt; netbox.sql\n</code></pre>"
    },
    {
      "location": "administration/replicating-netbox/#load-an-exported-database",
      "title": "Load an Exported Database",
      "text": "<p>When restoring a database from a file, it's recommended to delete any existing database first to avoid potential conflicts.</p> <p>Warning</p> <p>The following will destroy and replace any existing instance of the database.</p> <pre><code>psql -c 'drop database netbox'\npsql -c 'create database netbox'\npsql netbox &lt; netbox.sql\n</code></pre> <p>Keep in mind that PostgreSQL user accounts and permissions are not included with the dump: You will need to create those manually if you want to fully replicate the original database (see the installation docs). When setting up a development instance of NetBox, it's strongly recommended to use different credentials anyway.</p>"
    },
    {
      "location": "administration/replicating-netbox/#export-the-database-schema",
      "title": "Export the Database Schema",
      "text": "<p>If you want to export only the database schema, and not the data itself (e.g. for development reference), do the following:</p> <pre><code>pg_dump --username netbox --password --host localhost -s netbox &gt; netbox_schema.sql\n</code></pre>"
    },
    {
      "location": "administration/replicating-netbox/#replicating-uploaded-media",
      "title": "Replicating Uploaded Media",
      "text": "<p>By default, NetBox stores uploaded files (such as image attachments) in its media directory. To fully replicate an instance of NetBox, you'll need to copy both the database and the media files.</p> <p>Note</p> <p>These operations are not necessary if your installation is utilizing a remote storage backend.</p>"
    },
    {
      "location": "administration/replicating-netbox/#archive-the-media-directory",
      "title": "Archive the Media Directory",
      "text": "<p>Execute the following command from the root of the NetBox installation path (typically <code>/opt/netbox</code>):</p> <pre><code>tar -czf netbox_media.tar.gz netbox/media/\n</code></pre>"
    },
    {
      "location": "administration/replicating-netbox/#restore-the-media-directory",
      "title": "Restore the Media Directory",
      "text": "<p>To extract the saved archive into a new installation, run the following from the installation root:</p> <pre><code>tar -xf netbox_media.tar.gz\n</code></pre>"
    },
    {
      "location": "administration/authentication/google/",
      "title": "Google",
      "text": "<p>This guide explains how to configure single sign-on (SSO) support for NetBox using Google OAuth2 as an authentication backend.</p>"
    },
    {
      "location": "administration/authentication/google/#google-oauth2-configuration",
      "title": "Google OAuth2 Configuration",
      "text": "<ol> <li>Log into console.cloud.google.com.</li> <li>Create new project for NetBox.</li> <li>Under \"APIs and Services\" click \"OAuth consent screen\" and enter the required information.</li> <li>Under \"Credentials,\" click \"Create Credentials\" and select \"OAuth 2.0 Client ID.\" Select type \"Web application.\"<ul> <li>\"Authorized JavaScript origins\" should follow the format <code>http[s]://&lt;netbox&gt;[:&lt;port&gt;]</code></li> <li>\"Authorized redirect URIs\" should follow the format <code>http[s]://&lt;netbox&gt;[:&lt;port&gt;]/oauth/complete/google-oauth2/</code></li> </ul> </li> <li>Copy the \"Client ID\" and \"Client Secret\" values somewhere convenient.</li> </ol> <p>Note</p> <p>Google requires the NetBox hostname to use a public top-level-domain (e.g. <code>.com</code>, <code>.net</code>). The use of IP addresses is not permitted (except <code>127.0.0.1</code>).</p> <p>For more information, consult Google's documentation.</p>"
    },
    {
      "location": "administration/authentication/google/#netbox-configuration",
      "title": "NetBox Configuration",
      "text": ""
    },
    {
      "location": "administration/authentication/google/#1-enter-configuration-parameters",
      "title": "1. Enter configuration parameters",
      "text": "<p>Enter the following configuration parameters in <code>configuration.py</code>, substituting your own values:</p> <pre><code>REMOTE_AUTH_BACKEND = 'social_core.backends.google.GoogleOAuth2'\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '{CLIENT_ID}'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '{CLIENT_SECRET}'\n</code></pre>"
    },
    {
      "location": "administration/authentication/google/#2-restart-netbox",
      "title": "2. Restart NetBox",
      "text": "<p>Restart the NetBox services so that the new configuration takes effect. This is typically done with the command below:</p> <pre><code>sudo systemctl restart netbox\n</code></pre>"
    },
    {
      "location": "administration/authentication/google/#testing",
      "title": "Testing",
      "text": "<p>Log out of NetBox if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Google. Click that link.</p> <p></p> <p>You should be redirected to Google's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account.</p> <p></p> <p>If successful, you will be redirected back to the NetBox UI, and will be logged in as the Google user. You can verify this by navigating to your profile (using the button at top right).</p> <p>This user account has been replicated locally to NetBox, and can now be assigned groups and permissions.</p>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/",
      "title": "Microsoft Entra ID",
      "text": "<p>This guide explains how to configure single sign-on (SSO) support for NetBox using Microsoft Entra ID as an authentication backend.</p>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#entra-id-configuration",
      "title": "Entra ID Configuration",
      "text": ""
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#1-create-a-test-user-optional",
      "title": "1. Create a test user (optional)",
      "text": "<p>Create a new user in AD to be used for testing. You can skip this step if you already have a suitable account created.</p>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#2-create-an-app-registration",
      "title": "2. Create an app registration",
      "text": "<p>Under the Azure Active Directory dashboard, navigate to Add &gt; App registration.</p> <p></p> <p>Enter a name for the registration (e.g. \"NetBox\") and ensure that the \"single tenant\" option is selected.</p> <p>Under \"Redirect URI\", select \"Web\" for the platform and enter the path to your NetBox installation, ending with <code>/oauth/complete/azuread-oauth2/</code>. Note that this URI must begin with <code>https://</code> unless you are referencing localhost (for development purposes).</p> <p></p> <p>Once finished, make note of the application (client) ID; this will be used when configuring NetBox.</p> <p></p> <p>Multitenant authentication</p> <p>NetBox also supports multitenant authentication via Azure AD, however it requires a different backend and an additional configuration parameter. Please see the <code>python-social-auth</code> documentation for details concerning multitenant authentication.</p>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#3-create-a-secret",
      "title": "3. Create a secret",
      "text": "<p>When viewing the newly-created app registration, click the \"Add a certificate or secret\" link under \"Client credentials\". Under the \"Client secrets\" tab, click the \"New client secret\" button.</p> <p></p> <p>You can optionally specify a description and select a lifetime for the secret.</p> <p></p> <p>Once finished, make note of the secret value (not the secret ID); this will be used when configuring NetBox.</p> <p></p>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#netbox-configuration",
      "title": "NetBox Configuration",
      "text": ""
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#1-enter-configuration-parameters",
      "title": "1. Enter configuration parameters",
      "text": "<p>Enter the following configuration parameters in <code>configuration.py</code>, substituting your own values:</p> <pre><code>REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2'\nSOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}'\nSOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}'\n</code></pre>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#2-restart-netbox",
      "title": "2. Restart NetBox",
      "text": "<p>Restart the NetBox services so that the new configuration takes effect. This is typically done with the command below:</p> <pre><code>sudo systemctl restart netbox\n</code></pre>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#testing",
      "title": "Testing",
      "text": "<p>Log out of NetBox if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Azure AD. Click that link.</p> <p></p> <p>You should be redirected to Microsoft's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account.</p> <p></p> <p>If successful, you will be redirected back to the NetBox UI, and will be logged in as the AD user. You can verify this by navigating to your profile (using the button at top right).</p> <p>This user account has been replicated locally to NetBox, and can now be assigned groups and permissions.</p>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#troubleshooting",
      "title": "Troubleshooting",
      "text": ""
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#redirect-uri-does-not-match",
      "title": "Redirect URI does not Match",
      "text": "<p>Azure requires that the authenticating client request a redirect URI that matches what you've configured for the app in step two. This URI must begin with <code>https://</code> (unless using <code>localhost</code> for the domain).</p> <p>If Azure complains that the requested URI starts with <code>http://</code> (not HTTPS), it's likely that your HTTP server is misconfigured or sitting behind a load balancer, so NetBox is not aware that HTTPS is being use. To force the use of an HTTPS redirect URI, set <code>SOCIAL_AUTH_REDIRECT_IS_HTTPS = True</code> in <code>configuration.py</code> per the python-social-auth docs.</p>"
    },
    {
      "location": "administration/authentication/microsoft-entra-id/#not-logged-in-after-authenticating",
      "title": "Not Logged in After Authenticating",
      "text": "<p>If you are redirected to the NetBox UI after authenticating successfully, but are not logged in, double-check the configured backend and app registration. The instructions in this guide pertain only to the <code>azuread.AzureADOAuth2</code> backend using a single-tenant app registration.</p>"
    },
    {
      "location": "administration/authentication/okta/",
      "title": "Okta",
      "text": "<p>This guide explains how to configure single sign-on (SSO) support for NetBox using Okta as an authentication backend.</p>"
    },
    {
      "location": "administration/authentication/okta/#okta-configuration",
      "title": "Okta Configuration",
      "text": "<p>Okta developer account</p> <p>Okta offers free developer accounts at https://developer.okta.com/.</p>"
    },
    {
      "location": "administration/authentication/okta/#1-create-a-test-user-optional",
      "title": "1. Create a test user (optional)",
      "text": "<p>Create a new user in the Okta admin portal to be used for testing. You can skip this step if you already have a suitable account created.</p>"
    },
    {
      "location": "administration/authentication/okta/#2-create-an-app-registration",
      "title": "2. Create an app registration",
      "text": "<p>Within the Okta administration dashboard, navigate to  Applications &gt; Applications, and click the \"Create App Integration\" button. Select \"OIDC\" as the sign-in method, and \"Web application\" for the application type.</p> <p></p> <p>On the next page, give the app integration a name (e.g. \"NetBox\") and specify the sign-in and sign-out URIs. These URIs should follow the formats below:</p> <ul> <li>Sign-in URI: <code>https://{netbox}/oauth/complete/okta-openidconnect/</code></li> <li>Sign-out URI: <code>https://{netbox}/oauth/disconnect/okta-openidconnect/</code></li> </ul> <p></p> <p>Under \"Assignments,\" select the controlled access setting most appropriate for your organization. Click \"Save\" to complete the creation.</p> <p>Once finished, note the following parameters. These will be used to configured NetBox.</p> <ul> <li>Client ID</li> <li>Client secret</li> <li>Okta domain</li> </ul> <p></p>"
    },
    {
      "location": "administration/authentication/okta/#netbox-configuration",
      "title": "NetBox Configuration",
      "text": ""
    },
    {
      "location": "administration/authentication/okta/#1-enter-configuration-parameters",
      "title": "1. Enter configuration parameters",
      "text": "<p>Enter the following configuration parameters in <code>configuration.py</code>, substituting your own values:</p> <pre><code>REMOTE_AUTH_BACKEND = 'social_core.backends.okta_openidconnect.OktaOpenIdConnect'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '{Client ID}'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '{Client secret}'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://{Okta domain}/oauth2/'\n</code></pre>"
    },
    {
      "location": "administration/authentication/okta/#2-restart-netbox",
      "title": "2. Restart NetBox",
      "text": "<p>Restart the NetBox services so that the new configuration takes effect. This is typically done with the command below:</p> <pre><code>sudo systemctl restart netbox\n</code></pre>"
    },
    {
      "location": "administration/authentication/okta/#testing",
      "title": "Testing",
      "text": "<p>Log out of NetBox if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Okta. Click that link.</p> <p></p> <p>You should be redirected to Okta's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account.</p> <p></p> <p>If successful, you will be redirected back to the NetBox UI, and will be logged in as the Okta user. You can verify this by navigating to your profile (using the button at top right).</p> <p>This user account has been replicated locally to NetBox, and can now be assigned groups and permissions.</p>"
    },
    {
      "location": "administration/authentication/overview/",
      "title": "Authentication",
      "text": ""
    },
    {
      "location": "administration/authentication/overview/#local-authentication",
      "title": "Local Authentication",
      "text": "<p>Local user accounts and groups can be created in NetBox under the \"Authentication\" section in the \"Admin\" menu. This section is available only to users with the \"staff\" permission enabled.</p> <p>At a minimum, each user account must have a username and password set. User accounts may also denote a first name, last name, and email address. Permissions may also be assigned to individual users and/or groups as needed.</p>"
    },
    {
      "location": "administration/authentication/overview/#remote-authentication",
      "title": "Remote Authentication",
      "text": "<p>NetBox may be configured to provide user authenticate via a remote backend in addition to local authentication. This is done by setting the <code>REMOTE_AUTH_BACKEND</code> configuration parameter to a suitable backend class. NetBox provides several options for remote authentication.</p>"
    },
    {
      "location": "administration/authentication/overview/#ldap-authentication",
      "title": "LDAP Authentication",
      "text": "<pre><code>REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'\n</code></pre> <p>NetBox includes an authentication backend which supports LDAP. See the LDAP installation docs for more detail about this backend.</p>"
    },
    {
      "location": "administration/authentication/overview/#http-header-authentication",
      "title": "HTTP Header Authentication",
      "text": "<pre><code>REMOTE_AUTH_BACKEND = 'netbox.authentication.RemoteUserBackend'\n</code></pre> <p>Another option for remote authentication in NetBox is to enable HTTP header-based user assignment. The front end HTTP server (e.g. nginx or Apache) performs client authentication as a process external to NetBox, and passes information about the authenticated user via HTTP headers. By default, the user is assigned via the <code>REMOTE_USER</code> header, but this can be customized via the <code>REMOTE_AUTH_HEADER</code> configuration parameter.</p> <p>Optionally, user profile information can be supplied by <code>REMOTE_USER_FIRST_NAME</code>, <code>REMOTE_USER_LAST_NAME</code> and <code>REMOTE_USER_EMAIL</code> headers. These are saved to the user's profile during the authentication process. These headers can be customized like the <code>REMOTE_USER</code> header.</p> <p>Warning</p> <p>Some WSGI servers may drop headers which contain unsupported characters. For instance, gunicorn v22.0 and later silently drops HTTP headers containing underscores. This behavior can be disabled by changing gunicorn's <code>header_map</code> setting to <code>dangerous</code>.</p>"
    },
    {
      "location": "administration/authentication/overview/#single-sign-on-sso",
      "title": "Single Sign-On (SSO)",
      "text": "<pre><code>REMOTE_AUTH_BACKEND = 'social_core.backends.google.GoogleOAuth2'\n</code></pre> <p>NetBox supports single sign-on authentication via the python-social-auth library. To enable SSO, specify the path to the desired authentication backend within the <code>social_core</code> Python package. Please see the complete list of supported authentication backends for the available options.</p> <p>Most remote authentication backends require some additional configuration through settings prefixed with <code>SOCIAL_AUTH_</code>. These will be automatically imported from NetBox's <code>configuration.py</code> file. Additionally, the authentication pipeline can be customized via the <code>SOCIAL_AUTH_PIPELINE</code> parameter. (NetBox's default pipeline is defined in <code>netbox/settings.py</code> for your reference.)</p>"
    },
    {
      "location": "administration/authentication/overview/#configuring-the-sso-modules-appearance",
      "title": "Configuring the SSO module's appearance",
      "text": "<p>The way a remote authentication backend is displayed to the user on the login page may be adjusted via the <code>SOCIAL_AUTH_BACKEND_ATTRS</code> parameter, defaulting to an empty dictionary. This dictionary maps a <code>social_core</code> module's name (ie. <code>REMOTE_AUTH_BACKEND.name</code>) to a couple of parameters, <code>(display_name, icon)</code>.</p> <p>The <code>display_name</code> is the name displayed to the user on the login page. The icon may either be the URL of an icon; refer to a Material Design Icons icon's name; or be <code>None</code> for no icon.</p> <p>For instance, the OIDC backend may be customized with</p> <pre><code>SOCIAL_AUTH_BACKEND_ATTRS = {\n    'oidc': (\"My awesome SSO\", \"login\"),\n}\n</code></pre>"
    },
    {
      "location": "configuration/",
      "title": "NetBox Configuration",
      "text": ""
    },
    {
      "location": "configuration/#configuration-file",
      "title": "Configuration File",
      "text": "<p>NetBox's configuration file contains all the important parameters which control how NetBox functions: database settings, security controls, user preferences, and so on. While the default configuration suffices out of the box for most use cases, there are a few required parameters which must be defined during installation. </p> <p>The configuration file is loaded from <code>$INSTALL_ROOT/netbox/netbox/configuration.py</code> by default. An example configuration is provided at <code>configuration_example.py</code>, which you may copy to use as your default config. Note that a configuration file must be defined; NetBox will not run without one.</p> <p>Customizing the Configuration Module</p> <p>A custom configuration module may be specified by setting the <code>NETBOX_CONFIGURATION</code> environment variable. This must be a dotted path to the desired Python module. For example, a file named <code>my_config.py</code> in the same directory as <code>settings.py</code> would be referenced as <code>netbox.my_config</code>.</p> <p>To keep things simple, the NetBox documentation refers to the configuration file simply as <code>configuration.py</code>.</p> <p>Some configuration parameters may alternatively be defined either in <code>configuration.py</code> or within the administrative section of the user interface. Settings which are \"hard-coded\" in the configuration file take precedence over those defined via the UI.</p>"
    },
    {
      "location": "configuration/#dynamic-configuration-parameters",
      "title": "Dynamic Configuration Parameters",
      "text": "<p>Some configuration parameters are primarily controlled via NetBox's admin interface (under Admin &gt; Extras &gt; Configuration Revisions). These are noted where applicable in the documentation. These settings may also be overridden in <code>configuration.py</code> to prevent them from being modified via the UI. A complete list of supported parameters is provided below:</p> <ul> <li><code>ALLOWED_URL_SCHEMES</code></li> <li><code>BANNER_BOTTOM</code></li> <li><code>BANNER_LOGIN</code></li> <li><code>BANNER_TOP</code></li> <li><code>CHANGELOG_RETENTION</code></li> <li><code>CUSTOM_VALIDATORS</code></li> <li><code>DEFAULT_USER_PREFERENCES</code></li> <li><code>ENFORCE_GLOBAL_UNIQUE</code></li> <li><code>GRAPHQL_ENABLED</code></li> <li><code>JOB_RETENTION</code></li> <li><code>MAINTENANCE_MODE</code></li> <li><code>MAPS_URL</code></li> <li><code>MAX_PAGE_SIZE</code></li> <li><code>PAGINATE_COUNT</code></li> <li><code>POWERFEED_DEFAULT_AMPERAGE</code></li> <li><code>POWERFEED_DEFAULT_MAX_UTILIZATION</code></li> <li><code>POWERFEED_DEFAULT_VOLTAGE</code></li> <li><code>PREFER_IPV4</code></li> <li><code>RACK_ELEVATION_DEFAULT_UNIT_HEIGHT</code></li> <li><code>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</code></li> </ul>"
    },
    {
      "location": "configuration/#modifying-the-configuration",
      "title": "Modifying the Configuration",
      "text": "<p>The configuration file may be modified at any time. However, the WSGI service (e.g. Gunicorn) must be restarted before these changes will take effect:</p> <pre><code>$ sudo systemctl restart netbox\n</code></pre> <p>Dynamic configuration parameters (those which can be modified via the UI) take effect immediately.</p>"
    },
    {
      "location": "configuration/data-validation/",
      "title": "Data &amp; Validation Parameters",
      "text": ""
    },
    {
      "location": "configuration/data-validation/#custom_validators",
      "title": "CUSTOM_VALIDATORS",
      "text": "<p>Dynamic Configuration Parameter</p> <p>This is a mapping of models to custom validators that have been defined locally to enforce custom validation logic. An example is provided below:</p> <pre><code>CUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"name\": {\n                \"min_length\": 5,\n                \"max_length\": 30\n            }\n        },\n        \"my_plugin.validators.Validator1\"\n    ],\n    \"dim.device\": [\n        \"my_plugin.validators.Validator1\"\n    ]\n}\n</code></pre>"
    },
    {
      "location": "configuration/data-validation/#field_choices",
      "title": "FIELD_CHOICES",
      "text": "<p>Some static choice fields on models can be configured with custom values. This is done by defining <code>FIELD_CHOICES</code> as a dictionary mapping model fields to their choices. Each choice in the list must have a database value and a human-friendly label, and may optionally specify a color. (A list of available colors is provided below.)</p> <p>The choices provided can either replace the stock choices provided by NetBox, or append to them. To replace the available choices, specify the app, model, and field name separated by dots. For example, the site model would be referenced as <code>dcim.Site.status</code>. To extend the available choices, append a plus sign to the end of this string (e.g. <code>dcim.Site.status+</code>).</p> <p>For example, the following configuration would replace the default site status choices with the options Foo, Bar, and Baz:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status': (\n        ('foo', 'Foo', 'red'),\n        ('bar', 'Bar', 'green'),\n        ('baz', 'Baz', 'blue'),\n    )\n}\n</code></pre> <p>Appending a plus sign to the field identifier would instead add these choices to the ones already offered:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status+': (\n        ...\n    )\n}\n</code></pre> <p>The following model fields support configurable choices:</p> <ul> <li><code>circuits.Circuit.status</code></li> <li><code>dcim.Device.status</code></li> <li><code>dcim.Location.status</code></li> <li><code>dcim.Module.status</code></li> <li><code>dcim.PowerFeed.status</code></li> <li><code>dcim.Rack.status</code></li> <li><code>dcim.Site.status</code></li> <li><code>dcim.VirtualDeviceContext.status</code></li> <li><code>extras.JournalEntry.kind</code></li> <li><code>ipam.IPAddress.status</code></li> <li><code>ipam.IPRange.status</code></li> <li><code>ipam.Prefix.status</code></li> <li><code>ipam.VLAN.status</code></li> <li><code>virtualization.Cluster.status</code></li> <li><code>virtualization.VirtualMachine.status</code></li> <li><code>wireless.WirelessLAN.status</code></li> </ul> <p>The following colors are supported:</p> <ul> <li><code>blue</code></li> <li><code>indigo</code></li> <li><code>purple</code></li> <li><code>pink</code></li> <li><code>red</code></li> <li><code>orange</code></li> <li><code>yellow</code></li> <li><code>green</code></li> <li><code>teal</code></li> <li><code>cyan</code></li> <li><code>gray</code></li> <li><code>black</code></li> <li><code>white</code></li> </ul>"
    },
    {
      "location": "configuration/data-validation/#protection_rules",
      "title": "PROTECTION_RULES",
      "text": "<p>Dynamic Configuration Parameter</p> <p>This is a mapping of models to custom validators against which an object is evaluated immediately prior to its deletion. If validation fails, the object is not deleted. An example is provided below:</p> <pre><code>PROTECTION_RULES = {\n    \"dcim.site\": [\n        {\n            \"status\": {\n                \"eq\": \"decommissioning\"\n            }\n        },\n        \"my_plugin.validators.Validator1\",\n    ]\n}\n</code></pre>"
    },
    {
      "location": "configuration/default-values/",
      "title": "Default Value Parameters",
      "text": ""
    },
    {
      "location": "configuration/default-values/#default_dashboard",
      "title": "DEFAULT_DASHBOARD",
      "text": "<p>This parameter controls the content and layout of user's default dashboard. Once the dashboard has been created, the user is free to customize it as they please by adding, removing, and reconfiguring widgets.</p> <p>This parameter must specify an iterable of dictionaries, each representing a discrete dashboard widget and its configuration. The follow widget attributes are supported:</p> <ul> <li><code>widget</code>: Dotted path to the Python class (required)</li> <li><code>width</code>: Default widget width (between 1 and 12, inclusive)</li> <li><code>height</code>: Default widget height, in rows</li> <li><code>title</code>: Widget title</li> <li><code>color</code>: Color of the widget's title bar, specified by name</li> <li><code>config</code>: Dictionary mapping of any widget configuration parameters</li> </ul> <p>A brief example configuration is provided below.</p> <pre><code>DEFAULT_DASHBOARD = [\n    {\n        'widget': 'extras.ObjectCountsWidget',\n        'width': 4,\n        'height': 3,\n        'title': 'Organization',\n        'config': {\n            'models': [\n                'dcim.site',\n                'tenancy.tenant',\n                'tenancy.contact',\n            ]\n        }\n    },\n    {\n        'widget': 'extras.ObjectCountsWidget',\n        'width': 4,\n        'height': 3,\n        'title': 'IPAM',\n        'color': 'blue',\n        'config': {\n            'models': [\n                'ipam.prefix',\n                'ipam.iprange',\n                'ipam.ipaddress',\n            ]\n        }\n    },\n]\n</code></pre>"
    },
    {
      "location": "configuration/default-values/#default_user_preferences",
      "title": "DEFAULT_USER_PREFERENCES",
      "text": "<p>Dynamic Configuration Parameter</p> <p>This is a dictionary defining the default preferences to be set for newly-created user accounts. For example, to set the default page size for all users to 100, define the following:</p> <pre><code>DEFAULT_USER_PREFERENCES = {\n    \"pagination\": {\n        \"per_page\": 100\n    }\n}\n</code></pre> <p>For a complete list of available preferences, log into NetBox and navigate to <code>/user/preferences/</code>. A period in a preference name indicates a level of nesting in the JSON data. The example above maps to <code>pagination.per_page</code>.</p>"
    },
    {
      "location": "configuration/default-values/#paginate_count",
      "title": "PAGINATE_COUNT",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 50</p> <p>The default maximum number of objects to display per page within each list of objects.</p>"
    },
    {
      "location": "configuration/default-values/#powerfeed_default_amperage",
      "title": "POWERFEED_DEFAULT_AMPERAGE",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 15</p> <p>The default value for the <code>amperage</code> field when creating new power feeds.</p>"
    },
    {
      "location": "configuration/default-values/#powerfeed_default_max_utilization",
      "title": "POWERFEED_DEFAULT_MAX_UTILIZATION",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 80</p> <p>The default value (percentage) for the <code>max_utilization</code> field when creating new power feeds.</p>"
    },
    {
      "location": "configuration/default-values/#powerfeed_default_voltage",
      "title": "POWERFEED_DEFAULT_VOLTAGE",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 120</p> <p>The default value for the <code>voltage</code> field when creating new power feeds.</p>"
    },
    {
      "location": "configuration/default-values/#rack_elevation_default_unit_height",
      "title": "RACK_ELEVATION_DEFAULT_UNIT_HEIGHT",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 22</p> <p>Default height (in pixels) of a unit within a rack elevation. For best results, this should be approximately one tenth of <code>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</code>.</p>"
    },
    {
      "location": "configuration/default-values/#rack_elevation_default_unit_width",
      "title": "RACK_ELEVATION_DEFAULT_UNIT_WIDTH",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 220</p> <p>Default width (in pixels) of a unit within a rack elevation.</p>"
    },
    {
      "location": "configuration/development/",
      "title": "Development Parameters",
      "text": ""
    },
    {
      "location": "configuration/development/#debug",
      "title": "DEBUG",
      "text": "<p>Default: False</p> <p>This setting enables debugging. Debugging should be enabled only during development or troubleshooting. Note that only clients which access NetBox from a recognized internal IP address will see debugging tools in the user interface.</p> <p>Warning</p> <p>Never enable debugging on a production system, as it can expose sensitive data to unauthenticated users and impose a substantial performance penalty.</p>"
    },
    {
      "location": "configuration/development/#developer",
      "title": "DEVELOPER",
      "text": "<p>Default: False</p> <p>This parameter serves as a safeguard to prevent some potentially dangerous behavior, such as generating new database schema migrations. Additionally, enabling this setting disables the debug warning banner in the UI. Set this to <code>True</code> only if you are actively developing the NetBox code base.</p>"
    },
    {
      "location": "configuration/error-reporting/",
      "title": "Error Reporting Settings",
      "text": ""
    },
    {
      "location": "configuration/error-reporting/#sentry_dsn",
      "title": "SENTRY_DSN",
      "text": "<p>Default: None</p> <p>Defines a Sentry data source name (DSN) for automated error reporting. <code>SENTRY_ENABLED</code> must be True for this parameter to take effect. For example:</p> <pre><code>SENTRY_DSN = \"https://examplePublicKey@o0.ingest.sentry.io/0\"\n</code></pre>"
    },
    {
      "location": "configuration/error-reporting/#sentry_enabled",
      "title": "SENTRY_ENABLED",
      "text": "<p>Default: False</p> <p>Set to True to enable automatic error reporting via Sentry.</p> <p>Note</p> <p>The <code>sentry-sdk</code> Python package is required to enable Sentry integration.</p>"
    },
    {
      "location": "configuration/error-reporting/#sentry_sample_rate",
      "title": "SENTRY_SAMPLE_RATE",
      "text": "<p>Default: 1.0 (all)</p> <p>The sampling rate for errors. Must be a value between 0 (disabled) and 1.0 (report on all errors).</p>"
    },
    {
      "location": "configuration/error-reporting/#sentry_send_default_pii",
      "title": "SENTRY_SEND_DEFAULT_PII",
      "text": "<p>Default: False</p> <p>Maps to the Sentry SDK's <code>send_default_pii</code> parameter. If enabled, certain personally identifiable information (PII) is added.</p> <p>Sensitive data</p> <p>If you enable this option, be aware that sensitive data such as cookies and authentication tokens will be logged.</p>"
    },
    {
      "location": "configuration/error-reporting/#sentry_tags",
      "title": "SENTRY_TAGS",
      "text": "<p>An optional dictionary of tag names and values to apply to Sentry error reports.For example:</p> <pre><code>SENTRY_TAGS = {\n    \"custom.foo\": \"123\",\n    \"custom.bar\": \"abc\",\n}\n</code></pre> <p>Reserved tag prefixes</p> <p>Avoid using any tag names which begin with <code>netbox.</code>, as this prefix is reserved by the NetBox application.</p>"
    },
    {
      "location": "configuration/error-reporting/#sentry_traces_sample_rate",
      "title": "SENTRY_TRACES_SAMPLE_RATE",
      "text": "<p>Default: 0 (disabled)</p> <p>The sampling rate for transactions. Must be a value between 0 (disabled) and 1.0 (report on all transactions).</p> <p>Consider performance implications</p> <p>A high sampling rate for transactions can induce significant performance penalties. If transaction reporting is desired, it is recommended to use a relatively low sample rate of 10% to 20% (0.1 to 0.2).</p>"
    },
    {
      "location": "configuration/graphql-api/",
      "title": "GraphQL API Parameters",
      "text": ""
    },
    {
      "location": "configuration/graphql-api/#graphql_enabled",
      "title": "GRAPHQL_ENABLED",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: True</p> <p>Setting this to False will disable the GraphQL API.</p>"
    },
    {
      "location": "configuration/graphql-api/#graphql_max_aliases",
      "title": "GRAPHQL_MAX_ALIASES",
      "text": "<p>Default: 10</p> <p>The maximum number of queries that a GraphQL API request may contain.</p>"
    },
    {
      "location": "configuration/miscellaneous/",
      "title": "Miscellaneous Parameters",
      "text": ""
    },
    {
      "location": "configuration/miscellaneous/#admins",
      "title": "ADMINS",
      "text": "<p>NetBox will email details about critical errors to the administrators listed here. This should be a list of (name, email) tuples. For example:</p> <pre><code>ADMINS = [\n    ['Hank Hill', 'hhill@example.com'],\n    ['Dale Gribble', 'dgribble@example.com'],\n]\n</code></pre>"
    },
    {
      "location": "configuration/miscellaneous/#banner_bottom",
      "title": "BANNER_BOTTOM",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Sets content for the bottom banner in the user interface.</p>"
    },
    {
      "location": "configuration/miscellaneous/#banner_login",
      "title": "BANNER_LOGIN",
      "text": "<p>Dynamic Configuration Parameter</p> <p>This defines custom content to be displayed on the login page above the login form. HTML is allowed.</p>"
    },
    {
      "location": "configuration/miscellaneous/#banner_maintenance",
      "title": "BANNER_MAINTENANCE",
      "text": "<p>Dynamic Configuration Parameter</p> <p>This adds a banner to the top of every page when maintenance mode is enabled. HTML is allowed.</p>"
    },
    {
      "location": "configuration/miscellaneous/#banner_top",
      "title": "BANNER_TOP",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Sets content for the top banner in the user interface.</p> <p>Tip</p> <p>If you'd like the top and bottom banners to match, set the following:</p> <pre><code>BANNER_TOP = 'Your banner text'\nBANNER_BOTTOM = BANNER_TOP\n</code></pre>"
    },
    {
      "location": "configuration/miscellaneous/#census_reporting_enabled",
      "title": "CENSUS_REPORTING_ENABLED",
      "text": "<p>Default: True</p> <p>Enables anonymous census reporting. To opt out of census reporting, set this to False.</p> <p>This data enables the project maintainers to estimate how many NetBox deployments exist and track the adoption of new versions over time. Census reporting effects a single HTTP request each time a worker starts. The only data reported by this function are the NetBox version, Python version, and a pseudorandom unique identifier.</p>"
    },
    {
      "location": "configuration/miscellaneous/#changelog_retention",
      "title": "CHANGELOG_RETENTION",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 90</p> <p>The number of days to retain logged changes (object creations, updates, and deletions). Set this to <code>0</code> to retain changes in the database indefinitely.</p> <p>Warning</p> <p>If enabling indefinite changelog retention, it is recommended to periodically delete old entries. Otherwise, the database may eventually exceed capacity.</p>"
    },
    {
      "location": "configuration/miscellaneous/#changelog_skip_empty_changes",
      "title": "CHANGELOG_SKIP_EMPTY_CHANGES",
      "text": "<p>Default: True</p> <p>If enabled, a change log record will not be created when an object is updated without any changes to its existing field values.</p> <p>Note</p> <p>The object's <code>last_updated</code> field will always reflect the time of the most recent update, regardless of this parameter.</p>"
    },
    {
      "location": "configuration/miscellaneous/#data_upload_max_memory_size",
      "title": "DATA_UPLOAD_MAX_MEMORY_SIZE",
      "text": "<p>Default: <code>2621440</code> (2.5 MB)</p> <p>The maximum size (in bytes) of an incoming HTTP request (i.e. <code>GET</code> or <code>POST</code> data). Requests which exceed this size will raise a <code>RequestDataTooBig</code> exception.</p>"
    },
    {
      "location": "configuration/miscellaneous/#enforce_global_unique",
      "title": "ENFORCE_GLOBAL_UNIQUE",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: True</p> <p>By default, NetBox will prevent the creation of duplicate prefixes and IP addresses in the global table (that is, those which are not assigned to any VRF). This validation can be disabled by setting <code>ENFORCE_GLOBAL_UNIQUE</code> to False.</p>"
    },
    {
      "location": "configuration/miscellaneous/#events_pipeline",
      "title": "EVENTS_PIPELINE",
      "text": "<p>This parameter was introduced in NetBox v4.2.</p> <p>Default: <code>['extras.events.process_event_queue',]</code></p> <p>NetBox will call dotted paths to the functions listed here for events (create, update, delete) on models as well as when custom EventRules are fired.</p>"
    },
    {
      "location": "configuration/miscellaneous/#file_upload_max_memory_size",
      "title": "FILE_UPLOAD_MAX_MEMORY_SIZE",
      "text": "<p>Default: <code>2621440</code> (2.5 MB)</p> <p>The maximum amount (in bytes) of uploaded data that will be held in memory before being written to the filesystem. Changing this setting can be useful for example to be able to upload files bigger than 2.5MB to custom scripts for processing.</p>"
    },
    {
      "location": "configuration/miscellaneous/#job_retention",
      "title": "JOB_RETENTION",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 90</p> <p>The number of days to retain job results (scripts and reports). Set this to <code>0</code> to retain job results in the database indefinitely.</p> <p>Warning</p> <p>If enabling indefinite job results retention, it is recommended to periodically delete old entries. Otherwise, the database may eventually exceed capacity.</p>"
    },
    {
      "location": "configuration/miscellaneous/#maintenance_mode",
      "title": "MAINTENANCE_MODE",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: False</p> <p>Setting this to True will display a \"maintenance mode\" banner at the top of every page. Additionally, NetBox will no longer update a user's \"last active\" time upon login. This is to allow new logins when the database is in a read-only state. Recording of login times will resume when maintenance mode is disabled.</p>"
    },
    {
      "location": "configuration/miscellaneous/#maps_url",
      "title": "MAPS_URL",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: <code>https://maps.google.com/?q=</code> (Google Maps)</p> <p>This specifies the URL to use when presenting a map of a physical location by street address or GPS coordinates. The URL must accept either a free-form street address or a comma-separated pair of numeric coordinates appended to it. Set this to <code>None</code> to disable the \"map it\" button within the UI.</p>"
    },
    {
      "location": "configuration/miscellaneous/#max_page_size",
      "title": "MAX_PAGE_SIZE",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: 1000</p> <p>A web user or API consumer can request an arbitrary number of objects by appending the \"limit\" parameter to the URL (e.g. <code>?limit=1000</code>). This parameter defines the maximum acceptable limit. Setting this to <code>0</code> or <code>None</code> will allow a client to retrieve all matching objects at once with no limit by specifying <code>?limit=0</code>.</p>"
    },
    {
      "location": "configuration/miscellaneous/#metrics_enabled",
      "title": "METRICS_ENABLED",
      "text": "<p>Default: False</p> <p>Toggle the availability Prometheus-compatible metrics at <code>/metrics</code>. See the Prometheus Metrics documentation for more details.</p>"
    },
    {
      "location": "configuration/miscellaneous/#prefer_ipv4",
      "title": "PREFER_IPV4",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: False</p> <p>When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to prefer IPv4 instead.</p>"
    },
    {
      "location": "configuration/miscellaneous/#queue_mappings",
      "title": "QUEUE_MAPPINGS",
      "text": "<p>Allows changing which queues are used internally for background tasks.</p> <pre><code>QUEUE_MAPPINGS = {\n    'webhook': 'low',\n    'report': 'high',\n    'script': 'high',\n}\n</code></pre> <p>If no queue is defined the queue named <code>default</code> will be used.</p>"
    },
    {
      "location": "configuration/miscellaneous/#release_check_url",
      "title": "RELEASE_CHECK_URL",
      "text": "<p>Default: None (disabled)</p> <p>This parameter defines the URL of the repository that will be checked for new NetBox releases. When a new release is detected, a message will be displayed to administrative users on the home page. This can be set to the official repository (<code>'https://api.github.com/repos/netbox-community/netbox/releases'</code>) or a custom fork. Set this to <code>None</code> to disable automatic update checks.</p> <p>Note</p> <p>The URL provided must be compatible with the GitHub REST API.</p>"
    },
    {
      "location": "configuration/miscellaneous/#rq_default_timeout",
      "title": "RQ_DEFAULT_TIMEOUT",
      "text": "<p>Default: <code>300</code></p> <p>The maximum execution time of a background task (such as running a custom script), in seconds.</p>"
    },
    {
      "location": "configuration/miscellaneous/#rq_retry_interval",
      "title": "RQ_RETRY_INTERVAL",
      "text": "<p>Default: <code>60</code></p> <p>This parameter controls how frequently a failed job is retried, up to the maximum number of times specified by <code>RQ_RETRY_MAX</code>. This must be either an integer specifying the number of seconds to wait between successive attempts, or a list of such values. For example, <code>[60, 300, 3600]</code> will retry the task after 1 minute, 5 minutes, and 1 hour.</p>"
    },
    {
      "location": "configuration/miscellaneous/#rq_retry_max",
      "title": "RQ_RETRY_MAX",
      "text": "<p>Default: <code>0</code> (retries disabled)</p> <p>The maximum number of times a background task will be retried before being marked as failed.</p>"
    },
    {
      "location": "configuration/miscellaneous/#disk_base_unit",
      "title": "DISK_BASE_UNIT",
      "text": "<p>Default: <code>1000</code></p> <p>The base unit for disk sizes. Set this to <code>1024</code> to use binary prefixes (MiB, GiB, etc.) instead of decimal prefixes (MB, GB, etc.).</p>"
    },
    {
      "location": "configuration/miscellaneous/#ram_base_unit",
      "title": "RAM_BASE_UNIT",
      "text": "<p>Default: <code>1000</code></p> <p>The base unit for RAM sizes. Set this to <code>1024</code> to use binary prefixes (MiB, GiB, etc.) instead of decimal prefixes (MB, GB, etc.).</p>"
    },
    {
      "location": "configuration/plugins/",
      "title": "Plugin Parameters",
      "text": ""
    },
    {
      "location": "configuration/plugins/#plugins",
      "title": "PLUGINS",
      "text": "<p>Default: Empty</p> <p>A list of installed NetBox plugins to enable. Plugins will not take effect unless they are listed here.</p> <p>Warning</p> <p>Plugins extend NetBox by allowing external code to run with the same access and privileges as NetBox itself. Only install plugins from trusted sources. The NetBox maintainers make absolutely no guarantees about the integrity or security of your installation with plugins enabled.</p>"
    },
    {
      "location": "configuration/plugins/#plugins_config",
      "title": "PLUGINS_CONFIG",
      "text": "<p>Default: Empty</p> <p>This parameter holds configuration settings for individual NetBox plugins. It is defined as a dictionary, with each key using the name of an installed plugin. The specific parameters supported are unique to each plugin: Reference the plugin's documentation to determine the supported parameters. An example configuration is shown below:</p> <pre><code>PLUGINS_CONFIG = {\n    'plugin1': {\n        'foo': 123,\n        'bar': True\n    },\n    'plugin2': {\n        'foo': 456,\n    },\n}\n</code></pre> <p>Note that a plugin must be listed in <code>PLUGINS</code> for its configuration to take effect.</p>"
    },
    {
      "location": "configuration/remote-authentication/",
      "title": "Remote Authentication Settings",
      "text": "<p>The configuration parameters listed here control remote authentication for NetBox. Note that <code>REMOTE_AUTH_ENABLED</code> must be true in order for these settings to take effect.</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_auto_create_groups",
      "title": "REMOTE_AUTH_AUTO_CREATE_GROUPS",
      "text": "<p>Default: <code>False</code></p> <p>If true, NetBox will automatically create groups specified in the <code>REMOTE_AUTH_GROUP_HEADER</code> header if they don't already exist. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_auto_create_user",
      "title": "REMOTE_AUTH_AUTO_CREATE_USER",
      "text": "<p>Default: <code>False</code></p> <p>If true, NetBox will automatically create local accounts for users authenticated via a remote service. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_backend",
      "title": "REMOTE_AUTH_BACKEND",
      "text": "<p>Default: <code>'netbox.authentication.RemoteUserBackend'</code></p> <p>This is the Python path to the custom Django authentication backend to use for external user authentication. NetBox provides two built-in backends (listed below), though custom authentication backends may also be provided by other packages or plugins. Provide a string for a single backend, or an iterable for multiple backends, which will be attempted in the order given.</p> <ul> <li><code>netbox.authentication.RemoteUserBackend</code></li> <li><code>netbox.authentication.LDAPBackend</code></li> </ul>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_default_groups",
      "title": "REMOTE_AUTH_DEFAULT_GROUPS",
      "text": "<p>Default: <code>[]</code> (Empty list)</p> <p>The list of groups to assign a new user account when created using remote authentication. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_default_permissions",
      "title": "REMOTE_AUTH_DEFAULT_PERMISSIONS",
      "text": "<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A mapping of permissions to assign a new user account when created using remote authentication. Each key in the dictionary should be set to a dictionary of the attributes to be applied to the permission, or <code>None</code> to allow all objects. (Requires <code>REMOTE_AUTH_ENABLED</code> as True and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> as False.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_enabled",
      "title": "REMOTE_AUTH_ENABLED",
      "text": "<p>Default: <code>False</code></p> <p>NetBox can be configured to support remote user authentication by inferring user authentication from an HTTP header set by the HTTP reverse proxy (e.g. nginx or Apache). Set this to <code>True</code> to enable this functionality. (Local authentication will still take effect as a fallback.) (<code>REMOTE_AUTH_DEFAULT_GROUPS</code> will not function if <code>REMOTE_AUTH_ENABLED</code> is disabled)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_group_header",
      "title": "REMOTE_AUTH_GROUP_HEADER",
      "text": "<p>Default: <code>'HTTP_REMOTE_USER_GROUP'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the currently authenticated user. For example, to use the request header <code>X-Remote-User-Groups</code> it needs to be set to <code>HTTP_X_REMOTE_USER_GROUPS</code>. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_group_separator",
      "title": "REMOTE_AUTH_GROUP_SEPARATOR",
      "text": "<p>Default: <code>|</code> (Pipe)</p> <p>The Separator upon which <code>REMOTE_AUTH_GROUP_HEADER</code> gets split into individual Groups. This needs to be coordinated with your authentication Proxy. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_group_sync_enabled",
      "title": "REMOTE_AUTH_GROUP_SYNC_ENABLED",
      "text": "<p>Default: <code>False</code></p> <p>NetBox can be configured to sync remote user groups by inferring user authentication from an HTTP header set by the HTTP reverse proxy (e.g. nginx or Apache). Set this to <code>True</code> to enable this functionality. (Local authentication will still take effect as a fallback.) (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_header",
      "title": "REMOTE_AUTH_HEADER",
      "text": "<p>Default: <code>'HTTP_REMOTE_USER'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the currently authenticated user. For example, to use the request header <code>X-Remote-User</code> it needs to be set to <code>HTTP_X_REMOTE_USER</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p> <p>Warning</p> <p>Some WSGI servers may drop headers which contain unsupported characters. For instance, gunicorn v22.0 and later silently drops HTTP headers containing underscores. This behavior can be disabled by changing gunicorn's <code>header_map</code> setting to <code>dangerous</code>.</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_user_email",
      "title": "REMOTE_AUTH_USER_EMAIL",
      "text": "<p>Default: <code>'HTTP_REMOTE_USER_EMAIL'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the email address of the currently authenticated user. For example, to use the request header <code>X-Remote-User-Email</code> it needs to be set to <code>HTTP_X_REMOTE_USER_EMAIL</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_user_first_name",
      "title": "REMOTE_AUTH_USER_FIRST_NAME",
      "text": "<p>Default: <code>'HTTP_REMOTE_USER_FIRST_NAME'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the first name of the currently authenticated user. For example, to use the request header <code>X-Remote-User-First-Name</code> it needs to be set to <code>HTTP_X_REMOTE_USER_FIRST_NAME</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_user_last_name",
      "title": "REMOTE_AUTH_USER_LAST_NAME",
      "text": "<p>Default: <code>'HTTP_REMOTE_USER_LAST_NAME'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the last name of the currently authenticated user. For example, to use the request header <code>X-Remote-User-Last-Name</code> it needs to be set to <code>HTTP_X_REMOTE_USER_LAST_NAME</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_superuser_groups",
      "title": "REMOTE_AUTH_SUPERUSER_GROUPS",
      "text": "<p>Default: <code>[]</code> (Empty list)</p> <p>The list of groups that promote an remote User to Superuser on Login. If group isn't present on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_superusers",
      "title": "REMOTE_AUTH_SUPERUSERS",
      "text": "<p>Default: <code>[]</code> (Empty list)</p> <p>The list of users that get promoted to Superuser on Login. If user isn't present in list on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_staff_groups",
      "title": "REMOTE_AUTH_STAFF_GROUPS",
      "text": "<p>Default: <code>[]</code> (Empty list)</p> <p>The list of groups that promote an remote User to Staff on Login. If group isn't present on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"
    },
    {
      "location": "configuration/remote-authentication/#remote_auth_staff_users",
      "title": "REMOTE_AUTH_STAFF_USERS",
      "text": "<p>Default: <code>[]</code> (Empty list)</p> <p>The list of users that get promoted to Staff on Login. If user isn't present in list on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"
    },
    {
      "location": "configuration/required-parameters/",
      "title": "Required Configuration Settings",
      "text": ""
    },
    {
      "location": "configuration/required-parameters/#allowed_hosts",
      "title": "ALLOWED_HOSTS",
      "text": "<p>This is a list of valid fully-qualified domain names (FQDNs) and/or IP addresses that can be used to reach the NetBox service. Usually this is the same as the hostname for the NetBox server, but can also be different; for example, when using a reverse proxy serving the NetBox website under a different FQDN than the hostname of the NetBox server. To help guard against HTTP Host header attacks, NetBox will not permit access to the server via any other hostnames (or IPs).</p> <p>Note</p> <p>This parameter must always be defined as a list or tuple, even if only a single value is provided.</p> <p>The value of this option is also used to set <code>CSRF_TRUSTED_ORIGINS</code>, which restricts POST requests to the same set of hosts (more about this here). Keep in mind that NetBox, by default, sets <code>USE_X_FORWARDED_HOST</code> to true, which means that if you're using a reverse proxy, it's the FQDN used to reach that reverse proxy which needs to be in this list (more about this here).</p> <p>Example:</p> <pre><code>ALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']\n</code></pre> <p>If you are not yet sure what the domain name and/or IP address of the NetBox installation will be, and are comfortable accepting the risks in doing so, you can set this to a wildcard (asterisk) to allow all host values:</p> <pre><code>ALLOWED_HOSTS = ['*']\n</code></pre>"
    },
    {
      "location": "configuration/required-parameters/#database",
      "title": "DATABASE",
      "text": "<p>NetBox requires access to a PostgreSQL 13 or later database service to store data. This service can run locally on the NetBox server or on a remote system. The following parameters must be defined within the <code>DATABASE</code> dictionary:</p> <ul> <li><code>NAME</code> - Database name</li> <li><code>USER</code> - PostgreSQL username</li> <li><code>PASSWORD</code> - PostgreSQL password</li> <li><code>HOST</code> - Name or IP address of the database server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - TCP port of the PostgreSQL service; leave blank for default port (TCP/5432)</li> <li><code>CONN_MAX_AGE</code> - Lifetime of a persistent database connection, in seconds (300 is the default)</li> <li><code>ENGINE</code> - The database backend to use; must be a PostgreSQL-compatible backend (e.g. <code>django.db.backends.postgresql</code>)</li> </ul> <p>Example:</p> <pre><code>DATABASE = {\n    'ENGINE': 'django.db.backends.postgresql',\n    'NAME': 'netbox',               # Database name\n    'USER': 'netbox',               # PostgreSQL username\n    'PASSWORD': 'J5brHrAXFLQSif0K', # PostgreSQL password\n    'HOST': 'localhost',            # Database server\n    'PORT': '',                     # Database port (leave blank for default)\n    'CONN_MAX_AGE': 300,            # Max database connection age\n}\n</code></pre> <p>Note</p> <p>NetBox supports all PostgreSQL database options supported by the underlying Django framework. For a complete list of available parameters, please see the Django documentation.</p> <p>Warning</p> <p>Make sure to use a PostgreSQL-compatible backend for the ENGINE setting. If you don't specify an ENGINE, the default will be django.db.backends.postgresql.</p>"
    },
    {
      "location": "configuration/required-parameters/#redis",
      "title": "REDIS",
      "text": "<p>Redis is a lightweight in-memory data store similar to memcached. NetBox employs Redis for background task queuing and other features.</p> <p>Redis is configured using a configuration setting similar to <code>DATABASE</code> and these settings are the same for both of the <code>tasks</code> and <code>caching</code> subsections:</p> <ul> <li><code>HOST</code> - Name or IP address of the Redis server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - TCP port of the Redis service; leave blank for default port (6379)</li> <li><code>USERNAME</code> - Redis username (if set)</li> <li><code>PASSWORD</code> - Redis password (if set)</li> <li><code>DATABASE</code> - Numeric database ID</li> <li><code>SSL</code> - Use SSL connection to Redis</li> <li><code>INSECURE_SKIP_TLS_VERIFY</code> - Set to <code>True</code> to disable TLS certificate verification (not recommended)</li> </ul> <p>An example configuration is provided below:</p> <pre><code>REDIS = {\n    'tasks': {\n        'HOST': 'redis.example.com',\n        'PORT': 1234,\n        'USERNAME': 'netbox',\n        'PASSWORD': 'foobar',\n        'DATABASE': 0,\n        'SSL': False,\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'USERNAME': '',\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'SSL': False,\n    }\n}\n</code></pre> <p>Warning</p> <p>It is highly recommended to keep the task and cache databases separate. Using the same database number on the same Redis instance for both may result in queued background tasks being lost during cache flushing events.</p>"
    },
    {
      "location": "configuration/required-parameters/#unix-socket-support",
      "title": "UNIX Socket Support",
      "text": "<p>Redis may alternatively be configured by specifying a complete URL instead of individual components. This approach supports the use of a UNIX socket connection. For example:</p> <pre><code>REDIS = {\n    'tasks': {\n        'URL': 'unix:///run/redis-netbox/redis.sock?db=0'\n    },\n    'caching': {\n        'URL': 'unix:///run/redis-netbox/redis.sock?db=1'\n    },\n}\n</code></pre>"
    },
    {
      "location": "configuration/required-parameters/#using-redis-sentinel",
      "title": "Using Redis Sentinel",
      "text": "<p>If you are using Redis Sentinel for high-availability purposes, there is minimal  configuration necessary to convert NetBox to recognize it. It requires the removal of the <code>HOST</code> and <code>PORT</code> keys from  above and the addition of three new keys.</p> <ul> <li><code>SENTINELS</code>: List of tuples or tuple of tuples with each inner tuple containing the name or IP address  of the Redis server and port for each sentinel instance to connect to</li> <li><code>SENTINEL_SERVICE</code>: Name of the master / service to connect to</li> <li><code>SENTINEL_TIMEOUT</code>: Connection timeout, in seconds</li> </ul> <p>Example:</p> <pre><code>REDIS = {\n    'tasks': {\n        'SENTINELS': [('mysentinel.redis.example.com', 6379)],\n        'SENTINEL_SERVICE': 'netbox',\n        'SENTINEL_TIMEOUT': 10,\n        'PASSWORD': '',\n        'DATABASE': 0,\n        'SSL': False,\n    },\n    'caching': {\n        'SENTINELS': [\n            ('mysentinel.redis.example.com', 6379),\n            ('othersentinel.redis.example.com', 6379)\n        ],\n        'SENTINEL_SERVICE': 'netbox',\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'SSL': False,\n    }\n}\n</code></pre> <p>Note</p> <p>It is permissible to use Sentinel for only one database and not the other.</p>"
    },
    {
      "location": "configuration/required-parameters/#secret_key",
      "title": "SECRET_KEY",
      "text": "<p>This is a secret, pseudorandom string used to assist in the creation new cryptographic hashes for passwords and HTTP cookies. The key defined here should not be shared outside the configuration file. <code>SECRET_KEY</code> can be changed at any time without impacting stored data, however be aware that doing so will invalidate all existing user sessions. NetBox deployments comprising multiple nodes must have the same secret key configured on all nodes.</p> <p><code>SECRET_KEY</code> must be at least 50 characters in length, and should contain a mix of letters, digits, and symbols. The script located at <code>$INSTALL_ROOT/netbox/generate_secret_key.py</code> may be used to generate a suitable key. Please note that this key is not used directly for hashing user passwords or for the encrypted storage of secret data in NetBox.</p>"
    },
    {
      "location": "configuration/security/",
      "title": "Security &amp; Authentication Parameters",
      "text": ""
    },
    {
      "location": "configuration/security/#allow_token_retrieval",
      "title": "ALLOW_TOKEN_RETRIEVAL",
      "text": "<p>Default: True</p> <p>If disabled, the values of API tokens will not be displayed after each token's initial creation. A user must record the value of a token prior to its creation, or it will be lost. Note that this affects all users, regardless of assigned permissions.</p>"
    },
    {
      "location": "configuration/security/#allowed_url_schemes",
      "title": "ALLOWED_URL_SCHEMES",
      "text": "<p>Dynamic Configuration Parameter</p> <p>Default: <code>('file', 'ftp', 'ftps', 'http', 'https', 'irc', 'mailto', 'sftp', 'ssh', 'tel', 'telnet', 'tftp', 'vnc', 'xmpp')</code></p> <p>A list of permitted URL schemes referenced when rendering links within NetBox. Note that only the schemes specified in this list will be accepted: If adding your own, be sure to replicate all the default values as well (excluding those schemes which are not desirable).</p>"
    },
    {
      "location": "configuration/security/#auth_password_validators",
      "title": "AUTH_PASSWORD_VALIDATORS",
      "text": "<p>This parameter acts as a pass-through for configuring Django's built-in password validators for local user accounts. These rules are applied whenever a user's password is created or updated to ensure that it meets minimum criteria such as length or complexity. The default configuration is shown below.</p> <pre><code>AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n        \"OPTIONS\": {\n            \"min_length\": 12,\n        },\n    },\n    {\n        \"NAME\": \"utilities.password_validation.AlphanumericPasswordValidator\",\n    },\n]\n</code></pre> <p>The default configuration enforces the follow criteria:</p> <ul> <li>A password must be at least 12 characters in length.</li> <li>A password must have at least one uppercase letter, one lowercase letter, and one numeric digit.</li> </ul> <p>Although it is not recommended, the default validation rules can be disabled by setting <code>AUTH_PASSWORD_VALIDATORS = []</code> in the configuration file. For more detail on customizing password validation, please see the Django documentation.</p>"
    },
    {
      "location": "configuration/security/#cors_origin_allow_all",
      "title": "CORS_ORIGIN_ALLOW_ALL",
      "text": "<p>Default: False</p> <p>If True, cross-origin resource sharing (CORS) requests will be accepted from all origins. If False, a whitelist will be used (see below).</p>"
    },
    {
      "location": "configuration/security/#cors_origin_whitelist",
      "title": "CORS_ORIGIN_WHITELIST",
      "text": ""
    },
    {
      "location": "configuration/security/#cors_origin_regex_whitelist",
      "title": "CORS_ORIGIN_REGEX_WHITELIST",
      "text": "<p>These settings specify a list of origins that are authorized to make cross-site API requests. Use <code>CORS_ORIGIN_WHITELIST</code> to define a list of exact hostnames, or <code>CORS_ORIGIN_REGEX_WHITELIST</code> to define a set of regular  expressions. (These settings have no effect if <code>CORS_ORIGIN_ALLOW_ALL</code> is True.) For example:</p> <pre><code>CORS_ORIGIN_WHITELIST = [\n    'https://example.com',\n]\n</code></pre>"
    },
    {
      "location": "configuration/security/#csrf_cookie_name",
      "title": "CSRF_COOKIE_NAME",
      "text": "<p>Default: <code>csrftoken</code></p> <p>The name of the cookie to use for the cross-site request forgery (CSRF) authentication token. See the Django documentation for more detail.</p>"
    },
    {
      "location": "configuration/security/#csrf_cookie_secure",
      "title": "CSRF_COOKIE_SECURE",
      "text": "<p>Default: False</p> <p>If true, the cookie employed for cross-site request forgery (CSRF) protection will be marked as secure, meaning that it can only be sent across an HTTPS connection.</p>"
    },
    {
      "location": "configuration/security/#csrf_trusted_origins",
      "title": "CSRF_TRUSTED_ORIGINS",
      "text": "<p>Default: <code>[]</code></p> <p>Defines a list of trusted origins for unsafe (e.g. <code>POST</code>) requests. This is a pass-through to Django's <code>CSRF_TRUSTED_ORIGINS</code> setting. Note that each host listed must specify a scheme (e.g. <code>http://</code> or `https://).</p> <pre><code>CSRF_TRUSTED_ORIGINS = (\n    'http://netbox.local',\n    'https://netbox.local',\n)\n</code></pre>"
    },
    {
      "location": "configuration/security/#default_permissions",
      "title": "DEFAULT_PERMISSIONS",
      "text": "<p>Default:</p> <pre><code>{\n    'users.view_token': ({'user': '$user'},),\n    'users.add_token': ({'user': '$user'},),\n    'users.change_token': ({'user': '$user'},),\n    'users.delete_token': ({'user': '$user'},),\n}\n</code></pre> <p>This parameter defines object permissions that are applied automatically to any authenticated user, regardless of what permissions have been defined in the database. By default, this parameter is defined to allow all users to manage their own API tokens, however it can be overriden for any purpose.</p> <p>For example, to allow all users to create a device role beginning with the word \"temp,\" you could configure the following:</p> <pre><code>DEFAULT_PERMISSIONS = {\n    'dcim.add_devicerole': (\n        {'name__startswith': 'temp'},\n    )\n}\n</code></pre> <p>Warning</p> <p>Setting a custom value for this parameter will overwrite the default permission mapping shown above. If you want to retain the default mapping, be sure to reproduce it in your custom configuration.</p>"
    },
    {
      "location": "configuration/security/#exempt_view_permissions",
      "title": "EXEMPT_VIEW_PERMISSIONS",
      "text": "<p>Default: Empty list</p> <p>A list of NetBox models to exempt from the enforcement of view permissions. Models listed here will be viewable by all users, both authenticated and anonymous.</p> <p>List models in the form <code>&lt;app&gt;.&lt;model&gt;</code>. For example:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = [\n    'dcim.site',\n    'dcim.region',\n    'ipam.prefix',\n]\n</code></pre> <p>To exempt all models from view permission enforcement, set the following. (Note that <code>EXEMPT_VIEW_PERMISSIONS</code> must be an iterable.)</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = ['*']\n</code></pre> <p>Note</p> <p>Using a wildcard will not affect certain potentially sensitive models, such as user permissions. If there is a need to exempt these models, they must be specified individually.</p>"
    },
    {
      "location": "configuration/security/#login_persistence",
      "title": "LOGIN_PERSISTENCE",
      "text": "<p>Default: False</p> <p>If true, the lifetime of a user's authentication session will be automatically reset upon each valid request. For example, if <code>LOGIN_TIMEOUT</code> is configured to 14 days (the default), and a user whose session is due to expire in five days makes a NetBox request (with a valid session cookie), the session's lifetime will be reset to 14 days.</p> <p>Note that enabling this setting causes NetBox to update a user's session in the database (or file, as configured per <code>SESSION_FILE_PATH</code>) with each request, which may introduce significant overhead in very active environments. It also permits an active user to remain authenticated to NetBox indefinitely.</p>"
    },
    {
      "location": "configuration/security/#login_required",
      "title": "LOGIN_REQUIRED",
      "text": "<p>Default: True</p> <p>When enabled, only authenticated users are permitted to access any part of NetBox. Disabling this will allow unauthenticated users to access most areas of NetBox (but not make any changes).</p> <p>Changed in NetBox v4.0.2</p> <p>Prior to NetBox v4.0.2, this setting was disabled by default.</p>"
    },
    {
      "location": "configuration/security/#login_timeout",
      "title": "LOGIN_TIMEOUT",
      "text": "<p>Default: 1209600 seconds (14 days)</p> <p>The lifetime (in seconds) of the authentication cookie issued to a NetBox user upon login.</p>"
    },
    {
      "location": "configuration/security/#logout_redirect_url",
      "title": "LOGOUT_REDIRECT_URL",
      "text": "<p>Default: <code>'home'</code></p> <p>The view name or URL to which a user is redirected after logging out.</p>"
    },
    {
      "location": "configuration/security/#secure_hsts_include_subdomains",
      "title": "SECURE_HSTS_INCLUDE_SUBDOMAINS",
      "text": "<p>Default: False</p> <p>If true, the <code>includeSubDomains</code> directive will be included in the HTTP Strict Transport Security (HSTS) header. This directive instructs the browser to apply the HSTS policy to all subdomains of the current domain.</p>"
    },
    {
      "location": "configuration/security/#secure_hsts_preload",
      "title": "SECURE_HSTS_PRELOAD",
      "text": "<p>Default: False</p> <p>If true, the <code>preload</code> directive will be included in the HTTP Strict Transport Security (HSTS) header. This directive instructs the browser to preload the site in HTTPS. Browsers that use the HSTS preload list will force the site to be accessed via HTTPS even if the user types HTTP in the address bar.</p>"
    },
    {
      "location": "configuration/security/#secure_hsts_seconds",
      "title": "SECURE_HSTS_SECONDS",
      "text": "<p>Default: 0</p> <p>If set to a non-zero integer value, the SecurityMiddleware sets the HTTP Strict Transport Security (HSTS) header on all responses that do not already have it. This will instruct the browser that the website must be accessed via HTTPS, blocking any HTTP request.</p>"
    },
    {
      "location": "configuration/security/#secure_ssl_redirect",
      "title": "SECURE_SSL_REDIRECT",
      "text": "<p>Default: False</p> <p>If true, all non-HTTPS requests will be automatically redirected to use HTTPS.</p> <p>Warning</p> <p>Ensure that your frontend HTTP daemon has been configured to forward the HTTP scheme correctly before enabling this option. An incorrectly configured frontend may result in a looping redirect.</p>"
    },
    {
      "location": "configuration/security/#session_cookie_name",
      "title": "SESSION_COOKIE_NAME",
      "text": "<p>Default: <code>sessionid</code></p> <p>The name used for the session cookie. See the Django documentation for more detail.</p>"
    },
    {
      "location": "configuration/security/#session_cookie_secure",
      "title": "SESSION_COOKIE_SECURE",
      "text": "<p>Default: False</p> <p>If true, the cookie employed for session authentication will be marked as secure, meaning that it can only be sent across an HTTPS connection.</p>"
    },
    {
      "location": "configuration/security/#session_file_path",
      "title": "SESSION_FILE_PATH",
      "text": "<p>Default: None</p> <p>HTTP session data is used to track authenticated users when they access NetBox. By default, NetBox stores session data in its PostgreSQL database. However, this inhibits authentication to a standby instance of NetBox without write access to the database. Alternatively, a local file path may be specified here and NetBox will store session data as files instead of using the database. Note that the NetBox system user must have read and write permissions to this path.</p>"
    },
    {
      "location": "configuration/system/",
      "title": "System Parameters",
      "text": ""
    },
    {
      "location": "configuration/system/#base_path",
      "title": "BASE_PATH",
      "text": "<p>Default: None</p> <p>The base URL path to use when accessing NetBox. Do not include the scheme or domain name. For example, if installed at https://example.com/netbox/, set:</p> <pre><code>BASE_PATH = 'netbox/'\n</code></pre>"
    },
    {
      "location": "configuration/system/#default_language",
      "title": "DEFAULT_LANGUAGE",
      "text": "<p>Default: <code>en-us</code> (US English)</p> <p>Defines the default preferred language/locale for requests that do not specify one. (This parameter maps to Django's <code>LANGUAGE_CODE</code> internal setting.)</p>"
    },
    {
      "location": "configuration/system/#docs_root",
      "title": "DOCS_ROOT",
      "text": "<p>Default: <code>$INSTALL_ROOT/docs/</code></p> <p>The filesystem path to NetBox's documentation. This is used when presenting context-sensitive documentation in the web UI. By default, this will be the <code>docs/</code> directory within the root NetBox installation path. (Set this to <code>None</code> to disable the embedded documentation.)</p>"
    },
    {
      "location": "configuration/system/#email",
      "title": "EMAIL",
      "text": "<p>In order to send email, NetBox needs an email server configured. The following items can be defined within the <code>EMAIL</code> configuration parameter:</p> <ul> <li><code>SERVER</code> - Hostname or IP address of the email server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - TCP port to use for the connection (default: <code>25</code>)</li> <li><code>USERNAME</code> - Username with which to authenticate</li> <li><code>PASSWORD</code> - Password with which to authenticate</li> <li><code>USE_SSL</code> - Use SSL when connecting to the server (default: <code>False</code>)</li> <li><code>USE_TLS</code> - Use TLS when connecting to the server (default: <code>False</code>)</li> <li><code>SSL_CERTFILE</code> - Path to the PEM-formatted SSL certificate file (optional)</li> <li><code>SSL_KEYFILE</code> - Path to the PEM-formatted SSL private key file (optional)</li> <li><code>TIMEOUT</code> - Amount of time to wait for a connection, in seconds (default: <code>10</code>)</li> <li><code>FROM_EMAIL</code> - Sender address for emails sent by NetBox</li> </ul> <p>Note</p> <p>The <code>USE_SSL</code> and <code>USE_TLS</code> parameters are mutually exclusive.</p> <p>Email is sent from NetBox only for critical events or if configured for logging. If you would like to test the email server configuration, Django provides a convenient send_mail() function accessible within the NetBox shell:</p> <pre><code># python ./manage.py nbshell\n&gt;&gt;&gt; from django.core.mail import send_mail\n&gt;&gt;&gt; send_mail(\n  'Test Email Subject',\n  'Test Email Body',\n  'noreply-netbox@example.com',\n  ['users@example.com'],\n  fail_silently=False\n)\n</code></pre>"
    },
    {
      "location": "configuration/system/#http_proxies",
      "title": "HTTP_PROXIES",
      "text": "<p>Default: None</p> <p>A dictionary of HTTP proxies to use for outbound requests originating from NetBox (e.g. when sending webhook requests). Proxies should be specified by schema (HTTP and HTTPS) as per the Python requests library documentation. For example:</p> <pre><code>HTTP_PROXIES = {\n    'http': 'http://10.10.1.10:3128',\n    'https': 'http://10.10.1.10:1080',\n}\n</code></pre>"
    },
    {
      "location": "configuration/system/#internal_ips",
      "title": "INTERNAL_IPS",
      "text": "<p>Default: <code>('127.0.0.1', '::1')</code></p> <p>A list of IP addresses recognized as internal to the system, used to control the display of debugging output. For example, the debugging toolbar will be viewable only when a client is accessing NetBox from one of the listed IP addresses (and <code>DEBUG</code> is true).</p>"
    },
    {
      "location": "configuration/system/#isolated_deployment",
      "title": "ISOLATED_DEPLOYMENT",
      "text": "<p>Default: False</p> <p>Set this configuration parameter to True for NetBox deployments which do not have Internet access. This will disable miscellaneous functionality which depends on access to the Internet.</p> <p>Note</p> <p>If Internet access is available via a proxy, set <code>HTTP_PROXIES</code> instead.</p>"
    },
    {
      "location": "configuration/system/#jinja2_filters",
      "title": "JINJA2_FILTERS",
      "text": "<p>Default: <code>{}</code></p> <p>A dictionary of custom jinja2 filters with the key being the filter name and the value being a callable. For more information see the Jinja2 documentation. For example:</p> <pre><code>def uppercase(x):\n    return str(x).upper()\n\nJINJA2_FILTERS = {\n    'uppercase': uppercase,\n}\n</code></pre>"
    },
    {
      "location": "configuration/system/#logging",
      "title": "LOGGING",
      "text": "<p>By default, all messages of INFO severity or higher will be logged to the console. Additionally, if <code>DEBUG</code> is False and email access has been configured, ERROR and CRITICAL messages will be emailed to the users defined in <code>ADMINS</code>.</p> <p>The Django framework on which NetBox runs allows for the customization of logging format and destination. Please consult the Django logging documentation for more information on configuring this setting. Below is an example which will write all INFO and higher messages to a local file:</p> <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': '/var/log/netbox.log',\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file'],\n            'level': 'INFO',\n        },\n    },\n}\n</code></pre>"
    },
    {
      "location": "configuration/system/#available-loggers",
      "title": "Available Loggers",
      "text": "<ul> <li><code>netbox.&lt;app&gt;.&lt;model&gt;</code> - Generic form for model-specific log messages</li> <li><code>netbox.auth.*</code> - Authentication events</li> <li><code>netbox.api.views.*</code> - Views which handle business logic for the REST API</li> <li><code>netbox.reports.*</code> - Report execution (<code>module.name</code>)</li> <li><code>netbox.scripts.*</code> - Custom script execution (<code>module.name</code>)</li> <li><code>netbox.views.*</code> - Views which handle business logic for the web UI</li> </ul>"
    },
    {
      "location": "configuration/system/#media_root",
      "title": "MEDIA_ROOT",
      "text": "<p>Default: <code>$INSTALL_ROOT/netbox/media/</code></p> <p>The file path to the location where media files (such as image attachments) are stored. By default, this is the <code>netbox/media/</code> directory within the base NetBox installation path.</p>"
    },
    {
      "location": "configuration/system/#reports_root",
      "title": "REPORTS_ROOT",
      "text": "<p>Default: <code>$INSTALL_ROOT/netbox/reports/</code></p> <p>The file path to the location where custom reports will be kept. By default, this is the <code>netbox/reports/</code> directory within the base NetBox installation path.</p>"
    },
    {
      "location": "configuration/system/#scripts_root",
      "title": "SCRIPTS_ROOT",
      "text": "<p>Default: <code>$INSTALL_ROOT/netbox/scripts/</code></p> <p>The file path to the location where custom scripts will be kept. By default, this is the <code>netbox/scripts/</code> directory within the base NetBox installation path.</p>"
    },
    {
      "location": "configuration/system/#search_backend",
      "title": "SEARCH_BACKEND",
      "text": "<p>Default: <code>'netbox.search.backends.CachedValueSearchBackend'</code></p> <p>The dotted path to the desired search backend class. <code>CachedValueSearchBackend</code> is currently the only search backend provided in NetBox, however this setting can be used to enable a custom backend. </p>"
    },
    {
      "location": "configuration/system/#storage_backend",
      "title": "STORAGE_BACKEND",
      "text": "<p>Default: None (local storage)</p> <p>The backend storage engine for handling uploaded files (e.g. image attachments). NetBox supports integration with the <code>django-storages</code> and <code>django-storage-swift</code> packages, which provide backends for several popular file storage services. If not configured, local filesystem storage will be used.</p> <p>The configuration parameters for the specified storage backend are defined under the <code>STORAGE_CONFIG</code> setting.</p>"
    },
    {
      "location": "configuration/system/#storage_config",
      "title": "STORAGE_CONFIG",
      "text": "<p>Default: Empty</p> <p>A dictionary of configuration parameters for the storage backend configured as <code>STORAGE_BACKEND</code>. The specific parameters to be used here are specific to each backend; see the documentation for your selected backend (<code>django-storages</code> or <code>django-storage-swift</code>) for more detail.</p> <p>If <code>STORAGE_BACKEND</code> is not defined, this setting will be ignored.</p>"
    },
    {
      "location": "configuration/system/#time_zone",
      "title": "TIME_ZONE",
      "text": "<p>Default: UTC</p> <p>The time zone NetBox will use when dealing with dates and times. It is recommended to use UTC time unless you have a specific need to use a local time zone. Please see the list of available time zones.</p>"
    },
    {
      "location": "configuration/system/#translation_enabled",
      "title": "TRANSLATION_ENABLED",
      "text": "<p>Default: True</p> <p>Enables language translation for the user interface. (This parameter maps to Django's USE_I18N setting.)</p>"
    },
    {
      "location": "customization/custom-fields/",
      "title": "Custom Fields",
      "text": "<p>Each model in NetBox is represented in the database as a discrete table, and each attribute of a model exists as a column within its table. For example, sites are stored in the <code>dcim_site</code> table, which has columns named <code>name</code>, <code>facility</code>, <code>physical_address</code>, and so on. As new attributes are added to objects throughout the development of NetBox, tables are expanded to include new rows.</p> <p>However, some users might want to store additional object attributes that are somewhat esoteric in nature, and that would not make sense to include in the core NetBox database schema. For instance, suppose your organization needs to associate each device with a ticket number correlating it with an internal support system record. This is certainly a legitimate use for NetBox, but it's not a common enough need to warrant including a field for every NetBox installation. Instead, you can create a custom field to hold this data.</p> <p>Within the database, custom fields are stored as JSON data directly alongside each object. This alleviates the need for complex queries when retrieving objects.</p>"
    },
    {
      "location": "customization/custom-fields/#creating-custom-fields",
      "title": "Creating Custom Fields",
      "text": "<p>Custom fields may be created by navigating to Customization &gt; Custom Fields. NetBox supports many types of custom field:</p> <ul> <li>Text: Free-form text (intended for single-line use)</li> <li>Long text: Free-form of any length; supports Markdown rendering</li> <li>Integer: A whole number (positive or negative)</li> <li>Decimal: A fixed-precision decimal number (4 decimal places)</li> <li>Boolean: True or false</li> <li>Date: A date in ISO 8601 format (YYYY-MM-DD)</li> <li>Date &amp; time: A date and time in ISO 8601 format (YYYY-MM-DD HH:MM:SS)</li> <li>URL: This will be presented as a link in the web UI</li> <li>JSON: Arbitrary data stored in JSON format</li> <li>Selection: A selection of one of several pre-defined custom choices</li> <li>Multiple selection: A selection field which supports the assignment of multiple values</li> <li>Object: A single NetBox object of the type defined by <code>object_type</code></li> <li>Multiple object: One or more NetBox objects of the type defined by <code>object_type</code></li> </ul> <p>Each custom field must have a name. This should be a simple database-friendly string (e.g. <code>tps_report</code>) and may contain only alphanumeric characters and underscores. You may also assign a corresponding human-friendly label (e.g. \"TPS report\"); the label will be displayed on web forms. A weight is also required: Higher-weight fields will be ordered lower within a form. (The default weight is 100.) If a description is provided, it will appear beneath the field in a form.</p> <p>Marking a field as required will force the user to provide a value for the field when creating a new object or when saving an existing object. A default value for the field may also be provided. Use \"true\" or \"false\" for boolean fields, or the exact value of a choice for selection fields.</p> <p>A custom field must be assigned to one or more object types, or models, in NetBox. Once created, custom fields will automatically appear as part of these models in the web UI and REST API. Note that not all models support custom fields.</p>"
    },
    {
      "location": "customization/custom-fields/#filtering",
      "title": "Filtering",
      "text": "<p>The filter logic controls how values are matched when filtering objects by the custom field. Loose filtering (the default) matches on a partial value, whereas exact matching requires a complete match of the given string to a field's value. For example, exact filtering with the string \"red\" will only match the exact value \"red\", whereas loose filtering will match on the values \"red\", \"red-orange\", or \"bored\". Setting the filter logic to \"disabled\" disables filtering by the field entirely.</p>"
    },
    {
      "location": "customization/custom-fields/#grouping",
      "title": "Grouping",
      "text": "<p>Related custom fields can be grouped together within the UI by assigning each the same group name. When at least one custom field for an object type has a group defined, it will appear under the group heading within the custom fields panel under the object view. All custom fields with the same group name will appear under that heading. (Note that the group names must match exactly, or each will appear as a separate heading.)</p> <p>This parameter has no effect on the API representation of custom field data.</p>"
    },
    {
      "location": "customization/custom-fields/#visibility-editing",
      "title": "Visibility &amp; Editing",
      "text": "<p>When creating a custom field, users can control the conditions under which it may be displayed and edited within the NetBox user interface. The following choices are available for controlling the display of a custom field on an object:</p> <ul> <li>Always (default): The custom field is included when viewing an object.</li> <li>If Set: The custom field is included only if a value has been defined for the object.</li> <li>Hidden: The custom field will never be displayed within the UI. This option is recommended for fields which are not intended for use by human users.</li> </ul> <p>Additionally, the following options are available for controlling whether custom field values can be altered within the NetBox UI:</p> <ul> <li>Yes (default): The custom field's value may be modified when editing an object.</li> <li>No: The custom field is displayed for reference when editing an object, but its value may not be modified.</li> <li>Hidden: The custom field is not displayed when editing an object.</li> </ul> <p>Note that this setting has no impact on the REST or GraphQL APIs: Custom field data will always be available via either API.</p>"
    },
    {
      "location": "customization/custom-fields/#validation",
      "title": "Validation",
      "text": "<p>NetBox supports limited custom validation for custom field values. Following are the types of validation enforced for each field type:</p> <ul> <li>Text: Regular expression (optional)</li> <li>Integer: Minimum and/or maximum value (optional)</li> <li>Selection: Must exactly match one of the prescribed choices</li> </ul>"
    },
    {
      "location": "customization/custom-fields/#custom-selection-fields",
      "title": "Custom Selection Fields",
      "text": "<p>Each custom selection field must designate a choice set containing at least two choices. These are specified as a comma-separated list.</p> <p>If a default value is specified for a selection field, it must exactly match one of the provided choices. The value of a multiple selection field will always return a list, even if only one value is selected.</p>"
    },
    {
      "location": "customization/custom-fields/#custom-object-fields",
      "title": "Custom Object Fields",
      "text": "<p>An object or multi-object custom field can be used to refer to a particular NetBox object or objects as the \"value\" for a custom field. These custom fields must define an <code>object_type</code>, which determines the type of object to which custom field instances point.</p> <p>By default, an object choice field will make all objects of that type available for selection in the drop-down. The list choices can be filtered to show only objects with certain values by providing a <code>query_params</code> dict in the Related Object Filter field, as a JSON value. More information about <code>query_params</code> can be found here.</p>"
    },
    {
      "location": "customization/custom-fields/#custom-fields-in-templates",
      "title": "Custom Fields in Templates",
      "text": "<p>Several features within NetBox, such as export templates and webhooks, utilize Jinja2 templating. For convenience, objects which support custom field assignment expose custom field data through the <code>cf</code> property. This is a bit cleaner than accessing custom field data through the actual field (<code>custom_field_data</code>).</p> <p>For example, a custom field named <code>foo123</code> on the Site model is accessible on an instance as <code>{{ site.cf.foo123 }}</code>.</p>"
    },
    {
      "location": "customization/custom-fields/#custom-fields-and-the-rest-api",
      "title": "Custom Fields and the REST API",
      "text": "<p>When retrieving an object via the REST API, all of its custom data will be included within the <code>custom_fields</code> attribute. For example, below is the partial output of a site with two custom fields defined:</p> <pre><code>{\n    \"id\": 123,\n    \"url\": \"http://localhost:8000/api/dcim/sites/123/\",\n    \"name\": \"Raleigh 42\",\n    ...\n    \"custom_fields\": {\n        \"deployed\": \"2018-06-19\",\n        \"site_code\": \"US-NC-RAL42\"\n    },\n    ...\n</code></pre> <p>To set or change these values, simply include nested JSON data. For example:</p> <pre><code>{\n    \"name\": \"New Site\",\n    \"slug\": \"new-site\",\n    \"custom_fields\": {\n        \"deployed\": \"2019-03-24\"\n    }\n}\n</code></pre>"
    },
    {
      "location": "customization/custom-links/",
      "title": "Custom Links",
      "text": "<p>Custom links allow users to display arbitrary hyperlinks to external content within NetBox object views. These are helpful for cross-referencing related records in systems outside NetBox. For example, you might create a custom link on the device view which links to the current device in a Network Monitoring System (NMS).</p> <p>Custom links are created by navigating to Customization &gt; Custom Links. Each link is associated with a particular NetBox object type (site, device, prefix, etc.) and will be displayed on relevant views. Each link has display text and a URL, and data from the NetBox item being viewed can be included in the link using Jinja template code through the variable <code>object</code>, and custom fields through <code>object.cf</code>.</p> <p>For example, you might define a link like this:</p> <ul> <li>Text: <code>View NMS</code></li> <li>URL: <code>https://nms.example.com/nodes/?name={{ object.name }}</code></li> </ul> <p>When viewing a device named Router4, this link would render as:</p> <pre><code>&lt;a href=\"https://nms.example.com/nodes/?name=Router4\"&gt;View NMS&lt;/a&gt;\n</code></pre> <p>Custom links appear as buttons in the top right corner of the page. Numeric weighting can be used to influence the ordering of links, and each link can be enabled or disabled individually.</p> <p>Warning</p> <p>Custom links rely on user-created code to generate arbitrary HTML output, which may be dangerous. Only grant permission to create or modify custom links to trusted users.</p>"
    },
    {
      "location": "customization/custom-links/#context-data",
      "title": "Context Data",
      "text": "<p>The following context data is available within the template when rendering a custom link's text or URL.</p> Variable Description <code>object</code> The NetBox object being displayed <code>debug</code> A boolean indicating whether debugging is enabled <code>request</code> The current WSGI request <code>user</code> The current user (if authenticated) <code>perms</code> The permissions assigned to the user <p>While most of the context variables listed above will have consistent attributes, the object will be an instance of the specific object being viewed when the link is rendered. Different models have different fields and properties, so you may need to some research to determine the attributes available for use within your template for a specific object type.</p> <p>Checking the REST API representation of an object is generally a convenient way to determine what attributes are available. You can also reference the NetBox source code directly for a comprehensive list.</p>"
    },
    {
      "location": "customization/custom-links/#conditional-rendering",
      "title": "Conditional Rendering",
      "text": "<p>Only links which render with non-empty text are included on the page. You can employ conditional Jinja2 logic to control the conditions under which a link gets rendered.</p> <p>For example, if you only want to display a link for active devices, you could set the link text to</p> <pre><code>{% if object.status == 'active' %}View NMS{% endif %}\n</code></pre> <p>The link will not appear when viewing a device with any status other than \"active.\"</p> <p>As another example, if you wanted to show only devices belonging to a certain manufacturer, you could do something like this:</p> <pre><code>{% if object.device_type.manufacturer.name == 'Cisco' %}View NMS{% endif %}\n</code></pre> <p>The link will only appear when viewing a device with a manufacturer name of \"Cisco.\"</p>"
    },
    {
      "location": "customization/custom-links/#link-groups",
      "title": "Link Groups",
      "text": "<p>Group names can be specified to organize links into groups. Links with the same group name will render as a dropdown menu beneath a single button bearing the name of the group.</p>"
    },
    {
      "location": "customization/custom-links/#table-columns",
      "title": "Table Columns",
      "text": "<p>Custom links can also be included in object tables by selecting the desired links from the table configuration form. When displayed, each link will render as a hyperlink for its corresponding object. When exported (e.g. as CSV data), each link render only its URL.</p>"
    },
    {
      "location": "customization/custom-scripts/",
      "title": "Custom Scripts",
      "text": "<p>Custom scripting was introduced to provide a way for users to execute custom logic from within the NetBox UI. Custom scripts enable the user to directly and conveniently manipulate NetBox data in a prescribed fashion. They can be used to accomplish myriad tasks, such as:</p> <ul> <li>Automatically populate new devices and cables in preparation for a new site deployment</li> <li>Create a range of new reserved prefixes or IP addresses</li> <li>Fetch data from an external source and import it to NetBox</li> <li>Update objects with invalid or incomplete data</li> </ul> <p>They can also be used as a mechanism for validating the integrity of data within NetBox. Script authors can define test to check object against specific rules and conditions. For example, you can write script to check that:</p> <ul> <li>All top-of-rack switches have a console connection</li> <li>Every router has a loopback interface with an IP address assigned</li> <li>Each interface description conforms to a standard format</li> <li>Every site has a minimum set of VLANs defined</li> <li>All IP addresses have a parent prefix</li> </ul> <p>Custom scripts are Python code which exists outside the NetBox code base, so they can be updated and changed without interfering with the core NetBox installation. And because they're completely custom, there is no inherent limitation on what a script can accomplish.</p> <p>Only install trusted scripts</p> <p>Custom scripts have unrestricted access to change anything in the databse and are inherently unsafe and should only be installed and run from trusted sources.  You should also review and set permissions for who can run scripts if the script can modify any data.</p>"
    },
    {
      "location": "customization/custom-scripts/#writing-custom-scripts",
      "title": "Writing Custom Scripts",
      "text": "<p>All custom scripts must inherit from the <code>extras.scripts.Script</code> base class. This class provides the functionality necessary to generate forms and log activity.</p> <pre><code>from extras.scripts import Script\n\nclass MyScript(Script):\n    ...\n</code></pre> <p>Scripts comprise two core components: a set of variables and a <code>run()</code> method. Variables allow your script to accept user input via the NetBox UI, but they are optional: If your script does not require any user input, there is no need to define any variables.</p> <p>The <code>run()</code> method is where your script's execution logic lives. (Note that your script can have as many methods as needed: this is merely the point of invocation for NetBox.)</p> <pre><code>class MyScript(Script):\n    var1 = StringVar(...)\n    var2 = IntegerVar(...)\n    var3 = ObjectVar(...)\n\n    def run(self, data, commit):\n        ...\n</code></pre> <p>The <code>run()</code> method should accept two arguments:</p> <ul> <li><code>data</code> - A dictionary containing all the variable data passed via the web form.</li> <li><code>commit</code> - A boolean indicating whether database changes will be committed.</li> </ul> <p>Defining script variables is optional: You may create a script with only a <code>run()</code> method if no user input is needed.</p> <p>Any output generated by the script during its execution will be displayed under the \"output\" tab in the UI.</p> <p>By default, scripts within a module are ordered alphabetically in the scripts list page. To return scripts in a specific order, you can define the <code>script_order</code> variable at the end of your module. The <code>script_order</code> variable is a tuple which contains each Script class in the desired order. Any scripts that are omitted from this list will be listed last.</p> <pre><code>from extras.scripts import Script\n\nclass MyCustomScript(Script):\n    ...\n\nclass AnotherCustomScript(Script):\n    ...\n\nscript_order = (MyCustomScript, AnotherCustomScript)\n</code></pre>"
    },
    {
      "location": "customization/custom-scripts/#script-attributes",
      "title": "Script Attributes",
      "text": "<p>Script attributes are defined under a class named <code>Meta</code> within the script. These are optional, but encouraged.</p> <p>Warning</p> <p>These are also defined and used as properties on the base custom script class, so don't use the same names as variables or override them in your custom script.</p>"
    },
    {
      "location": "customization/custom-scripts/#name",
      "title": "<code>name</code>",
      "text": "<p>This is the human-friendly names of your script. If omitted, the class name will be used.</p>"
    },
    {
      "location": "customization/custom-scripts/#description",
      "title": "<code>description</code>",
      "text": "<p>A human-friendly description of what your script does.</p>"
    },
    {
      "location": "customization/custom-scripts/#field_order",
      "title": "<code>field_order</code>",
      "text": "<p>By default, script variables will be ordered in the form as they are defined in the script. <code>field_order</code> may be defined as an iterable of field names to determine the order in which variables are rendered within a default \"Script Data\" group. Any fields not included in this iterable be listed last. If <code>fieldsets</code> is defined, <code>field_order</code> will be ignored.  A fieldset group for \"Script Execution Parameters\" will be added to the end of the form by default for the user.</p>"
    },
    {
      "location": "customization/custom-scripts/#fieldsets",
      "title": "<code>fieldsets</code>",
      "text": "<p><code>fieldsets</code> may be defined as an iterable of field groups and their field names to determine the order in which variables are group and rendered. Any fields not included in this iterable will not be displayed in the form. If <code>fieldsets</code> is defined, <code>field_order</code> will be ignored.  A fieldset group for \"Script Execution Parameters\" will be added to the end of the fieldsets by default for the user.</p> <p>An example fieldset definition is provided below:</p> <pre><code>class MyScript(Script):\n    class Meta:\n        fieldsets = (\n            ('First group', ('field1', 'field2', 'field3')),\n            ('Second group', ('field4', 'field5')),\n        )\n</code></pre>"
    },
    {
      "location": "customization/custom-scripts/#commit_default",
      "title": "<code>commit_default</code>",
      "text": "<p>The checkbox to commit database changes when executing a script is checked by default. Set <code>commit_default</code> to False under the script's Meta class to leave this option unchecked by default.</p> <pre><code>commit_default = False\n</code></pre>"
    },
    {
      "location": "customization/custom-scripts/#scheduling_enabled",
      "title": "<code>scheduling_enabled</code>",
      "text": "<p>By default, a script can be scheduled for execution at a later time. Setting <code>scheduling_enabled</code> to False disables this ability: Only immediate execution will be possible. (This also disables the ability to set a recurring execution interval.)</p>"
    },
    {
      "location": "customization/custom-scripts/#job_timeout",
      "title": "<code>job_timeout</code>",
      "text": "<p>Set the maximum allowed runtime for the script. If not set, <code>RQ_DEFAULT_TIMEOUT</code> will be used.</p>"
    },
    {
      "location": "customization/custom-scripts/#accessing-request-data",
      "title": "Accessing Request Data",
      "text": "<p>Details of the current HTTP request (the one being made to execute the script) are available as the instance attribute <code>self.request</code>. This can be used to infer, for example, the user executing the script and the client IP address:</p> <pre><code>username = self.request.user.username\nip_address = self.request.META.get('HTTP_X_FORWARDED_FOR') or \\\n    self.request.META.get('REMOTE_ADDR')\nself.log_info(f\"Running as user {username} (IP: {ip_address})...\")\n</code></pre> <p>For a complete list of available request parameters, please see the Django documentation.</p>"
    },
    {
      "location": "customization/custom-scripts/#reading-data-from-files",
      "title": "Reading Data from Files",
      "text": "<p>The Script class provides two convenience methods for reading data from files:</p> <ul> <li><code>load_yaml</code></li> <li><code>load_json</code></li> </ul> <p>These two methods will load data in YAML or JSON format, respectively, from files within the local path (i.e. <code>SCRIPTS_ROOT</code>).</p>"
    },
    {
      "location": "customization/custom-scripts/#logging",
      "title": "Logging",
      "text": "<p>The Script object provides a set of convenient functions for recording messages at different severity levels:</p> <ul> <li><code>log_debug(message=None, obj=None)</code></li> <li><code>log_success(message=None, obj=None)</code></li> <li><code>log_info(message=None, obj=None)</code></li> <li><code>log_warning(message=None, obj=None)</code></li> <li><code>log_failure(message=None, obj=None)</code></li> </ul> <p>Log messages are returned to the user upon execution of the script. Markdown rendering is supported for log messages. A message may optionally be associated with a particular object by passing it as the second argument to the logging method.</p>"
    },
    {
      "location": "customization/custom-scripts/#test-methods",
      "title": "Test Methods",
      "text": "<p>A script can define one or more test methods to report on certain conditions. All test methods must have a name beginning with <code>test_</code> and accept no arguments beyond <code>self</code>.</p> <p>These methods are detected and run automatically when the script is executed, unless its <code>run()</code> method has been overridden. (When overriding <code>run()</code>, <code>run_tests()</code> can be called to run all test methods present in the script.)</p> <p>Calling any of these logging methods without a message will increment the relevant counter, but will not generate an output line in the script's log.</p> <p>Info</p> <p>This functionality was ported from legacy reports in NetBox v4.0.</p>"
    },
    {
      "location": "customization/custom-scripts/#example",
      "title": "Example",
      "text": "<pre><code>from dcim.choices import DeviceStatusChoices\nfrom dcim.models import ConsolePort, Device, PowerPort\nfrom extras.scripts import Script\n\n\nclass DeviceConnectionsReport(Script):\n    description = \"Validate the minimum physical connections for each device\"\n\n    def test_console_connection(self):\n\n        # Check that every console port for every active device has a connection defined.\n        active = DeviceStatusChoices.STATUS_ACTIVE\n        for console_port in ConsolePort.objects.prefetch_related('device').filter(device__status=active):\n            if not console_port.connected_endpoints:\n                self.log_failure(\n                    f\"No console connection defined for {console_port.name}\",\n                    console_port.device,\n                )\n            elif not console_port.connection_status:\n                self.log_warning(\n                    f\"Console connection for {console_port.name} marked as planned\",\n                    console_port.device,\n                )\n            else:\n                self.log_success(\"Passed\", console_port.device)\n\n    def test_power_connections(self):\n\n        # Check that every active device has at least two connected power supplies.\n        for device in Device.objects.filter(status=DeviceStatusChoices.STATUS_ACTIVE):\n            connected_ports = 0\n            for power_port in PowerPort.objects.filter(device=device):\n                if power_port.connected_endpoints:\n                    connected_ports += 1\n                    if not power_port.path.is_active:\n                        self.log_warning(\n                            f\"Power connection for {power_port.name} marked as planned\",\n                            device,\n                        )\n            if connected_ports &lt; 2:\n                self.log_failure(\n                    f\"{connected_ports} connected power supplies found (2 needed)\",\n                    device,\n                )\n            else:\n                self.log_success(\"Passed\", device)\n</code></pre>"
    },
    {
      "location": "customization/custom-scripts/#change-logging",
      "title": "Change Logging",
      "text": "<p>To generate the correct change log data when editing an existing object, a snapshot of the object must be taken before making any changes to the object.</p> <pre><code>if obj.pk and hasattr(obj, 'snapshot'):\n    obj.snapshot()\n\nobj.property = \"New Value\"\nobj.full_clean()\nobj.save()\n</code></pre>"
    },
    {
      "location": "customization/custom-scripts/#error-handling",
      "title": "Error handling",
      "text": "<p>Sometimes things go wrong and a script will run into an <code>Exception</code>. If that happens and an uncaught exception is raised by the custom script, the execution is aborted and a full stack trace is reported.</p> <p>Although this is helpful for debugging, in some situations it might be required to cleanly abort the execution of a custom script (e.g. because of invalid input data) and thereby make sure no changes are performed on the database. In this case the script can throw an <code>AbortScript</code> exception, which will prevent the stack trace from being reported, but still terminating the script's execution and reporting a given error message.</p> <pre><code>from utilities.exceptions import AbortScript\n\nif some_error:\n    raise AbortScript(\"Some meaningful error message\")\n</code></pre>"
    },
    {
      "location": "customization/custom-scripts/#variable-reference",
      "title": "Variable Reference",
      "text": ""
    },
    {
      "location": "customization/custom-scripts/#default-options",
      "title": "Default Options",
      "text": "<p>All custom script variables support the following default options:</p> <ul> <li><code>default</code> - The field's default value</li> <li><code>description</code> - A brief user-friendly description of the field</li> <li><code>label</code> - The field name to be displayed in the rendered form</li> <li><code>required</code> - Indicates whether the field is mandatory (all fields are required by default)</li> <li><code>widget</code> - The class of form widget to use (see the Django documentation)</li> </ul>"
    },
    {
      "location": "customization/custom-scripts/#stringvar",
      "title": "StringVar",
      "text": "<p>Stores a string of characters (i.e. text). Options include:</p> <ul> <li><code>min_length</code> - Minimum number of characters</li> <li><code>max_length</code> - Maximum number of characters</li> <li><code>regex</code> - A regular expression against which the provided value must match</li> </ul> <p>Note that <code>min_length</code> and <code>max_length</code> can be set to the same number to effect a fixed-length field.</p>"
    },
    {
      "location": "customization/custom-scripts/#textvar",
      "title": "TextVar",
      "text": "<p>Arbitrary text of any length. Renders as a multi-line text input field.</p>"
    },
    {
      "location": "customization/custom-scripts/#integervar",
      "title": "IntegerVar",
      "text": "<p>Stores a numeric integer. Options include:</p> <ul> <li><code>min_value</code> - Minimum value</li> <li><code>max_value</code> - Maximum value</li> </ul>"
    },
    {
      "location": "customization/custom-scripts/#booleanvar",
      "title": "BooleanVar",
      "text": "<p>A true/false flag. This field has no options beyond the defaults listed above.</p>"
    },
    {
      "location": "customization/custom-scripts/#choicevar",
      "title": "ChoiceVar",
      "text": "<p>A set of choices from which the user can select one.</p> <ul> <li><code>choices</code> - A list of <code>(value, label)</code> tuples representing the available choices. For example:</li> </ul> <pre><code>CHOICES = (\n    ('n', 'North'),\n    ('s', 'South'),\n    ('e', 'East'),\n    ('w', 'West')\n)\n\ndirection = ChoiceVar(choices=CHOICES)\n</code></pre> <p>In the example above, selecting the choice labeled \"North\" will submit the value <code>n</code>.</p>"
    },
    {
      "location": "customization/custom-scripts/#multichoicevar",
      "title": "MultiChoiceVar",
      "text": "<p>Similar to <code>ChoiceVar</code>, but allows for the selection of multiple choices.</p>"
    },
    {
      "location": "customization/custom-scripts/#objectvar",
      "title": "ObjectVar",
      "text": "<p>A particular object within NetBox. Each ObjectVar must specify a particular model, and allows the user to select one of the available instances. ObjectVar accepts several arguments, listed below.</p> <ul> <li><code>model</code> - The model class</li> <li><code>query_params</code> - A dictionary of query parameters to use when retrieving available options (optional)</li> <li><code>context</code> - A custom dictionary mapping template context variables to fields, used when rendering <code>&lt;option&gt;</code> elements within the dropdown menu (optional; see below)</li> <li><code>null_option</code> - A label representing a \"null\" or empty choice (optional)</li> <li><code>selector</code> - A boolean that, when True, includes an advanced object selection widget to assist the user in identifying the desired object (optional; False by default)</li> </ul> <p>To limit the selections available within the list, additional query parameters can be passed as the <code>query_params</code> dictionary. For example, to show only devices with an \"active\" status:</p> <pre><code>device = ObjectVar(\n    model=Device,\n    query_params={\n        'status': 'active'\n    }\n)\n</code></pre> <p>Multiple values can be specified by assigning a list to the dictionary key. It is also possible to reference the value of other fields in the form by prepending a dollar sign (<code>$</code>) to the variable's name.</p> <pre><code>region = ObjectVar(\n    model=Region\n)\nsite = ObjectVar(\n    model=Site,\n    query_params={\n        'region_id': '$region'\n    }\n)\n</code></pre>"
    },
    {
      "location": "customization/custom-scripts/#context-variables",
      "title": "Context Variables",
      "text": "<p>Custom context variables can be passed to override the default attribute names or to display additional information, such as a parent object.</p> Name Default Description <code>value</code> <code>\"id\"</code> The attribute which contains the option's value <code>label</code> <code>\"display\"</code> The attribute used as the option's human-friendly label <code>description</code> <code>\"description\"</code> The attribute to use as a description <code>depth</code><sup>1</sup> <code>\"_depth\"</code> The attribute which indicates an object's depth within a recursive hierarchy <code>disabled</code> -- The attribute which, if true, signifies that the option should be disabled <code>parent</code> -- The attribute which represents the object's parent object <code>count</code><sup>1</sup> -- The attribute which contains a numeric count of related objects"
    },
    {
      "location": "customization/custom-scripts/#multiobjectvar",
      "title": "MultiObjectVar",
      "text": "<p>Similar to <code>ObjectVar</code>, but allows for the selection of multiple objects.</p>"
    },
    {
      "location": "customization/custom-scripts/#filevar",
      "title": "FileVar",
      "text": "<p>An uploaded file. Note that uploaded files are present in memory only for the duration of the script's execution: They will not be automatically saved for future use. The script is responsible for writing file contents to disk where necessary.</p>"
    },
    {
      "location": "customization/custom-scripts/#ipaddressvar",
      "title": "IPAddressVar",
      "text": "<p>An IPv4 or IPv6 address, without a mask. Returns a <code>netaddr.IPAddress</code> object.</p>"
    },
    {
      "location": "customization/custom-scripts/#ipaddresswithmaskvar",
      "title": "IPAddressWithMaskVar",
      "text": "<p>An IPv4 or IPv6 address with a mask. Returns a <code>netaddr.IPNetwork</code> object which includes the mask.</p>"
    },
    {
      "location": "customization/custom-scripts/#ipnetworkvar",
      "title": "IPNetworkVar",
      "text": "<p>An IPv4 or IPv6 network with a mask. Returns a <code>netaddr.IPNetwork</code> object. Two attributes are available to validate the provided mask:</p> <ul> <li><code>min_prefix_length</code> - Minimum length of the mask</li> <li><code>max_prefix_length</code> - Maximum length of the mask</li> </ul>"
    },
    {
      "location": "customization/custom-scripts/#datevar",
      "title": "DateVar",
      "text": "<p>A calendar date. Returns a <code>datetime.date</code> object.</p>"
    },
    {
      "location": "customization/custom-scripts/#datetimevar",
      "title": "DateTimeVar",
      "text": "<p>A complete date &amp; time. Returns a <code>datetime.datetime</code> object.</p>"
    },
    {
      "location": "customization/custom-scripts/#running-custom-scripts",
      "title": "Running Custom Scripts",
      "text": "<p>Note</p> <p>To run a custom script, a user must be assigned permissions for <code>Extras &gt; Script</code>, <code>Extras &gt; Script Module</code>, and <code>Core &gt; Managed File</code> objects. They must also be assigned the <code>extras.run_script</code> permission. This is achieved by assigning the user (or group) a permission on the Script object and specifying the <code>run</code> action in \"Permissions\" as shown below.</p> <p></p>"
    },
    {
      "location": "customization/custom-scripts/#via-the-web-ui",
      "title": "Via the Web UI",
      "text": "<p>Custom scripts can be run via the web UI by navigating to the script, completing any required form data, and clicking the \"run script\" button. It is possible to schedule a script to be executed at specified time in the future. A scheduled script can be canceled by deleting the associated job result object.</p>"
    },
    {
      "location": "customization/custom-scripts/#via-the-api",
      "title": "Via the API",
      "text": "<p>To run a script via the REST API, issue a POST request to the script's endpoint specifying the form data and commitment. For example, to run a script named <code>example.MyReport</code>, we would make a request such as the following:</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/extras/scripts/example.MyReport/ \\\n--data '{\"data\": {\"foo\": \"somevalue\", \"bar\": 123}, \"commit\": true}'\n</code></pre> <p>Optionally <code>schedule_at</code> can be passed in the form data with a datetime string to schedule a script at the specified date and time.</p>"
    },
    {
      "location": "customization/custom-scripts/#via-the-cli",
      "title": "Via the CLI",
      "text": "<p>Scripts can be run on the CLI by invoking the management command:</p> <pre><code>python3 manage.py runscript [--commit] [--loglevel {debug,info,warning,error,critical}] [--data \"&lt;data&gt;\"] &lt;module&gt;.&lt;script&gt;\n</code></pre> <p>The required <code>&lt;module&gt;.&lt;script&gt;</code> argument is the script to run where <code>&lt;module&gt;</code> is the name of the python file in the <code>scripts</code> directory without the <code>.py</code> extension and <code>&lt;script&gt;</code> is the name of the script class in the <code>&lt;module&gt;</code> to run.</p> <p>The optional <code>--data \"&lt;data&gt;\"</code> argument is the data to send to the script</p> <p>The optional <code>--loglevel</code> argument is the desired logging level to output to the console.</p> <p>The optional <code>--commit</code> argument will commit any changes in the script to the database.</p>"
    },
    {
      "location": "customization/custom-scripts/#example_1",
      "title": "Example",
      "text": "<p>Below is an example script that creates new objects for a planned site. The user is prompted for three variables:</p> <ul> <li>The name of the new site</li> <li>The device model (a filtered list of defined device types)</li> <li>The number of access switches to create</li> </ul> <p>These variables are presented as a web form to be completed by the user. Once submitted, the script's <code>run()</code> method is called to create the appropriate objects.</p> <pre><code>from django.utils.text import slugify\n\nfrom dcim.choices import DeviceStatusChoices, SiteStatusChoices\nfrom dcim.models import Device, DeviceRole, DeviceType, Manufacturer, Site\nfrom extras.scripts import *\n\n\nclass NewBranchScript(Script):\n\n    class Meta:\n        name = \"New Branch\"\n        description = \"Provision a new branch site\"\n        field_order = ['site_name', 'switch_count', 'switch_model']\n\n    site_name = StringVar(\n        description=\"Name of the new site\"\n    )\n    switch_count = IntegerVar(\n        description=\"Number of access switches to create\"\n    )\n    manufacturer = ObjectVar(\n        model=Manufacturer,\n        required=False\n    )\n    switch_model = ObjectVar(\n        description=\"Access switch model\",\n        model=DeviceType,\n        query_params={\n            'manufacturer_id': '$manufacturer'\n        }\n    )\n\n    def run(self, data, commit):\n\n        # Create the new site\n        site = Site(\n            name=data['site_name'],\n            slug=slugify(data['site_name']),\n            status=SiteStatusChoices.STATUS_PLANNED\n        )\n        site.full_clean()\n        site.save()\n        self.log_success(f\"Created new site: {site}\")\n\n        # Create access switches\n        switch_role = DeviceRole.objects.get(name='Access Switch')\n        for i in range(1, data['switch_count'] + 1):\n            switch = Device(\n                device_type=data['switch_model'],\n                name=f'{site.slug}-switch{i}',\n                site=site,\n                status=DeviceStatusChoices.STATUS_PLANNED,\n                role=switch_role\n            )\n            switch.full_clean()\n            switch.save()\n            self.log_success(f\"Created new switch: {switch}\")\n\n        # Generate a CSV table of new devices\n        output = [\n            'name,make,model'\n        ]\n        for switch in Device.objects.filter(site=site):\n            attrs = [\n                switch.name,\n                switch.device_type.manufacturer.name,\n                switch.device_type.model\n            ]\n            output.append(','.join(attrs))\n\n        return '\\n'.join(output)\n</code></pre> <ol> <li> <p>The value of this attribute must be a positive integer\u00a0\u21a9\u21a9</p> </li> </ol>"
    },
    {
      "location": "customization/custom-validation/",
      "title": "Custom Validation",
      "text": "<p>NetBox validates every object prior to it being written to the database to ensure data integrity. This validation includes things like checking for proper formatting and that references to related objects are valid. However, you may wish to supplement this validation with some rules of your own. For example, perhaps you require that every site's name conforms to a specific pattern.  This can be done using custom validation rules.</p>"
    },
    {
      "location": "customization/custom-validation/#custom-validation-rules",
      "title": "Custom Validation Rules",
      "text": "<p>Custom validation rules are expressed as a mapping of object attributes to a set of rules to which that attribute must conform. For example:</p> <pre><code>{\n  \"name\": {\n    \"min_length\": 5,\n    \"max_length\": 30\n  }\n}\n</code></pre> <p>This defines a custom validator which checks that the length of the <code>name</code> attribute for an object is at least five characters long, and no longer than 30 characters. This validation is executed after NetBox has performed its own internal validation.</p>"
    },
    {
      "location": "customization/custom-validation/#validation-types",
      "title": "Validation Types",
      "text": "<p>The <code>CustomValidator</code> class supports several validation types:</p> <ul> <li><code>min</code>: Minimum value</li> <li><code>max</code>: Maximum value</li> <li><code>min_length</code>: Minimum string length</li> <li><code>max_length</code>: Maximum string length</li> <li><code>regex</code>: Application of a regular expression</li> <li><code>required</code>: A value must be specified</li> <li><code>prohibited</code>: A value must not be specified</li> <li><code>eq</code>: A value must be equal to the specified value</li> <li><code>neq</code>: A value must not be equal to the specified value</li> </ul> <p>The <code>min</code> and <code>max</code> types should be defined for numeric values, whereas <code>min_length</code>, <code>max_length</code>, and <code>regex</code> are suitable for character strings (text values). The <code>required</code> and <code>prohibited</code> validators may be used for any field, and should be passed a value of <code>True</code>.</p> <p>Warning</p> <p>Bear in mind that these validators merely supplement NetBox's own validation: They will not override it. For example, if a certain model field is required by NetBox, setting a validator for it with <code>{'prohibited': True}</code> will not work.</p>"
    },
    {
      "location": "customization/custom-validation/#custom-validation-logic",
      "title": "Custom Validation Logic",
      "text": "<p>There may be instances where the provided validation types are insufficient. NetBox provides a <code>CustomValidator</code> class which can be extended to enforce arbitrary validation logic by overriding its <code>validate()</code> method, and calling <code>fail()</code> when an unsatisfactory condition is detected. The <code>validate()</code> method should accept an instance (the object being saved) as well as the current request effecting the change.</p> <pre><code>from extras.validators import CustomValidator\n\nclass MyValidator(CustomValidator):\n\n    def validate(self, instance, request):\n        if instance.status == 'active' and not instance.description:\n            self.fail(\"Active sites must have a description set!\", field='status')\n</code></pre> <p>The <code>fail()</code> method may optionally specify a field with which to associate the supplied error message. If specified, the error message will appear to the user as associated with this field. If omitted, the error message will not be associated with any field.</p>"
    },
    {
      "location": "customization/custom-validation/#assigning-custom-validators",
      "title": "Assigning Custom Validators",
      "text": "<p>Custom validators are associated with specific NetBox models under the CUSTOM_VALIDATORS configuration parameter. There are three manners by which custom validation rules can be defined:</p> <ol> <li>Plain JSON mapping (no custom logic)</li> <li>Dotted path to a custom validator class</li> <li>Direct reference to a custom validator class</li> </ol>"
    },
    {
      "location": "customization/custom-validation/#plain-data",
      "title": "Plain Data",
      "text": "<p>For cases where custom logic is not needed, it is sufficient to pass validation rules as plain JSON-compatible objects. This approach typically affords the most portability for your configuration. For instance:</p> <pre><code>CUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"name\": {\n                \"min_length\": 5,\n                \"max_length\": 30,\n            }\n        }\n    ],\n    \"dcim.device\": [\n        {\n            \"platform\": {\n                \"required\": True,\n            }\n        }\n    ]\n}\n</code></pre>"
    },
    {
      "location": "customization/custom-validation/#referencing-related-object-attributes",
      "title": "Referencing Related Object Attributes",
      "text": "<p>The attributes of a related object can be referenced by specifying a dotted path. For example, to reference the name of a region to which a site is assigned, use <code>region.name</code>:</p> <pre><code>CUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"region.name\": {\n                \"neq\": \"New York\"\n            }\n        }\n    ]\n}\n</code></pre>"
    },
    {
      "location": "customization/custom-validation/#validating-request-parameters",
      "title": "Validating Request Parameters",
      "text": "<p>In addition to validating object attributes, custom validators can also match against parameters of the current request (where available). For example, the following rule will permit only the user named \"admin\" to modify an object:</p> <pre><code>{\n  \"request.user.username\": {\n    \"eq\": \"admin\"\n  }\n}\n</code></pre> <p>Tip</p> <p>Custom validation should generally not be used to enforce permissions. NetBox provides a robust object-based permissions mechanism which should be used for this purpose.</p>"
    },
    {
      "location": "customization/custom-validation/#dotted-path-to-class",
      "title": "Dotted Path to Class",
      "text": "<p>In instances where a custom validator class is needed, it can be referenced by its Python path (relative to NetBox's working directory):</p> <pre><code>CUSTOM_VALIDATORS = {\n    'dcim.site': (\n        'my_validators.Validator1',\n        'my_validators.Validator2',\n    ),\n    'dcim.device': (\n        'my_validators.Validator3',\n    )\n}\n</code></pre>"
    },
    {
      "location": "customization/custom-validation/#direct-class-reference",
      "title": "Direct Class Reference",
      "text": "<p>This approach requires each class being instantiated to be imported directly within the Python configuration file.</p> <pre><code>from my_validators import Validator1, Validator2, Validator3\n\nCUSTOM_VALIDATORS = {\n    'dcim.site': (\n        Validator1(),\n        Validator2(),\n    ),\n    'dcim.device': (\n        Validator3(),\n    )\n}\n</code></pre> <p>Note</p> <p>Even if defining only a single validator, it must be passed as an iterable.</p>"
    },
    {
      "location": "customization/export-templates/",
      "title": "Export Templates",
      "text": "<p>NetBox allows users to define custom templates that can be used when exporting objects. To create an export template, navigate to Customization &gt; Export Templates.</p> <p>Each export template is associated with a certain type of object. For instance, if you create an export template for VLANs, your custom template will appear under the \"Export\" button on the VLANs list. Each export template must have a name, and may optionally designate a specific export MIME type and/or file extension.</p> <p>Export templates must be written in Jinja2.</p> <p>Note</p> <p>The name <code>table</code> is reserved for internal use.</p> <p>Warning</p> <p>Export templates are rendered using user-submitted code, which may pose security risks under certain conditions. Only grant permission to create or modify export templates to trusted users.</p> <p>The list of objects returned from the database when rendering an export template is stored in the <code>queryset</code> variable, which you'll typically want to iterate through using a <code>for</code> loop. Object properties can be access by name. For example:</p> <pre><code>{% for rack in queryset %}\nRack: {{ rack.name }}\nSite: {{ rack.site.name }}\nHeight: {{ rack.u_height }}U\n{% endfor %}\n</code></pre> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for a custom field named <code>color</code> on <code>obj</code>.</p> <p>If you need to use the config context data in an export template, you'll should use the function <code>get_config_context</code> to get all the config context data. For example:</p> <pre><code>{% for server in queryset %}\n{% set data = server.get_config_context() %}\n{{ data.syslog }}\n{% endfor %}\n</code></pre> <p>The <code>as_attachment</code> attribute of an export template controls its behavior when rendered. If true, the rendered content will be returned to the user as a downloadable file. If false, it will be displayed within the browser. (This may be handy e.g. for generating HTML content.)</p> <p>A MIME type and file extension can optionally be defined for each export template. The default MIME type is <code>text/plain</code>.</p>"
    },
    {
      "location": "customization/export-templates/#rest-api-integration",
      "title": "REST API Integration",
      "text": "<p>When it is necessary to provide authentication credentials (such as when <code>LOGIN_REQUIRED</code> has been enabled), it is recommended to render export templates via the REST API. This allows the client to specify an authentication token. To render an export template via the REST API, make a <code>GET</code> request to the model's list endpoint and append the <code>export</code> parameter specifying the export template name. For example:</p> <pre><code>GET /api/dcim/sites/?export=MyTemplateName\n</code></pre> <p>Note that the body of the response will contain only the rendered export template content, as opposed to a JSON object or list.</p>"
    },
    {
      "location": "customization/export-templates/#example",
      "title": "Example",
      "text": "<p>Here's an example device export template that will generate a simple Nagios configuration from a list of devices.</p> <pre><code>{% for device in queryset %}{% if device.status and device.primary_ip %}define host{\n        use                     generic-switch\n        host_name               {{ device.name }}\n        address                 {{ device.primary_ip.address.ip }}\n}\n{% endif %}{% endfor %}\n</code></pre> <p>The generated output will look something like this:</p> <pre><code>define host{\n        use                     generic-switch\n        host_name               switch1\n        address                 192.0.2.1\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch2\n        address                 192.0.2.2\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch3\n        address                 192.0.2.3\n}\n</code></pre>"
    },
    {
      "location": "customization/reports/",
      "title": "NetBox Reports",
      "text": "<p>Warning</p> <p>Reports are deprecated beginning with NetBox v4.0, and their functionality has been merged with custom scripts. While backward compatibility has been maintained, users are advised to convert legacy reports into custom scripts soon, as support for legacy reports will be removed in a future release.</p>"
    },
    {
      "location": "customization/reports/#converting-reports-to-scripts",
      "title": "Converting Reports to Scripts",
      "text": ""
    },
    {
      "location": "customization/reports/#step-1-update-class-definition",
      "title": "Step 1: Update Class Definition",
      "text": "<p>Change the parent class from <code>Report</code> to <code>Script</code>:</p> Old code<pre><code>from extras.reports import Report\n\nclass MyReport(Report):\n</code></pre> New code<pre><code>from extras.scripts import Script\n\nclass MyReport(Script):\n</code></pre>"
    },
    {
      "location": "customization/reports/#step-2-update-logging-calls",
      "title": "Step 2: Update Logging Calls",
      "text": "<p>Reports and scripts both provide logging methods, however their signatures differ. All script logging methods accept a message as the first parameter, and accept an object as an optional second parameter.</p> <p>Additionally, the Report class' generic <code>log()</code> method is not available on Script. Users are advised to replace calls of this method with <code>log_info()</code>.</p> <p>Use the table below as a reference when updating these methods.</p> Report (old) Script (New) <code>log(message)</code> <code>log_info(message)</code> <code>log_debug(obj, message)</code><sup>1</sup> <code>log_debug(message, obj)</code> <code>log_info(obj, message)</code> <code>log_info(message, obj)</code> <code>log_success(obj, message)</code> <code>log_success(message, obj)</code> <code>log_warning(obj, message)</code> <code>log_warning(message, obj)</code> <code>log_failure(obj, message)</code> <code>log_failure(message, obj)</code> Old code<pre><code>self.log_failure(\n    console_port.device,\n    f\"No console connection defined for {console_port.name}\"\n)\n</code></pre> New code<pre><code>self.log_failure(\n    f\"No console connection defined for {console_port.name}\",\n    obj=console_port.device,\n)\n</code></pre>"
    },
    {
      "location": "customization/reports/#other-notes",
      "title": "Other Notes",
      "text": "<p>Existing reports will be converted to scripts automatically upon upgrading to NetBox v4.0, and previous job history will be retained. However, users are advised to convert legacy reports into custom scripts at the earliest opportunity, as support for legacy reports will be removed in a future release.</p> <p>The <code>pre_run()</code> and <code>post_run()</code> Report methods have been carried over to Script. These are called automatically by Script's <code>run()</code> method. (Note that if you opt to override this method, you are responsible for calling <code>pre_run()</code> and <code>post_run()</code> where applicable.)</p> <p>The <code>is_valid()</code> method on Report is no longer needed and has been removed.</p> <ol> <li> <p><code>log_debug()</code> was added to the Report class in v4.0 to avoid confusion with the same method on Script\u00a0\u21a9</p> </li> </ol>"
    },
    {
      "location": "development/",
      "title": "NetBox Development",
      "text": "<p>Thanks for your interest in contributing to NetBox! This introduction covers a few important things to know before you get started.</p>"
    },
    {
      "location": "development/#the-code",
      "title": "The Code",
      "text": "<p>NetBox and many of its related projects are maintained on GitHub. GitHub also serves as one of our primary discussion forums. While all the code and discussion is publicly accessible, you'll need register for a free GitHub account to engage in participation. Most people begin by forking the NetBox repository under their own GitHub account to begin working on the code.</p> <p></p> <p>There are two permanent branches in the repository:</p> <ul> <li><code>main</code> - Active development for the upcoming patch release. Pull requests will typically be based on this branch unless they introduce breaking changes that must be deferred until the next minor release.</li> <li><code>feature</code> - New feature work to be introduced in the next minor release (e.g. from v4.2 to v4.3).</li> </ul> <p>NetBox components are arranged into Django apps. Each app holds the models, views, and other resources relevant to a particular function:</p> <ul> <li><code>circuits</code>: Communications circuits and providers (not to be confused with power circuits)</li> <li><code>dcim</code>: Datacenter infrastructure management (sites, racks, and devices)</li> <li><code>extras</code>: Additional features not considered part of the core data model</li> <li><code>ipam</code>: IP address management (VRFs, prefixes, IP addresses, and VLANs)</li> <li><code>tenancy</code>: Tenants (such as customers) to which NetBox objects may be assigned</li> <li><code>users</code>: Authentication and user preferences</li> <li><code>utilities</code>: Resources which are not user-facing (extendable classes, etc.)</li> <li><code>virtualization</code>: Virtual machines and clusters</li> <li><code>wireless</code>: Wireless links and LANs</li> </ul> <p>All core functionality is stored within the <code>netbox/</code> subdirectory. HTML templates are stored in a common <code>templates/</code> directory, with model- and view-specific templates arranged by app. Documentation is kept in the <code>docs/</code> root directory.</p>"
    },
    {
      "location": "development/#proposing-changes",
      "title": "Proposing Changes",
      "text": "<p>All substantial changes made to the code base are tracked using GitHub issues. Feature requests, bug reports, and similar proposals must all be filed as issues and approved by a maintainer before work begins. This ensures that all changes to the code base are properly documented for future reference.</p> <p>To submit a new feature request or bug report for NetBox, select and complete the appropriate issue template. Once your issue has been approved, you're welcome to submit a pull request containing your proposed changes.</p> <p></p> <p>Check out our issue intake policy for an overview of the issue triage and approval processes.</p> <p>Tip</p> <p>Avoid starting work on a proposal before it has been accepted. Not all proposed changes will be accepted, and we'd hate for you to waste time working on code that might not make it into the project.</p>"
    },
    {
      "location": "development/#getting-help",
      "title": "Getting Help",
      "text": "<p>There are two primary forums for getting assistance with NetBox development:</p> <ul> <li>GitHub discussions - The preferred forum for general discussion and support issues. Ideal for shaping a feature requests prior to submitting an issue.</li> <li>#netbox on NetDev Community Slack - Good for quick chats. Avoid any discussion that might need to be referenced later on, as the chat history is not retained indefinitely.</li> </ul> <p>Note</p> <p>Don't use GitHub issues to ask for help: These are reserved for proposed code changes only.</p>"
    },
    {
      "location": "development/#governance",
      "title": "Governance",
      "text": "<p>NetBox follows the benevolent dictator model of governance, with Jeremy Stretch ultimately responsible for all changes to the code base. While community contributions are welcomed and encouraged, the lead maintainer's primary role is to ensure the project's long-term maintainability and continued focus on its primary functions.</p>"
    },
    {
      "location": "development/#licensing",
      "title": "Licensing",
      "text": "<p>The entire NetBox project is licensed as open source under the Apache 2.0 license. This is a very permissive license which allows unlimited redistribution of all code within the project. Note that all submissions to the project are subject to the same license.</p>"
    },
    {
      "location": "development/adding-models/",
      "title": "Adding Models",
      "text": ""
    },
    {
      "location": "development/adding-models/#1-define-the-model-class",
      "title": "1. Define the model class",
      "text": "<p>Models within each app are stored in either <code>models.py</code> or within a submodule under the <code>models/</code> directory. When creating a model, be sure to subclass the appropriate base model from <code>netbox.models</code>. This will typically be NetBoxModel or OrganizationalModel. Remember to add the model class to the <code>__all__</code> listing for the module.</p> <p>Each model should define, at a minimum:</p> <ul> <li>A <code>Meta</code> class specifying a deterministic ordering (if ordered by fields other than the primary ID)</li> <li>A <code>__str__()</code> method returning a user-friendly string representation of the instance</li> <li>A <code>get_absolute_url()</code> method if necessary; a standard version of the method is defined in the <code>NetBoxFeatureSet</code> base class, but you will need to provide your own (returning an instance's direct URL using <code>reverse()</code>) if not subclassing that base class</li> </ul>"
    },
    {
      "location": "development/adding-models/#2-define-field-choices",
      "title": "2. Define field choices",
      "text": "<p>If the model has one or more fields with static choices, define those choices in <code>choices.py</code> by subclassing <code>utilities.choices.ChoiceSet</code>.</p>"
    },
    {
      "location": "development/adding-models/#3-generate-database-migrations",
      "title": "3. Generate database migrations",
      "text": "<p>Once your model definition is complete, generate database migrations by running <code>manage.py makemigrations -n $NAME --no-header</code>. Always specify a short unique name when generating migrations.</p> <p>Configuration Required</p> <p>Set <code>DEVELOPER = True</code> in your NetBox configuration to enable the creation of new migrations.</p>"
    },
    {
      "location": "development/adding-models/#4-add-all-standard-views",
      "title": "4. Add all standard views",
      "text": "<p>Most models will need view classes created in <code>views.py</code> to serve the following operations:</p> <ul> <li>List view</li> <li>Detail view</li> <li>Edit view</li> <li>Delete view</li> <li>Bulk import</li> <li>Bulk edit</li> <li>Bulk delete</li> </ul>"
    },
    {
      "location": "development/adding-models/#5-add-url-paths",
      "title": "5. Add URL paths",
      "text": "<p>Add the relevant URL path for each view created in the previous step to <code>urls.py</code>.</p>"
    },
    {
      "location": "development/adding-models/#6-add-relevant-forms",
      "title": "6. Add relevant forms",
      "text": "<p>Depending on the type of model being added, you may need to define several types of form classes. These include:</p> <ul> <li>A base model form (for creating/editing individual objects)</li> <li>A bulk edit form</li> <li>A bulk import form (for CSV-based import)</li> <li>A filterset form (for filtering the object list view)</li> </ul>"
    },
    {
      "location": "development/adding-models/#7-create-the-filterset",
      "title": "7. Create the FilterSet",
      "text": "<p>Each model should have a corresponding FilterSet class defined. This is used to filter UI and API queries. Subclass the appropriate class from <code>netbox.filtersets</code> that matches the model's parent class.</p>"
    },
    {
      "location": "development/adding-models/#8-create-the-table-class",
      "title": "8. Create the table class",
      "text": "<p>Create a table class for the model in <code>tables.py</code> by subclassing <code>utilities.tables.BaseTable</code>. Under the table's <code>Meta</code> class, be sure to list both the fields and default columns.</p>"
    },
    {
      "location": "development/adding-models/#9-create-a-searchindex-subclass",
      "title": "9. Create a SearchIndex subclass",
      "text": "<p>If this model will be included in global search results, create a subclass of <code>netbox.search.SearchIndex</code> for it and specify the fields to be indexed.</p>"
    },
    {
      "location": "development/adding-models/#10-create-the-object-template",
      "title": "10. Create the object template",
      "text": "<p>Create the HTML template for the object view. (The other views each typically employ a generic template.) This template should extend <code>generic/object.html</code>.</p>"
    },
    {
      "location": "development/adding-models/#11-add-the-model-to-the-navigation-menu",
      "title": "11. Add the model to the navigation menu",
      "text": "<p>Add the relevant navigation menu items in <code>netbox/netbox/navigation/menu.py</code>.</p>"
    },
    {
      "location": "development/adding-models/#12-rest-api-components",
      "title": "12. REST API components",
      "text": "<p>Create the following for each model:</p> <ul> <li>Detailed (full) model serializer in <code>api/serializers.py</code></li> <li>API view in <code>api/views.py</code></li> <li>Endpoint route in <code>api/urls.py</code></li> </ul>"
    },
    {
      "location": "development/adding-models/#13-graphql-api-components",
      "title": "13. GraphQL API components",
      "text": "<p>Create a GraphQL object type for the model in <code>graphql/types.py</code> by subclassing the appropriate class from <code>netbox.graphql.types</code>.</p> <p>Note: GraphQL unit tests may fail citing null values on a non-nullable field if related objects are prefetched. You may need to fix this by setting the type annotation to be <code>= strawberry_django.field(select_related=[\"policy\"])</code> or similar.</p> <p>Also extend the schema class defined in <code>graphql/schema.py</code> with the individual object and object list fields per the established convention.</p>"
    },
    {
      "location": "development/adding-models/#14-add-tests",
      "title": "14. Add tests",
      "text": "<p>Add tests for the following:</p> <ul> <li>UI views</li> <li>API views</li> <li>Filter sets</li> </ul>"
    },
    {
      "location": "development/adding-models/#15-documentation",
      "title": "15. Documentation",
      "text": "<p>Create a new documentation page for the model in <code>docs/models/&lt;app_label&gt;/&lt;model_name&gt;.md</code>. Include this file under the \"features\" documentation where appropriate.</p> <p>Also add your model to the index in <code>docs/development/models.md</code>.</p>"
    },
    {
      "location": "development/application-registry/",
      "title": "Application Registry",
      "text": "<p>The registry is an in-memory data structure which houses various application-wide parameters, such as the list of enabled plugins. It is not exposed to the user and is not intended to be modified by any code outside of NetBox core.</p> <p>The registry behaves essentially like a Python dictionary, with the notable exception that once a store (key) has been declared, it cannot be deleted or overwritten. The value of a store can, however, be modified; e.g. by appending a value to a list. Store values generally do not change once the application has been initialized.</p> <p>The registry can be inspected by importing <code>registry</code> from <code>extras.registry</code>.</p>"
    },
    {
      "location": "development/application-registry/#stores",
      "title": "Stores",
      "text": ""
    },
    {
      "location": "development/application-registry/#counter_fields",
      "title": "<code>counter_fields</code>",
      "text": "<p>A dictionary mapping of models to foreign keys with which cached counter fields are associated.</p>"
    },
    {
      "location": "development/application-registry/#data_backends",
      "title": "<code>data_backends</code>",
      "text": "<p>A dictionary mapping data backend types to their respective classes. These are used to interact with remote data sources.</p>"
    },
    {
      "location": "development/application-registry/#denormalized_fields",
      "title": "<code>denormalized_fields</code>",
      "text": "<p>Stores registration made using <code>netbox.denormalized.register()</code>. For each model, a list of related models and their field mappings is maintained to facilitate automatic updates.</p>"
    },
    {
      "location": "development/application-registry/#model_features",
      "title": "<code>model_features</code>",
      "text": "<p>A dictionary of particular features (e.g. custom fields) mapped to the NetBox models which support them, arranged by app. For example:</p> <pre><code>{\n    'custom_fields': {\n        'circuits': ['provider', 'circuit'],\n        'dcim': ['site', 'rack', 'devicetype', ...],\n        ...\n    },\n    'event_rules': {\n        'extras': ['configcontext', 'tag', ...],\n        'dcim': ['site', 'rack', 'devicetype', ...],\n    },\n    ...\n}\n</code></pre> <p>Supported model features are listed in the features matrix.</p>"
    },
    {
      "location": "development/application-registry/#models",
      "title": "<code>models</code>",
      "text": "<p>This key lists all models which have been registered in NetBox which are not designated for private use. (Setting <code>_netbox_private</code> to True on a model excludes it from this list.) As with individual features under <code>model_features</code>, models are organized by app label.</p>"
    },
    {
      "location": "development/application-registry/#plugins",
      "title": "<code>plugins</code>",
      "text": "<p>This store maintains all registered items for plugins, such as navigation menus, template extensions, etc.</p>"
    },
    {
      "location": "development/application-registry/#request_processors",
      "title": "<code>request_processors</code>",
      "text": "<p>A list of context managers to invoke when processing a request e.g. in middleware or when executing a background job. Request processors can be registered with the <code>@register_request_processor</code> decorator.</p>"
    },
    {
      "location": "development/application-registry/#search",
      "title": "<code>search</code>",
      "text": "<p>A dictionary mapping each model (identified by its app and label) to its search index class, if one has been registered for it.</p>"
    },
    {
      "location": "development/application-registry/#tables",
      "title": "<code>tables</code>",
      "text": "<p>A dictionary mapping table classes to lists of extra columns that have been registered by plugins using the <code>register_table_column()</code> utility function. Each column is defined as a tuple of name and column instance.</p>"
    },
    {
      "location": "development/application-registry/#views",
      "title": "<code>views</code>",
      "text": "<p>A hierarchical mapping of registered views for each model. Mappings are added using the <code>register_model_view()</code> decorator, and URLs paths can be generated from these using <code>get_model_urls()</code>.</p>"
    },
    {
      "location": "development/extending-models/",
      "title": "Extending Models",
      "text": "<p>Below is a list of tasks to consider when adding a new field to a core model.</p>"
    },
    {
      "location": "development/extending-models/#1-add-the-field-to-the-model-class",
      "title": "1. Add the field to the model class",
      "text": "<p>Add the field to the model, taking care to address any of the following conditions.</p> <ul> <li> <p>When adding a GenericForeignKey field, also add an index under <code>Meta</code> for its two concrete fields. For example:</p> <pre><code>class Meta:\n    indexes = (\n        models.Index(fields=('object_type', 'object_id')),\n    )\n</code></pre> </li> </ul>"
    },
    {
      "location": "development/extending-models/#2-generate-and-run-database-migrations",
      "title": "2. Generate and run database migrations",
      "text": "<p>Django migrations are used to express changes to the database schema. In most cases, Django can generate these automatically, however very complex changes may require manual intervention. Always remember to specify a short but descriptive name when generating a new migration.</p> <pre><code>./manage.py makemigrations &lt;app&gt; -n &lt;name&gt; --no-header\n./manage.py migrate\n</code></pre> <p>Where possible, try to merge related changes into a single migration. For example, if three new fields are being added to different models within an app, these can be expressed in a single migration. You can merge a newly generated migration with an existing one by combining their <code>operations</code> lists.</p> <p>Do not alter existing migrations</p> <p>Migrations can only be merged within a release. Once a new release has been published, its migrations cannot be altered (other than for the purpose of correcting a bug).</p>"
    },
    {
      "location": "development/extending-models/#3-add-validation-logic-to-clean",
      "title": "3. Add validation logic to <code>clean()</code>",
      "text": "<p>If the new field introduces additional validation requirements (beyond what's included with the field itself), implement them in the model's <code>clean()</code> method. Remember to call the model's original method using <code>super()</code> before or after your custom validation as appropriate:</p> <pre><code>class Foo(models.Model):\n\n    def clean(self):\n        super().clean()\n\n        # Custom validation goes here\n        if self.bar is None:\n            raise ValidationError()\n</code></pre>"
    },
    {
      "location": "development/extending-models/#4-update-relevant-querysets",
      "title": "4. Update relevant querysets",
      "text": "<p>If you're adding a relational field (e.g. <code>ForeignKey</code>) and intend to include the data when retrieving a list of objects, be sure to include the field using <code>prefetch_related()</code> as appropriate. This will optimize the view and avoid extraneous database queries.</p>"
    },
    {
      "location": "development/extending-models/#5-update-api-serializer",
      "title": "5. Update API serializer",
      "text": "<p>Extend the model's API serializer in <code>&lt;app&gt;.api.serializers</code> to include the new field.</p>"
    },
    {
      "location": "development/extending-models/#6-add-fields-to-forms",
      "title": "6. Add fields to forms",
      "text": "<p>Extend any forms to include the new field(s) as appropriate. These are found under the <code>forms/</code> directory within each app. Common forms include:</p> <ul> <li>Credit/edit - Manipulating a single object</li> <li>Bulk edit - Performing a change on many objects at once</li> <li>CSV import - The form used when bulk importing objects in CSV format</li> <li>Filter - Displays the options available for filtering a list of objects (both UI and API)</li> </ul>"
    },
    {
      "location": "development/extending-models/#7-extend-object-filter-set",
      "title": "7. Extend object filter set",
      "text": "<p>If the new field should be filterable, add it to the <code>FilterSet</code> for the model. If the field should be searchable, remember to query it in the FilterSet's <code>search()</code> method.</p>"
    },
    {
      "location": "development/extending-models/#8-add-column-to-object-table",
      "title": "8. Add column to object table",
      "text": "<p>If the new field will be included in the object list view, add a column to the model's table. For simple fields, adding the field name to <code>Meta.fields</code> will be sufficient. More complex fields may require declaring a custom column. Also add the field name to <code>default_columns</code> if the column should be present in the table by default.</p>"
    },
    {
      "location": "development/extending-models/#9-update-the-searchindex",
      "title": "9. Update the SearchIndex",
      "text": "<p>Where applicable, add the new field to the model's SearchIndex for inclusion in global search.</p>"
    },
    {
      "location": "development/extending-models/#10-update-the-ui-templates",
      "title": "10. Update the UI templates",
      "text": "<p>Edit the object's view template to display the new field. There may also be a custom add/edit form template that needs to be updated.</p>"
    },
    {
      "location": "development/extending-models/#11-createextend-test-cases",
      "title": "11. Create/extend test cases",
      "text": "<p>Create or extend the relevant test cases to verify that the new field and any accompanying validation logic perform as expected. This is especially important for relational fields. NetBox incorporates various test suites, including:</p> <ul> <li>API serializer/view tests</li> <li>Filter tests</li> <li>Form tests</li> <li>Model tests</li> <li>View tests</li> </ul> <p>Be diligent to ensure all the relevant test suites are adapted or extended as necessary to test any new functionality.</p>"
    },
    {
      "location": "development/extending-models/#12-update-the-models-documentation",
      "title": "12. Update the model's documentation",
      "text": "<p>Each model has a dedicated page in the documentation, at <code>models/&lt;app&gt;/&lt;model&gt;.md</code>. Update this file to include any relevant information about the new field.</p>"
    },
    {
      "location": "development/getting-started/",
      "title": "Getting Started",
      "text": ""
    },
    {
      "location": "development/getting-started/#setting-up-a-development-environment",
      "title": "Setting up a Development Environment",
      "text": "<p>Getting started with NetBox development is pretty straightforward, and should feel very familiar to anyone with Django development experience. There are a few things you'll need:</p> <ul> <li>A Linux system or compatible environment</li> <li>A PostgreSQL server, which can be installed locally per the documentation</li> <li>A Redis server, which can also be installed locally</li> <li>Python 3.10 or later</li> </ul>"
    },
    {
      "location": "development/getting-started/#1-fork-the-repo",
      "title": "1. Fork the Repo",
      "text": "<p>Assuming you'll be working on your own fork, your first step will be to fork the official git repository. (If you're a maintainer who's going to be working directly with the official repo, skip this step.) Click the \"fork\" button at top right (be sure that you've logged into GitHub first).</p> <p></p> <p>Copy the URL provided in the dialog box.</p> <p></p> <p>You can then clone your GitHub fork locally for development:</p> <pre><code>$ git clone https://github.com/$username/netbox.git\nCloning into 'netbox'...\nremote: Enumerating objects: 85949, done.\nremote: Counting objects: 100% (4672/4672), done.\nremote: Compressing objects: 100% (1224/1224), done.\nremote: Total 85949 (delta 3538), reused 4332 (delta 3438), pack-reused 81277\nReceiving objects: 100% (85949/85949), 55.16 MiB | 44.90 MiB/s, done.\nResolving deltas: 100% (68008/68008), done.\n$ ls netbox/\nbase_requirements.txt  contrib          docs         mkdocs.yml  NOTICE     requirements.txt  upgrade.sh\nCHANGELOG.md           CONTRIBUTING.md  LICENSE.txt  netbox      README.md  scripts\n</code></pre>"
    },
    {
      "location": "development/getting-started/#2-create-a-new-branch",
      "title": "2. Create a New Branch",
      "text": "<p>The NetBox project utilizes two persistent git branches to track work:</p> <ul> <li><code>main</code> - All development on the upcoming stable (patch) release occurs here. Releases are published from this branch.</li> <li><code>feature</code> - All work planned for the upcoming minor release is done here.</li> </ul> <p>Typically, you'll base pull requests off of the <code>main</code> branch, or off of <code>feature</code> if you're working on the upcoming minor or major release. For example, assume that the current NetBox release is v4.2.3. Work applied to the <code>main</code> branch will appear in v4.2.4, and work done under the <code>feature</code> branch will be included in the next minor release (v4.3.0).</p> <p>To create a new branch, first ensure that you've checked out the desired base branch, then run:</p> <pre><code>git checkout -B $branchname\n</code></pre> <p>When naming a new git branch, contributors are strongly encouraged to use the relevant issue number followed by a very brief description of the work:</p> <pre><code>$issue-$description\n</code></pre> <p>The description should be just two or three words to imply the focus of the work being performed. For example, bug #1234 to fix a TypeError exception when creating a device might be named <code>1234-device-typerror</code>. This ensures that branches are always follow some logical ordering (e.g. when running <code>git branch -a</code>) and helps other developers quickly identify the purpose of each.</p>"
    },
    {
      "location": "development/getting-started/#3-create-a-python-virtual-environment",
      "title": "3. Create a Python Virtual Environment",
      "text": "<p>A virtual environment (or \"venv\" for short) is like a container for a set of Python packages. These allow you to build environments suited to specific projects without interfering with system packages or other projects. When installed per the documentation, NetBox uses a virtual environment in production.</p> <p>Create a virtual environment using the <code>venv</code> Python module:</p> <pre><code>mkdir ~/.venv\npython3 -m venv ~/.venv/netbox\n</code></pre> <p>This will create a directory named <code>.venv/netbox/</code> in your home directory, which houses a virtual copy of the Python executable and its related libraries and tooling. When running NetBox for development, it will be run using the Python binary at <code>~/.venv/netbox/bin/python</code>.</p> <p>Virtual Environments</p> <p>Keeping virtual environments in <code>~/.venv/</code> is a common convention but entirely optional: Virtual environments can be created almost wherever you please. Also consider using <code>virtualenvwrapper</code> to simplify the management of multiple environments.</p> <p>Once created, activate the virtual environment:</p> <pre><code>source ~/.venv/netbox/bin/activate\n</code></pre> <p>Notice that the console prompt changes to indicate the active environment. This updates the necessary system environment variables to ensure that any Python scripts are run within the virtual environment.</p>"
    },
    {
      "location": "development/getting-started/#4-install-required-packages",
      "title": "4. Install Required Packages",
      "text": "<p>With the virtual environment activated, install the project's required Python packages using the <code>pip</code> module. Required packages are defined in <code>requirements.txt</code>. Each line in this file specifies the name and specific version of a required package.</p> <pre><code>python -m pip install -r requirements.txt\n</code></pre>"
    },
    {
      "location": "development/getting-started/#5-install-pre-commit",
      "title": "5. Install Pre-Commit",
      "text": "<p>NetBox uses <code>pre-commit</code> to automatically validate code when commiting new changes. This includes the following operations:</p> <ul> <li>Run the <code>ruff</code> Python linter</li> <li>Run Django's internal system check</li> <li>Check for missing database migrations</li> <li>Validate any changes to the documentation with <code>mkdocs</code></li> <li>Validate Typescript &amp; Sass styling with <code>yarn</code></li> <li>Ensure that any modified static front end assets have been recompiled</li> </ul> <p>Enable <code>pre-commit</code> with the following commands prior to commiting any changes:</p> <pre><code>python -m pip install ruff pre-commit\npre-commit install\n</code></pre> <p>You may also need to set up the yarn packages as shown in the Web UI Development Guide.</p>"
    },
    {
      "location": "development/getting-started/#6-configure-netbox",
      "title": "6. Configure NetBox",
      "text": "<p>Within the <code>netbox/netbox/</code> directory, copy <code>configuration_example.py</code> to <code>configuration.py</code> and update the following parameters:</p> <ul> <li><code>ALLOWED_HOSTS</code>: This can be set to <code>['*']</code> for development purposes</li> <li><code>DATABASE</code>: PostgreSQL database connection parameters</li> <li><code>REDIS</code>: Redis configuration (if different from the defaults)</li> <li><code>SECRET_KEY</code>: Set to a random string (use <code>generate_secret_key.py</code> in the parent directory to generate a suitable key)</li> <li><code>DEBUG</code>: Set to <code>True</code></li> <li><code>DEVELOPER</code>: Set to <code>True</code> (this enables the creation of new database migrations)</li> </ul>"
    },
    {
      "location": "development/getting-started/#7-start-the-development-server",
      "title": "7. Start the Development Server",
      "text": "<p>Django provides a lightweight, auto-updating HTTP/WSGI server for development use. It is started with the <code>runserver</code> management command:</p> <pre><code>$ ./manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nAugust 18, 2022 - 15:17:52\nDjango version 4.0.7, using settings 'netbox.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> <p>This ensures that your development environment is now complete and operational. The development server will monitor the development environment and automatically reload in response to any changes made.</p> <p>IDE Integration</p> <p>Some IDEs, such as the highly-recommended PyCharm, will integrate with Django's development server and allow you to run it directly within the IDE. This is strongly encouraged as it makes for a much more convenient development environment.</p>"
    },
    {
      "location": "development/getting-started/#ui-development",
      "title": "UI Development",
      "text": "<p>For UI development you will need to review the Web UI Development Guide</p>"
    },
    {
      "location": "development/getting-started/#populating-demo-data",
      "title": "Populating Demo Data",
      "text": "<p>Once you have your development environment up and running, it might be helpful to populate some \"dummy\" data to make interacting with the UI and APIs more convenient. Check out the netbox-demo-data repo on GitHub, which houses a collection of sample data that can be easily imported to any new NetBox deployment. (This sample data is used to populate the public demo instance at https://demo.netbox.dev.)</p> <p>The demo data is provided in JSON format and loaded into an empty database using Django's <code>loaddata</code> management command. Consult the demo data repo's <code>README</code> file for complete instructions on populating the data.</p>"
    },
    {
      "location": "development/getting-started/#running-tests",
      "title": "Running Tests",
      "text": "<p>Prior to committing any substantial changes to the code base, be sure to run NetBox's test suite to catch potential errors. Tests are run using the <code>test</code> management command, which employs Python's <code>unittest</code> library. Remember to ensure that the Python virtual environment is active before running this command. Also keep in mind that these commands are executed in the <code>netbox/</code> directory, not the root directory of the repository.</p> <p>To avoid potential issues with your local configuration file, set the <code>NETBOX_CONFIGURATION</code> to point to the packaged test configuration at <code>netbox/configuration_testing.py</code>. This will handle things like ensuring that the dummy plugin is enabled for comprehensive testing.</p> <pre><code>export NETBOX_CONFIGURATION=netbox.configuration_testing\ncd netbox/\npython manage.py test\n</code></pre> <p>In cases where you haven't made any changes to the database schema (which is typical), you can append the <code>--keepdb</code> argument to this command to reuse the test database between runs. This cuts down on the time it takes to run the test suite since the database doesn't have to be rebuilt each time. (Note that this argument will cause errors if you've modified any model fields since the previous test run.)</p> <pre><code>python manage.py test --keepdb\n</code></pre> <p>You can also reduce testing time by enabling parallel test execution with the <code>--parallel</code> flag. (By default, this will run as many parallel tests as you have processors. To avoid sluggishness, it's a good idea to specify a lower number of parallel tests.) This flag can be combined with <code>--keepdb</code>, although if you encounter any strange errors, try running the test suite again with parallelization disabled.</p> <pre><code>python manage.py test --parallel &lt;n&gt;\n</code></pre> <p>Finally, it's possible to limit the run to a specific set of tests, specified by their Python path. For example, to run only IPAM and DCIM view tests:</p> <pre><code>python manage.py test dcim.tests.test_views ipam.tests.test_views\n</code></pre> <p>This is handy for instances where just a few tests are failing and you want to re-run them individually.</p> <p>Info</p> <p>NetBox uses django-rich to enhance Django's default <code>test</code> management command.</p>"
    },
    {
      "location": "development/getting-started/#submitting-pull-requests",
      "title": "Submitting Pull Requests",
      "text": "<p>Once you're happy with your work and have verified that all tests pass, commit your changes and push it upstream to your fork. Always provide descriptive (but not excessively verbose) commit messages. Be sure to prefix your commit message with the word \"Fixes\" or \"Closes\" and the relevant issue number (with a hash mark). This tells GitHub to automatically close the referenced issue once the commit has been merged.</p> <pre><code>git commit -m \"Closes #1234: Add IPv5 support\"\ngit push origin\n</code></pre> <p>Once your fork has the new commit, submit a pull request to the NetBox repo to propose the changes. Be sure to provide a detailed accounting of the changes being made and the reasons for doing so.</p> <p>Once submitted, a maintainer will review your pull request and either merge it or request changes. If changes are needed, you can make them via new commits to your fork: The pull request will update automatically.</p> <p>Warning</p> <p>Remember, pull requests are permitted only for accepted issues. If an issue you want to work on hasn't been approved by a maintainer yet, it's best to avoid risking your time and effort on a change that might not be accepted. (The one exception to this is trivial changes to the documentation or other non-critical resources.)</p>"
    },
    {
      "location": "development/git-cheat-sheet/",
      "title": "git Cheat Sheet",
      "text": "<p>This cheat sheet serves as a convenient reference for NetBox contributors who already somewhat familiar with using git. For a general introduction to the tooling and workflows involved, please see GitHub's guide Getting started with git.</p>"
    },
    {
      "location": "development/git-cheat-sheet/#common-operations",
      "title": "Common Operations",
      "text": ""
    },
    {
      "location": "development/git-cheat-sheet/#clone-a-repo",
      "title": "Clone a Repo",
      "text": "<p>This copies a remote git repository (e.g. from GitHub) to your local workstation. It will create a new directory bearing the repo's name in the current path.</p> Command<pre><code>git clone https://github.com/$org-name/$repo-name\n</code></pre> Example<pre><code>$ git clone https://github.com/netbox-community/netbox\nCloning into 'netbox'...\nremote: Enumerating objects: 95112, done.\nremote: Counting objects: 100% (682/682), done.\nremote: Compressing objects: 100% (246/246), done.\nremote: Total 95112 (delta 448), reused 637 (delta 436), pack-reused 94430\nReceiving objects: 100% (95112/95112), 60.40 MiB | 45.82 MiB/s, done.\nResolving deltas: 100% (74979/74979), done.\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#pull-new-commits",
      "title": "Pull New Commits",
      "text": "<p>To update your local branch with any recent upstream commits, run <code>git pull</code>.</p> Command<pre><code>git pull\n</code></pre> Example<pre><code>$ git pull\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), done.\nFrom https://github.com/netbox-community/netbox\n   28bc76695..e0741cc9a  develop    -&gt; origin/develop\nUpdating 28bc76695..e0741cc9a\nFast-forward\n docs/release-notes/version-3.3.md | 1 +\n netbox/netbox/settings.py         | 1 +\n 2 files changed, 2 insertions(+)\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#list-branches",
      "title": "List Branches",
      "text": "<p><code>git branch</code> lists all local branches. Appending <code>-a</code> to this command will list both local (green) and remote (red) branches.</p> Command<pre><code>git branch -a\n</code></pre> Example<pre><code>$ git branch -a\n* develop\n  remotes/origin/10170-changelog\n  remotes/origin/HEAD -&gt; origin/develop\n  remotes/origin/develop\n  remotes/origin/feature\n  remotes/origin/master\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#switch-branches",
      "title": "Switch Branches",
      "text": "<p>To switch to a different branch, use the <code>checkout</code> command.</p> Command<pre><code>git checkout $branchname\n</code></pre> Example<pre><code>$ git checkout feature\nBranch 'feature' set up to track remote branch 'feature' from 'origin'.\nSwitched to a new branch 'feature'\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#create-a-new-branch",
      "title": "Create a New Branch",
      "text": "<p>Use the <code>-b</code> argument with <code>checkout</code> to create a new local branch from the current branch.</p> Command<pre><code>git checkout -b $newbranch\n</code></pre> Example<pre><code>$ git checkout -b 123-fix-foo\nSwitched to a new branch '123-fix-foo'\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#rename-a-branch",
      "title": "Rename a Branch",
      "text": "<p>To rename the current branch, use the <code>git branch</code> command with the <code>-m</code> argument (for \"modify\").</p> Command<pre><code>git branch -m $newname\n</code></pre> Example<pre><code>$ git branch -m jstretch-testing\n$ git branch\n  develop\n  feature\n* jstretch-testing\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#merge-a-branch",
      "title": "Merge a Branch",
      "text": "<p>To merge one branch into another, use the <code>git merge</code> command. Start by checking out the destination branch, and merge the source branch into it.</p> Command<pre><code>git merge $sourcebranch\n</code></pre> Example<pre><code>$ git checkout testing \nSwitched to branch 'testing'\nYour branch is up to date with 'origin/testing'.\n$ git merge branch2 \nUpdating 9a12b5b5f..8ee42390b\nFast-forward\n newfile.py | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 newfile.py\n</code></pre> <p>Avoid Merging Remote Branches</p> <p>You generally want to avoid merging branches that exist on the remote (upstream) repository, namely <code>main</code> and <code>feature</code>: Merges into these branches should be done via a pull request on GitHub. Only merge branches when it is necessary to consolidate work you've done locally.</p>"
    },
    {
      "location": "development/git-cheat-sheet/#show-pending-changes",
      "title": "Show Pending Changes",
      "text": "<p>After making changes to files in the repo, <code>git status</code> will display a summary of created, modified, and deleted files.</p> Command<pre><code>git status\n</code></pre> Example<pre><code>$ git status\nOn branch 123-fix-foo\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   README.md\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    foo.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#stage-changed-files",
      "title": "Stage Changed Files",
      "text": "<p>Before creating a new commit, modified files must be staged. This is typically done with the <code>git add</code> command. You can specify a particular path, or just append <code>-A</code> to automatically staged all changed files within the current directory. Run <code>git status</code> again to verify what files have been staged.</p> Command<pre><code>git add -A\n</code></pre> Example<pre><code>$ git add -A\n$ git status\nOn branch 123-fix-foo\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    modified:   README.md\n    new file:   foo.py\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#review-staged-files",
      "title": "Review Staged Files",
      "text": "<p>It's a good idea to thoroughly review all staged changes immediately prior to creating a new commit. This can be done using the <code>git diff</code> command. Appending the <code>--staged</code> argument will show staged changes; omitting it will show changes that have not yet been staged.</p> Command<pre><code>git diff --staged\n</code></pre> Example<pre><code>$ git diff --staged\ndiff --git a/README.md b/README.md\nindex 93e125079..4344fb514 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,3 +1,8 @@\n+\n+Added some lines here\n+and here\n+and here too\n+\n &lt;div align=\"center\"&gt;\n   &lt;img src=\"https://raw.githubusercontent.com/netbox-community/netbox/main/docs/netbox_logo.svg\" width=\"400\" alt=\"NetBox logo\" /&gt;\n &lt;/div&gt;\ndiff --git a/foo.py b/foo.py\nnew file mode 100644\nindex 000000000..e69de29bb\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#create-a-new-commit",
      "title": "Create a New Commit",
      "text": "<p>The <code>git commit</code> command records your changes to the current branch. Specify a commit message with the <code>-m</code> argument. (If omitted, a file editor will be opened to provide a message.</p> Command<pre><code>git commit -m \"Fixes #123: Fixed the thing that was broken\"\n</code></pre> Example<pre><code>$ git commit -m \"Fixes #123: Fixed the thing that was broken\"\n[123-fix-foo 9a12b5b5f] Fixes #123: Fixed the thing that was broken\n 2 files changed, 5 insertions(+)\n create mode 100644 foo.py\n</code></pre> <p>Automatically Closing Issues</p> <p>GitHub will automatically close any issues referenced in a commit message by <code>Fixes:</code> or <code>Closes:</code> when the commit is merged into the repository's default branch. Contributors are strongly encouraged to follow this convention when forming commit messages. (Use \"Closes\" for feature requests and \"Fixes\" for bugs.)</p>"
    },
    {
      "location": "development/git-cheat-sheet/#push-a-commit-upstream",
      "title": "Push a Commit Upstream",
      "text": "<p>Once you've made a commit locally, it needs to be pushed upstream to the remote repository (typically called \"origin\"). This is done with the <code>git push</code> command. If this is a new branch that doesn't yet exist on the remote repository, you'll need to set the upstream for it when pushing.</p> Command<pre><code>git push -u origin $branchname\n</code></pre> Example<pre><code>$ git push -u origin testing\nCounting objects: 3, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 377 bytes | 377.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nremote: \nremote: Create a pull request for 'testing' on GitHub by visiting:\nremote:      https://github.com/netbox-community/netbox/pull/new/testing\nremote: \nTo https://github.com/netbox-community/netbox\n * [new branch]          testing -&gt; testing\nBranch 'testing' set up to track remote branch 'testing' from 'origin'.\n</code></pre> <p>Tip</p> <p>You can apply the following git configuration to automatically set the upstream for all new branches. This obviates the need to specify <code>-u origin</code>.</p> <pre><code>git config --global push.default current\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#the-github-cli-client",
      "title": "The GitHub CLI Client",
      "text": "<p>GitHub provides a free CLI client to simplify many aspects of interacting with GitHub repositories. Note that this utility is separate from <code>git</code>, and must be installed separately.</p> <p>This guide provides some examples of common operations, but be sure to check out the GitHub CLI manual for a complete accounting of available commands.</p>"
    },
    {
      "location": "development/git-cheat-sheet/#list-open-pull-requests",
      "title": "List Open Pull Requests",
      "text": "Command<pre><code>gh pr list\n</code></pre> Example<pre><code>$ gh pr list\n\nShowing 3 of 3 open pull requests in netbox-community/netbox\n\n#10223  #7503 API Bulk-Create of Devices does not check Rack-Space  7503-bulkdevice             about 17 hours ago\n#9716   Closes #9599: Add cursor pagination mode                    lyuyangh:cursor-pagination  about 1 month ago\n#9498   Adds replication and adoption for module import             sleepinggenius2:issue_9361  about 2 months ago\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#check-out-a-pr",
      "title": "Check Out a PR",
      "text": "<p>This command will automatically check out the remote branch associated with an open pull request.</p> Command<pre><code>gh pr checkout $number\n</code></pre> Example<pre><code>$ gh pr checkout 10223\nBranch '7503-bulkdevice' set up to track remote branch '7503-bulkdevice' from 'origin'.\nSwitched to a new branch '7503-bulkdevice'\n</code></pre>"
    },
    {
      "location": "development/git-cheat-sheet/#fixing-mistakes",
      "title": "Fixing Mistakes",
      "text": ""
    },
    {
      "location": "development/git-cheat-sheet/#modify-the-previous-commit",
      "title": "Modify the Previous Commit",
      "text": "<p>Sometimes you'll find that you've overlooked a necessary change and need to commit again. If you haven't pushed your most recent commit and just need to make a small tweak or two, you can amend your most recent commit instead of creating a new one.</p> <p>First, stage the desired files with <code>git add</code> and verify the changes, the issue the <code>git commit</code> command with the <code>--amend</code> argument. You can also append the <code>--no-edit</code> argument if you would like to keep the previous commit message.</p> Command<pre><code>git commit --amend --no-edit\n</code></pre> Example<pre><code>$ git add -A\n$ git diff --staged\n$ git commit --amend --no-edit\n[testing 239b16921] Added a new file\n Date: Fri Aug 26 16:30:05 2022 -0400\n 2 files changed, 1 insertion(+)\n create mode 100644 newfile.py\n</code></pre> <p>Don't Amend After Pushing</p> <p>Never amend a commit you've already pushed upstream unless you're certain no one else is working on the same branch. Force-pushing will overwrite the change history, which will break any commits from other contributors. When in doubt, create a new commit instead.</p>"
    },
    {
      "location": "development/git-cheat-sheet/#undo-the-last-commit",
      "title": "Undo the Last Commit",
      "text": "<p>The <code>git reset</code> command can be used to undo the most recent commit. (<code>HEAD~</code> is equivalent to <code>HEAD~1</code> and references the commit prior to the current HEAD.) After making and staging your changes, commit using <code>-c ORIG_HEAD</code> to replace the erroneous commit.</p> Command<pre><code>git reset HEAD~\n</code></pre> Example<pre><code>$ git add -A\n$ git commit -m \"Erroneous commit\"\n[testing 09ce06736] Erroneous commit\n Date: Mon Aug 29 15:20:04 2022 -0400\n 1 file changed, 1 insertion(+)\n create mode 100644 BADCHANGE\n$ git reset HEAD~\n$ rm BADFILE\n$ git add -A\n$ git commit -m \"Fixed commit\"\n[testing c585709f3] Fixed commit\n Date: Mon Aug 29 15:22:38 2022 -0400\n 1 file changed, 65 insertions(+), 20 deletions(-)\n</code></pre> <p>Don't Reset After Pushing</p> <p>Resetting only works until you've pushed your local changes upstream. If you've already pushed upstream, use <code>git revert</code> instead. This will create a new commit that reverts the erroneous one, but ensures that the git history remains intact.</p>"
    },
    {
      "location": "development/git-cheat-sheet/#rebase-from-upstream",
      "title": "Rebase from Upstream",
      "text": "<p>If a change has been pushed to the upstream branch since you most recently pulled it, attempting to push a new local commit will fail:</p> <pre><code>$ git push\nTo https://github.com/netbox-community/netbox.git\n ! [rejected]            develop -&gt; develop (fetch first)\nerror: failed to push some refs to 'https://github.com/netbox-community/netbox.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>To resolve this, first fetch the upstream branch to update your local copy, and then rebase your local branch to include the new changes. Once the rebase has completed, you can push your local commits upstream.</p> Commands<pre><code>git fetch\ngit rebase origin/$branchname\n</code></pre> Example<pre><code>$ git fetch\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), done.\nFrom https://github.com/netbox-community/netbox\n   815b2d8a2..8c35ebbb7  develop    -&gt; origin/develop\n$ git rebase origin/develop\nFirst, rewinding head to replay your work on top of it...\nApplying: Further tweaks to the PR template\nApplying: Changelog for #10176, #10217\n$ git push\nCounting objects: 9, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (9/9), done.\nWriting objects: 100% (9/9), 1.02 KiB | 1.02 MiB/s, done.\nTotal 9 (delta 6), reused 0 (delta 0)\nremote: Resolving deltas: 100% (6/6), completed with 5 local objects.\nTo https://github.com/netbox-community/netbox.git\n   8c35ebbb7..ada745324  develop -&gt; develop\n</code></pre>"
    },
    {
      "location": "development/internationalization/",
      "title": "Internationalization",
      "text": "<p>Beginning with NetBox v4.0, NetBox will leverage Django's automatic translation to support languages other than English. This page details the areas of the project which require special attention to ensure functioning translation support. Briefly, these include:</p> <ul> <li>The <code>verbose_name</code> and <code>verbose_name_plural</code> Meta attributes for each model</li> <li>The <code>verbose_name</code> and (if defined) <code>help_text</code> for each model field</li> <li>The <code>label</code> for each form field</li> <li>Headers for <code>fieldsets</code> on each form class</li> <li>The <code>verbose_name</code> for each table column</li> <li>All human-readable strings within templates must be wrapped with <code>{% trans %}</code> or <code>{% blocktrans %}</code></li> </ul> <p>The rest of this document elaborates on each of the items above.</p>"
    },
    {
      "location": "development/internationalization/#general-guidance",
      "title": "General Guidance",
      "text": "<ul> <li> <p>Wrap human-readable strings with Django's <code>gettext()</code> or <code>gettext_lazy()</code> utility functions to enable automatic translation. Generally, <code>gettext_lazy()</code> is preferred (and sometimes required) to defer translation until the string is displayed.</p> </li> <li> <p>By convention, the preferred translation function is typically imported as an underscore (<code>_</code>) to minimize boilerplate code. Thus, you will often see translation as e.g. <code>_(\"Some text\")</code>. It is still an option to import and use alternative translation functions (e.g. <code>pgettext()</code> and <code>ngettext()</code>) normally as needed.</p> </li> <li> <p>Avoid passing markup and other non-natural language where possible. Everything wrapped by a translation function gets exported to a messages file for translation by a human.</p> </li> <li> <p>Where the intended meaning of the translated string may not be obvious, use <code>pgettext()</code> or <code>pgettext_lazy()</code> to include assisting context for the translator. For example:</p> <pre><code># Context, string\npgettext(\"month name\", \"May\")\n</code></pre> </li> <li> <p>Format strings do not support translation. Avoid \"f\" strings for messages that must support translation. Instead, use <code>format()</code> to accomplish variable replacement:</p> <pre><code># Translation will not work\nf\"There are {count} objects\"\n\n# Do this instead\n\"There are {count} objects\".format(count=count)\n</code></pre> </li> </ul>"
    },
    {
      "location": "development/internationalization/#models",
      "title": "Models",
      "text": "<ol> <li>Import <code>gettext_lazy</code> as <code>_</code>.</li> <li>Ensure both <code>verbose_name</code> and <code>verbose_name_plural</code> are defined under the model's <code>Meta</code> class and wrapped with the <code>gettext_lazy()</code> shortcut.</li> <li>Ensure each model field specifies a <code>verbose_name</code> wrapped with <code>gettext_lazy()</code>.</li> <li>Ensure any <code>help_text</code> attributes on model fields are also wrapped with <code>gettext_lazy()</code>.</li> </ol> <pre><code>from django.utils.translation import gettext_lazy as _\n\nclass Circuit(PrimaryModel):\n    commit_rate = models.PositiveIntegerField(\n        ...\n        verbose_name=_('commit rate (Kbps)'),\n        help_text=_(\"Committed rate\")\n    )\n\n    class Meta:\n        verbose_name = _('circuit')\n        verbose_name_plural = _('circuits')\n</code></pre>"
    },
    {
      "location": "development/internationalization/#forms",
      "title": "Forms",
      "text": "<ol> <li>Import <code>gettext_lazy</code> as <code>_</code>.</li> <li>All form fields must specify a <code>label</code> wrapped with <code>gettext_lazy()</code>.</li> <li>The name of each FieldSet on a form must be wrapped with <code>gettext_lazy()</code>.</li> </ol> <pre><code>from django.utils.translation import gettext_lazy as _\nfrom utilities.forms.rendering import FieldSet\n\nclass CircuitBulkEditForm(NetBoxModelBulkEditForm):\n    description = forms.CharField(\n        label=_('Description'),\n        ...\n    )\n\n    fieldsets = (\n        FieldSet('provider', 'type', 'status', 'description', name=_('Circuit')),\n    )\n</code></pre>"
    },
    {
      "location": "development/internationalization/#tables",
      "title": "Tables",
      "text": "<ol> <li>Import <code>gettext_lazy</code> as <code>_</code>.</li> <li>All table columns must specify a <code>verbose_name</code> wrapped with <code>gettext_lazy()</code>.</li> </ol> <pre><code>from django.utils.translation import gettext_lazy as _\n\nclass CircuitTable(TenancyColumnsMixin, ContactsColumnMixin, NetBoxTable):\n    provider = tables.Column(\n        verbose_name=_('Provider'),\n        ...\n    )\n</code></pre>"
    },
    {
      "location": "development/internationalization/#templates",
      "title": "Templates",
      "text": "<ol> <li>Ensure translation support is enabled by including <code>{% load i18n %}</code> at the top of the template.</li> <li>Use the <code>{% trans %}</code> tag (short for \"translate\") to wrap short strings.</li> <li>Longer strings may be enclosed between <code>{% blocktrans %}</code> and <code>{% endblocktrans %}</code> tags to improve readability and to enable variable replacement. (Remember to include the <code>trimmed</code> argument to trim whitespace between the tags.)</li> <li>Avoid passing HTML within translated strings where possible, as this can complicate the work needed of human translators to develop message maps.</li> </ol> <pre><code>{% load i18n %}\n\n{# A short string #}\n&lt;h5 class=\"card-header\"&gt;{% trans \"Circuit List\" %}&lt;/h5&gt;\n\n{# A longer string with a context variable #}\n{% blocktrans trimmed with count=object.circuits.count %}\n  There are {count} circuits. Would you like to continue?\n{% endblocktrans %}\n</code></pre> <p>Warning</p> <p>The <code>{% blocktrans %}</code> tag supports only limited variable replacement, comparable to the <code>format()</code> method on Python strings. It does not permit access to object attributes or the use of other template tags or filters inside it. Ensure that any necessary context is passed as simple variables.</p> <p>Info</p> <p>The <code>{% trans %}</code> and <code>{% blocktrans %}</code> support the inclusion of contextual hints for translators using the <code>context</code> argument:</p> <pre><code>{% trans \"May\" context \"month name\" %}\n</code></pre>"
    },
    { "location": "development/models/", "title": "NetBox Models", "text": "" },
    {
      "location": "development/models/#model-types",
      "title": "Model Types",
      "text": "<p>A NetBox model represents a discrete object type such as a device or IP address. Per Django convention, each model is defined as a Python class and has its own table in the PostgreSQL database. All NetBox data models can be categorized by type.</p> <p>The Django content types framework is used to map Django models to database tables. A ContentType instance references a model by its <code>app_label</code> and <code>name</code>: For example, the Site model within the DCIM app is referred to as <code>dcim.site</code>. The content type combined with an object's primary key form a globally unique identifier for the object (e.g. <code>dcim.site:123</code>).</p>"
    },
    {
      "location": "development/models/#features-matrix",
      "title": "Features Matrix",
      "text": "<p>Depending on its classification, each NetBox model may support various features which enhance its operation. Each feature is enabled by inheriting from its designated mixin class, and some features also make use of the application registry.</p> Feature Feature Mixin Registry Key Description Change logging <code>ChangeLoggingMixin</code> - Changes to these objects are automatically recorded in the change log Cloning <code>CloningMixin</code> - Provides the <code>clone()</code> method to prepare a copy Custom fields <code>CustomFieldsMixin</code> <code>custom_fields</code> These models support the addition of user-defined fields Custom links <code>CustomLinksMixin</code> <code>custom_links</code> These models support the assignment of custom links Custom validation <code>CustomValidationMixin</code> - Supports the enforcement of custom validation rules Export templates <code>ExportTemplatesMixin</code> <code>export_templates</code> Users can create custom export templates for these models Job results <code>JobsMixin</code> <code>jobs</code> Background jobs can be scheduled for these models Journaling <code>JournalingMixin</code> <code>journaling</code> These models support persistent historical commentary Synchronized data <code>SyncedDataMixin</code> <code>synced_data</code> Certain model data can be automatically synchronized from a remote data source Tagging <code>TagsMixin</code> <code>tags</code> The models can be tagged with user-defined tags Event rules <code>EventRulesMixin</code> <code>event_rules</code> Event rules can send webhooks or run custom scripts automatically in response to events"
    },
    {
      "location": "development/models/#models-index",
      "title": "Models Index",
      "text": ""
    },
    {
      "location": "development/models/#primary-models",
      "title": "Primary Models",
      "text": "<p>These are considered the \"core\" application models which are used to model network infrastructure.</p> <ul> <li>circuits.Circuit</li> <li>circuits.Provider</li> <li>circuits.ProviderAccount</li> <li>circuits.ProviderNetwork</li> <li>core.DataFile</li> <li>core.DataSource</li> <li>core.Job</li> <li>dcim.Cable</li> <li>dcim.Device</li> <li>dcim.DeviceType</li> <li>dcim.Module</li> <li>dcim.ModuleType</li> <li>dcim.PowerFeed</li> <li>dcim.PowerPanel</li> <li>dcim.Rack</li> <li>dcim.RackReservation</li> <li>dcim.RackType</li> <li>dcim.Site</li> <li>dcim.VirtualChassis</li> <li>dcim.VirtualDeviceContext</li> <li>ipam.Aggregate</li> <li>ipam.ASN</li> <li>ipam.FHRPGroup</li> <li>ipam.FHRPGroupAssignment</li> <li>ipam.IPAddress</li> <li>ipam.IPRange</li> <li>ipam.Prefix</li> <li>ipam.RouteTarget</li> <li>ipam.Service</li> <li>ipam.ServiceTemplate</li> <li>ipam.VLAN</li> <li>ipam.VRF</li> <li>tenancy.Contact</li> <li>tenancy.Tenant</li> <li>virtualization.Cluster</li> <li>virtualization.VirtualMachine</li> <li>vpn.IKEPolicy</li> <li>vpn.IKEProposal</li> <li>vpn.IPSecPolicy</li> <li>vpn.IPSecProfile</li> <li>vpn.IPSecProposal</li> <li>vpn.L2VPN</li> <li>vpn.Tunnel</li> <li>wireless.WirelessLAN</li> <li>wireless.WirelessLink</li> </ul>"
    },
    {
      "location": "development/models/#organizational-models",
      "title": "Organizational Models",
      "text": "<p>Organization models are used to organize and classify primary models.</p> <ul> <li>circuits.CircuitGroup</li> <li>circuits.CircuitType</li> <li>dcim.DeviceRole</li> <li>dcim.Manufacturer</li> <li>dcim.Platform</li> <li>dcim.RackRole</li> <li>ipam.ASNRange</li> <li>ipam.RIR</li> <li>ipam.Role</li> <li>ipam.VLANGroup</li> <li>tenancy.ContactRole</li> <li>virtualization.ClusterGroup</li> <li>virtualization.ClusterType</li> <li>vpn.TunnelGroup</li> </ul>"
    },
    {
      "location": "development/models/#nested-group-models",
      "title": "Nested Group Models",
      "text": "<p>Nested group models behave like organizational model, but self-nest within a recursive hierarchy. For example, the Region model can be used to represent a hierarchy of countries, states, and cities.</p> <ul> <li>dcim.Location (formerly RackGroup)</li> <li>dcim.Region</li> <li>dcim.SiteGroup</li> <li>tenancy.ContactGroup</li> <li>tenancy.TenantGroup</li> <li>wireless.WirelessLANGroup</li> </ul>"
    },
    {
      "location": "development/models/#component-models",
      "title": "Component Models",
      "text": "<p>Component models represent individual physical or virtual components belonging to a device or virtual machine.</p> <ul> <li>dcim.ConsolePort</li> <li>dcim.ConsoleServerPort</li> <li>dcim.DeviceBay</li> <li>dcim.FrontPort</li> <li>dcim.Interface</li> <li>dcim.InventoryItem</li> <li>dcim.ModuleBay</li> <li>dcim.PowerOutlet</li> <li>dcim.PowerPort</li> <li>dcim.RearPort</li> <li>virtualization.VirtualDisk</li> <li>virtualization.VMInterface</li> </ul>"
    },
    {
      "location": "development/models/#component-template-models",
      "title": "Component Template Models",
      "text": "<p>These function as templates to effect the replication of device and virtual machine components. Component template models support a limited feature set, including change logging, custom validation, and event rules.</p> <ul> <li>dcim.ConsolePortTemplate</li> <li>dcim.ConsoleServerPortTemplate</li> <li>dcim.DeviceBayTemplate</li> <li>dcim.FrontPortTemplate</li> <li>dcim.InterfaceTemplate</li> <li>dcim.InventoryItemTemplate</li> <li>dcim.ModuleBayTemplate</li> <li>dcim.PowerOutletTemplate</li> <li>dcim.PowerPortTemplate</li> <li>dcim.RearPortTemplate</li> </ul>"
    },
    {
      "location": "development/models/#connection-models",
      "title": "Connection Models",
      "text": "<p>Connection models are used to model the connections, or connection endpoints between models.</p> <ul> <li>circuits.CircuitTermination</li> <li>vpn.TunnelTermination</li> </ul>"
    },
    {
      "location": "development/release-checklist/",
      "title": "Release Checklist",
      "text": "<p>This documentation describes the process of packaging and publishing a new NetBox release. There are three types of release:</p> <ul> <li>Major release (e.g. v3.7.8 to v4.0.0)</li> <li>Minor release (e.g. v4.0.10 to v4.1.0)</li> <li>Patch release (e.g. v4.1.0 to v4.1.1)</li> </ul> <p>While major releases generally introduce some very substantial change to the application, they are typically treated the same as minor version increments for the purpose of release packaging.</p> <p>For patch releases (e.g. upgrading from v4.2.2 to v4.2.3), begin at the patch releases heading below. For minor or major releases, complete the entire checklist.</p>"
    },
    {
      "location": "development/release-checklist/#minor-version-releases",
      "title": "Minor Version Releases",
      "text": ""
    },
    {
      "location": "development/release-checklist/#address-constrained-dependencies",
      "title": "Address Constrained Dependencies",
      "text": "<p>Sometimes it becomes necessary to constrain dependencies to a particular version, e.g. to work around a bug in a newer release or to avoid a breaking change that we have yet to accommodate. (Another common example is to limit the upstream Django release.) For example:</p> <pre><code># https://github.com/encode/django-rest-framework/issues/6053\ndjangorestframework==3.8.1\n</code></pre> <p>These version constraints are added to <code>base_requirements.txt</code> to ensure that newer packages are not installed when updating the pinned dependencies in <code>requirements.txt</code> (see the Update Requirements section below). Before each new minor version of NetBox is released, all such constraints on dependent packages should be addressed if feasible. This guards against the collection of stale constraints over time.</p>"
    },
    {
      "location": "development/release-checklist/#close-the-release-milestone",
      "title": "Close the Release Milestone",
      "text": "<p>Close the release milestone on GitHub after ensuring there are no remaining open issues associated with it.</p>"
    },
    {
      "location": "development/release-checklist/#update-the-release-notes",
      "title": "Update the Release Notes",
      "text": "<p>Check that a link to the release notes for the new version is present in the navigation menu (defined in <code>mkdocs.yml</code>), and that a summary of all major new features has been added to <code>docs/index.md</code>.</p>"
    },
    {
      "location": "development/release-checklist/#manually-perform-a-new-install",
      "title": "Manually Perform a New Install",
      "text": "<p>Start the documentation server and navigate to the current version of the installation docs:</p> <pre><code>mkdocs serve\n</code></pre> <p>Follow these instructions to perform a new installation of NetBox in a temporary environment. This process must not be automated: The goal of this step is to catch any errors or omissions in the documentation, and ensure that it is kept up-to-date for each release. Make any necessary changes to the documentation before proceeding with the release.</p>"
    },
    {
      "location": "development/release-checklist/#test-upgrade-paths",
      "title": "Test Upgrade Paths",
      "text": "<p>Upgrading from a previous version typically involves database migrations, which must work without errors. Supported upgrade paths include from one minor version to another within the same major version (i.e. 4.0 to 4.1), as well as from the latest patch version of the previous minor version (i.e. 3.7 to 4.0 or to 4.1). Prior to release, test all these supported paths by loading demo data from the source version and performing a <code>./manage.py migrate</code>.</p>"
    },
    {
      "location": "development/release-checklist/#merge-the-feature-branch",
      "title": "Merge the <code>feature</code> Branch",
      "text": "<p>Submit a pull request to merge the <code>feature</code> branch into the <code>main</code> branch in preparation for its release. Once it has been merged, continue with the section for patch releases below.</p>"
    },
    {
      "location": "development/release-checklist/#rebuild-demo-data-after-release",
      "title": "Rebuild Demo Data (After Release)",
      "text": "<p>After the release of a new minor version, generate a new demo data snapshot compatible with the new release. See the <code>netbox-demo-data</code> repository for instructions.</p>"
    },
    {
      "location": "development/release-checklist/#patch-releases",
      "title": "Patch Releases",
      "text": ""
    },
    {
      "location": "development/release-checklist/#create-a-release-branch",
      "title": "Create a Release Branch",
      "text": "<p>Begin by creating a new branch (based off of <code>main</code>) to effect the release. This will comprise the changes listed below.</p> <pre><code>git checkout main\ngit checkout -B release-vX.Y.Z\n</code></pre>"
    },
    {
      "location": "development/release-checklist/#notify-netbox-docker-project-of-any-relevant-changes",
      "title": "Notify netbox-docker Project of Any Relevant Changes",
      "text": "<p>Notify the <code>netbox-docker</code> maintainers (in #netbox-docker) of any changes that may be relevant to their build process, including:</p> <ul> <li>Significant changes to <code>upgrade.sh</code></li> <li>Increases in minimum versions for service dependencies (PostgreSQL, Redis, etc.)</li> <li>Any changes to the reference installation</li> </ul>"
    },
    {
      "location": "development/release-checklist/#update-python-dependencies",
      "title": "Update Python Dependencies",
      "text": "<p>Before each release, update each of NetBox's Python dependencies to its most recent stable version. These are defined in <code>requirements.txt</code>, which is updated from <code>base_requirements.txt</code> using <code>pip</code>. To do this:</p> <ol> <li>Upgrade the installed version of all required packages in your environment (<code>pip install -U -r base_requirements.txt</code>).</li> <li>Run all tests and check that the UI and API function as expected.</li> <li>Review each requirement's release notes for any breaking or otherwise noteworthy changes.</li> <li>Update the package versions in <code>requirements.txt</code> as appropriate.</li> </ol> <p>In cases where upgrading a dependency to its most recent release is breaking, it should be constrained to its current minor version in <code>base_requirements.txt</code> with an explanatory comment and revisited for the next major NetBox release (see the Address Constrained Dependencies section above).</p>"
    },
    {
      "location": "development/release-checklist/#update-ui-dependencies",
      "title": "Update UI Dependencies",
      "text": "<p>Check whether any UI dependencies (JavaScript packages, fonts, etc.) need to be updated by running <code>yarn outdated</code> from within the <code>project-static/</code> directory. Upgrade these dependencies as necessary, then run <code>yarn bundle</code> to generate the necessary files for distribution:</p> <pre><code>$ yarn bundle\nyarn run v1.22.19\n$ node bundle.js\n\u2705 Bundled source file 'styles/external.scss' to 'netbox-external.css'\n\u2705 Bundled source file 'styles/netbox.scss' to 'netbox.css'\n\u2705 Bundled source file 'styles/svg/rack_elevation.scss' to 'rack_elevation.css'\n\u2705 Bundled source file 'styles/svg/cable_trace.scss' to 'cable_trace.css'\n\u2705 Bundled source file 'index.ts' to 'netbox.js'\n\u2705 Copied graphiql files\nDone in 1.00s.\n</code></pre>"
    },
    {
      "location": "development/release-checklist/#rebuild-the-device-type-definition-schema",
      "title": "Rebuild the Device Type Definition Schema",
      "text": "<p>Run the following command to update the device type definition validation schema:</p> <pre><code>./manage.py buildschema --write\n</code></pre> <p>This will automatically update the schema file at <code>contrib/generated_schema.json</code>.</p>"
    },
    {
      "location": "development/release-checklist/#update-compile-translations",
      "title": "Update &amp; Compile Translations",
      "text": "<p>Updated language translations should be pulled from Transifex and re-compiled for each new release. First, retrieve any updated translation files using the Transifex CLI client:</p> <pre><code>tx pull\n</code></pre> <p>Then, compile these portable (<code>.po</code>) files for use in the application:</p> <pre><code>./manage.py compilemessages\n</code></pre> <p>Tip</p> <p>Consult the translation documentation for more detail on updating translated strings if you've not set up the Transifex client already.</p>"
    },
    {
      "location": "development/release-checklist/#update-version-and-changelog",
      "title": "Update Version and Changelog",
      "text": "<ul> <li>Update the version number and date in <code>netbox/release.yaml</code>. Add or remove the designation (e.g. <code>beta1</code>) if applicable.</li> <li>Update the example version numbers in the feature request and bug report templates under <code>.github/ISSUE_TEMPLATES/</code>.</li> <li>Add a section for this release at the top of the changelog page for the minor version (e.g. <code>docs/release-notes/version-4.2.md</code>) listing all relevant changes made in this release.</li> </ul> <p>Tip</p> <p>Put yourself in the shoes of the user when recording change notes. Focus on the effect that each change has for the end user, rather than the specific bits of code that were modified in a PR. Ensure that each message conveys meaning absent context of the initial feature request or bug report. Remember to include key words or phrases (such as exception names) that can be easily searched.</p>"
    },
    {
      "location": "development/release-checklist/#submit-a-pull-request",
      "title": "Submit a Pull Request",
      "text": "<p>Commit the above changes and submit a pull request titled \"Release vX.Y.Z\" to merge the current release branch (e.g. <code>release-vX.Y.Z</code>) into <code>main</code>. Copy the documented release notes into the pull request's body.</p> <p>Once CI has completed and a colleague has reviewed the PR, merge it. This effects a new release in the <code>main</code> branch.</p> <p>Warning</p> <p>To ensure a streamlined review process, the pull request for a release must be limited to the changes outlined in this document. A release PR must never include functional changes to the application: Any unrelated \"cleanup\" needs to be captured in a separate PR prior to the release being shipped.</p>"
    },
    {
      "location": "development/release-checklist/#create-a-new-release",
      "title": "Create a New Release",
      "text": "<p>Create a new release on GitHub with the following parameters.</p> <ul> <li>Tag: Current version (e.g. <code>v4.2.1</code>)</li> <li>Target: <code>main</code></li> <li>Title: Version and date (e.g. <code>v4.2.1 - 2025-01-17</code>)</li> <li>Description: Copy from the pull request body, then promote the <code>###</code> headers to <code>##</code> ones</li> </ul> <p>Once created, the release will become available for users to install.</p>"
    },
    {
      "location": "development/release-checklist/#update-the-public-documentation",
      "title": "Update the Public Documentation",
      "text": "<p>After a release has been published, the public NetBox documentation needs to be updated. This is accomplished by running two actions on the netboxlabs-docs repository.</p> <p>First, run the <code>build-site</code> action, by navigating to Actions &gt; build-site &gt; Run workflow. This process compiles the documentation along with an overlay for integration with the documentation portal at https://netboxlabs.com/docs. The job should take about two minutes.</p> <p>Once the documentation files have been compiled, they must be published by running the <code>deploy-kinsta</code> action. Select the desired deployment environment (staging or production) and specify <code>latest</code> as the deploy tag.</p> <p>Clear the CDN cache from the Kinsta portal. Navigate to Sites / NetBox Labs / Live, select Cache in the left-nav, click the Clear Cache button, and confirm the clear operation.</p> <p>Finally, verify that the documentation at https://netboxlabs.com/docs/netbox/en/stable/ has been updated.</p>"
    },
    {
      "location": "development/search/",
      "title": "Search",
      "text": "<p>NetBox v3.4 introduced a new global search mechanism, which employs the <code>extras.CachedValue</code> model to store discrete field values from many models in a single table.</p>"
    },
    {
      "location": "development/search/#searchindex",
      "title": "SearchIndex",
      "text": "<p>To enable search support for a model, declare and register a subclass of <code>netbox.search.SearchIndex</code> for it. Typically, this will be done within an app's <code>search.py</code> module.</p> <pre><code>from netbox.search import SearchIndex, register_search\n\n@register_search\nclass MyModelIndex(SearchIndex):\n    model = MyModel\n    fields = (\n        ('name', 100),\n        ('description', 500),\n        ('comments', 5000),\n    )\n    display_attrs = ('site', 'device', 'status', 'description')\n</code></pre> <p>A SearchIndex subclass defines both its model and a list of two-tuples specifying which model fields to be indexed and the weight (precedence) associated with each. Guidance on weight assignment for fields is provided below.</p>"
    },
    {
      "location": "development/search/#field-weight-guidance",
      "title": "Field Weight Guidance",
      "text": "Weight Field Role Examples 50 Unique serialized attribute Device.asset_tag 60 Unique serialized attribute (per related object) Device.serial 100 Primary human identifier Device.name, Circuit.cid, Cable.label 110 Slug Site.slug 200 Secondary identifier ProviderAccount.account, DeviceType.part_number 300 Highly unique descriptive attribute CircuitTermination.xconnect_id, IPAddress.dns_name 500 Description Site.description 1000 Custom field default - 2000 Other discrete attribute CircuitTermination.port_speed 5000 Comment field Site.comments"
    },
    {
      "location": "development/signals/",
      "title": "Signals",
      "text": "<p>In addition to Django's built-in signals, NetBox defines some of its own, listed below.</p>"
    },
    {
      "location": "development/signals/#post_clean",
      "title": "post_clean",
      "text": "<p>This signal is sent by models which inherit from <code>CustomValidationMixin</code> at the end of their <code>clean()</code> method.</p>"
    },
    {
      "location": "development/signals/#receivers",
      "title": "Receivers",
      "text": "<ul> <li><code>extras.signals.run_custom_validators()</code></li> </ul>"
    },
    {
      "location": "development/signals/#corejob_start",
      "title": "core.job_start",
      "text": "<p>This signal is sent whenever a background job is started.</p>"
    },
    {
      "location": "development/signals/#receivers_1",
      "title": "Receivers",
      "text": "<ul> <li><code>extras.signals.process_job_start_event_rules()</code></li> </ul>"
    },
    {
      "location": "development/signals/#corejob_end",
      "title": "core.job_end",
      "text": "<p>This signal is sent whenever a background job is terminated.</p>"
    },
    {
      "location": "development/signals/#receivers_2",
      "title": "Receivers",
      "text": "<ul> <li><code>extras.signals.process_job_end_event_rules()</code></li> </ul>"
    },
    {
      "location": "development/signals/#corepre_sync",
      "title": "core.pre_sync",
      "text": "<p>This signal is sent when the DataSource model's <code>sync()</code> method is called.</p>"
    },
    {
      "location": "development/signals/#corepost_sync",
      "title": "core.post_sync",
      "text": "<p>This signal is sent when a DataSource finishes synchronizing.</p>"
    },
    {
      "location": "development/style-guide/",
      "title": "Style Guide",
      "text": "<p>NetBox generally follows the Django style guide, which is itself based on PEP 8. ruff is used for linting (with certain exceptions).</p>"
    },
    {
      "location": "development/style-guide/#code",
      "title": "Code",
      "text": ""
    },
    {
      "location": "development/style-guide/#general-guidance",
      "title": "General Guidance",
      "text": "<ul> <li> <p>When in doubt, remain consistent: It is better to be consistently incorrect than inconsistently correct. If you notice in the course of unrelated work a pattern that should be corrected, continue to follow the pattern for now and submit a separate bug report so that the entire code base can be evaluated at a later point.</p> </li> <li> <p>Prioritize readability over concision. Python is a very flexible language that typically offers several multiple options for expressing a given piece of logic, but some may be more friendly to the reader than others. (List comprehensions are particularly vulnerable to over-optimization.) Always remain considerate of the future reader who may need to interpret your code without the benefit of the context within which you are writing it.</p> </li> <li> <p>Include a newline at the end of every file.</p> </li> <li> <p>No easter eggs. While they can be fun, NetBox must be considered as a business-critical tool. The potential, however minor, for introducing a bug caused by unnecessary code is best avoided entirely.</p> </li> <li> <p>Constants (variables which do not change) should be declared in <code>constants.py</code> within each app. Wildcard imports from the file are acceptable.</p> </li> <li> <p>Every model must have a docstring. Every custom method should include an explanation of its function.</p> </li> <li> <p>Nested API serializers generate minimal representations of an object. These are stored separately from the primary serializers to avoid circular dependencies. Always import nested serializers from other apps directly. For example, from within the DCIM app you would write <code>from ipam.api.nested_serializers import NestedIPAddressSerializer</code>.</p> </li> </ul>"
    },
    {
      "location": "development/style-guide/#linting",
      "title": "Linting",
      "text": "<p>The ruff linter is used to enforce code style, and is run automatically by pre-commit. To invoke <code>ruff</code> manually, run:</p> <pre><code>ruff check netbox/\n</code></pre>"
    },
    {
      "location": "development/style-guide/#linter-exceptions",
      "title": "Linter Exceptions",
      "text": "<p>The following rules are ignored when linting.</p>"
    },
    {
      "location": "development/style-guide/#e501-line-too-long",
      "title": "E501: Line too long",
      "text": "<p>NetBox does not enforce a hard restriction on line length, although a maximum length of 120 characters is strongly encouraged for Python code where possible. The maximum length does not apply to HTML templates or to automatically generated code (e.g. database migrations).</p>"
    },
    {
      "location": "development/style-guide/#f403-undefined-local-with-import-star",
      "title": "F403: Undefined local with import star",
      "text": "<p>Wildcard imports (for example, <code>from .constants import *</code>) are acceptable under any of the following conditions:</p> <ul> <li>The library being import contains only constant declarations (e.g. <code>constants.py</code>)</li> <li>The library being imported explicitly defines <code>__all__</code></li> </ul>"
    },
    {
      "location": "development/style-guide/#f405-undefined-local-with-import-star-usage",
      "title": "F405: Undefined local with import star usage",
      "text": "<p>The justification for ignoring this rule is the same as F403 above.</p>"
    },
    {
      "location": "development/style-guide/#introducing-new-dependencies",
      "title": "Introducing New Dependencies",
      "text": "<p>The introduction of a new dependency is best avoided unless it is absolutely necessary. For small features, it's generally preferable to replicate functionality within the NetBox code base rather than to introduce reliance on an external project. This reduces both the burden of tracking new releases and our exposure to outside bugs and supply chain attacks.</p> <p>If there's a strong case for introducing a new dependency, it must meet the following criteria:</p> <ul> <li>Its complete source code must be published and freely accessible without registration.</li> <li>Its license must be conducive to inclusion in an open source project.</li> <li>It must be actively maintained, with no longer than one year between releases.</li> <li>It must be available via the Python Package Index (PyPI).</li> </ul> <p>When adding a new dependency, a short description of the package and the URL of its code repository must be added to <code>base_requirements.txt</code>. Additionally, a line specifying the package name pinned to the current stable release must be added to <code>requirements.txt</code>. This ensures that NetBox will install only the known-good release.</p>"
    },
    {
      "location": "development/style-guide/#written-works",
      "title": "Written Works",
      "text": ""
    },
    {
      "location": "development/style-guide/#general-guidance_1",
      "title": "General Guidance",
      "text": "<ul> <li> <p>Written material must always meet a reasonable professional standard, with proper grammar, spelling, and punctuation.</p> </li> <li> <p>Use two line breaks between paragraphs.</p> </li> <li> <p>Use only a single space between sentences.</p> </li> <li> <p>All documentation is to be written in Markdown, with modest amounts of HTML permitted where needed to overcome technical limitations.</p> </li> </ul>"
    },
    {
      "location": "development/style-guide/#branding",
      "title": "Branding",
      "text": "<ul> <li> <p>When referring to NetBox in writing, use the proper form \"NetBox,\" with the letters N and B capitalized. The lowercase form \"netbox\" should be used in code, filenames, etc. but never \"Netbox\" or any other deviation.</p> </li> <li> <p>There are SVG forms of the NetBox logo for both light mode and dark mode available. It is preferred to use the SVG logo for all purposes as it scales to arbitrary sizes without loss of resolution. If a raster image is required, the SVG logo should be converted to a PNG image of the desired size.</p> </li> </ul>"
    },
    {
      "location": "development/translations/",
      "title": "Translations",
      "text": "<p>NetBox coordinates all translation work using the Transifex platform. Signing up for a Transifex account is free.</p> <p>All language translations in NetBox are generated from the source file found at <code>netbox/translations/en/LC_MESSAGES/django.po</code>. This file contains the original English strings with empty mappings, and is generated as part of NetBox's release process. Transifex updates source strings from this file on a recurring basis, so new translation strings will appear in the platform automatically as it is updated in the code base.</p> <p>Reviewers log into Transifex and navigate to their designated language(s) to translate strings. The initial translation for most strings will be machine-generated via the AWS Translate service. Human reviewers are responsible for reviewing these translations and making corrections where necessary.</p>"
    },
    {
      "location": "development/translations/#updating-translation-sources",
      "title": "Updating Translation Sources",
      "text": "<p>To update the English <code>.po</code> file from which all translations are derived, use the <code>makemessages</code> management command (ignoring the <code>project-static/</code> directory):</p> <pre><code>./manage.py makemessages -l en -i \"project-static/*\"\n</code></pre> <p>Then, commit the change and push to the <code>main</code> branch on GitHub. Any new strings will appear for translation on Transifex automatically.</p> <p>Note</p> <p>It is typically not necessary to update source strings manually, as this is done nightly by a GitHub action.</p>"
    },
    {
      "location": "development/translations/#updating-translated-strings",
      "title": "Updating Translated Strings",
      "text": "<p>Typically, translated strings need to be updated only as part of the NetBox release process.</p> <p>Check the Transifex dashboard for languages that are not marked ready for use, being sure to click Show all languages if it appears at the bottom of the list. Use machine translation to round out any not-ready languages. It's not necessary to review the machine translation immediately as the translation teams will handle that aspect; the goal at this stage is to get translations included in the Transifex pull request.</p> <p>To download translated strings automatically, you'll need to:</p> <ol> <li>Install the Transifex CLI client</li> <li>Generate a Transifex API token</li> </ol> <p>Once you have the client set up, run the following command from the project root (e.g. <code>/opt/netbox/</code>):</p> <pre><code>TX_TOKEN=$TOKEN tx pull\n</code></pre> <p>This will download all portable (<code>.po</code>) translation files from Transifex, updating them locally as needed.</p> <p>Once retrieved, the updated strings need to be compiled into new <code>.mo</code> files so they can be used by the application. Run Django's <code>compilemessages</code> management command to compile them:</p> <pre><code>./manage.py compilemessages\n</code></pre> <p>Once any new <code>.mo</code> files have been generated, they need to be committed and pushed back up to GitHub. (Again, this is typically done as part of publishing a new NetBox release.)</p> <p>Tip</p> <p>Run <code>git status</code> to check that both <code>*.mo</code> &amp; <code>*.po</code> files have been updated as expected.</p>"
    },
    {
      "location": "development/translations/#proposing-new-languages",
      "title": "Proposing New Languages",
      "text": "<p>If you'd like to add support for a new language to NetBox, the first step is to submit a GitHub issue to capture the proposal. While we'd like to add as many languages as possible, we do need to limit the rate at which new languages are added. New languages will be selected according to community interest and the number of volunteers who sign up as translators.</p> <p>Once a proposed language has been approved, a NetBox maintainer will:</p> <ul> <li>Add it to the Transifex platform</li> <li>Designate one or more reviewers</li> <li>Create the initial machine-generated translations for review</li> <li>Add it to the list of supported languages</li> </ul>"
    },
    {
      "location": "development/user-preferences/",
      "title": "User Preferences",
      "text": "<p>The <code>users.UserConfig</code> model holds individual preferences for each user in the form of JSON data. This page serves as a manifest of all recognized user preferences in NetBox.</p>"
    },
    {
      "location": "development/user-preferences/#available-preferences",
      "title": "Available Preferences",
      "text": "Name Description data_format Preferred format when rendering raw data (JSON or YAML) pagination.per_page The number of items to display per page of a paginated table pagination.placement Where to display the paginator controls relative to the table tables.${table}.columns The ordered list of columns to display when viewing the table tables.${table}.ordering A list of column names by which the table should be ordered"
    },
    {
      "location": "development/web-ui/",
      "title": "Web UI Development",
      "text": ""
    },
    {
      "location": "development/web-ui/#code-structure",
      "title": "Code Structure",
      "text": "<p>Most static resources for the NetBox UI are housed within the <code>netbox/project-static/</code> directory.</p> Path Description <code>dist/</code> Destination path for installed dependencies <code>docs/</code> Local build path for documentation <code>img/</code> Image files <code>js/</code> Miscellaneous JavaScript resources served directly <code>src/</code> TypeScript resources (to be compiled into JS) <code>styles/</code> Sass resources (to be compiled into CSS)"
    },
    {
      "location": "development/web-ui/#front-end-technologies",
      "title": "Front End Technologies",
      "text": "<p>Front end scripting is written in TypeScript, which is a strongly-typed extension to JavaScript. TypeScript is \"transpiled\" into JavaScript resources which are served to and executed by the client web browser.</p> <p>All UI styling is written in Sass, which is an extension to browser-native Cascading Stylesheets (CSS). Similar to how TypeScript content is transpiled to JavaScript, Sass resources (<code>.scss</code> files) are compiled to CSS.</p>"
    },
    {
      "location": "development/web-ui/#dependencies",
      "title": "Dependencies",
      "text": "<p>The following software is employed by the NetBox user interface.</p> <ul> <li>Bootstrap 5 - A popular CSS &amp; JS framework</li> <li>clipboard.js - A lightweight package for enabling copy-to-clipboard functionality</li> <li>flatpickr - A lightweight date &amp; time selection widget</li> <li>gridstack.js - Enables interactive grid layouts (for the dashboard)</li> <li>HTMX - Enables dynamic web interfaces through the use of HTML element attributes</li> <li>Material Design Icons - An extensive open source collection of graphical icons, delivered as a web font</li> <li>query-string - Assists with parsing URL query strings</li> <li>Tabler - A web application UI toolkit &amp; theme based on Bootstrap 5</li> <li>Tom Select - Provides dynamic selection form fields</li> </ul>"
    },
    {
      "location": "development/web-ui/#guidance",
      "title": "Guidance",
      "text": "<p>NetBox generally follows the following guidelines for front-end code:</p> <ul> <li>Bootstrap utility classes may be used to solve one-off issues or to implement singular components, as long as the class list does not exceed 4-5 classes. If an element needs more than 5 utility classes, a custom SCSS class should be added that contains the required style properties.</li> <li>Custom classes must be commented, explaining the general purpose of the class and where it is used.</li> <li>Reuse SCSS variables whenever possible. CSS values should (almost) never be hard-coded.</li> <li>All TypeScript functions must have, at a minimum, a basic JSDoc description of what the function is for and where it is used. If possible, document all function arguments via <code>@param</code> JSDoc block tags.</li> <li>Expanding on NetBox's dependency policy, new front-end dependencies should be avoided unless absolutely necessary. Every new front-end dependency adds to the CSS/JavaScript file size that must be loaded by the client and this should be minimized as much as possible. If adding a new dependency is unavoidable, use a tool like Bundlephobia to ensure the smallest possible library is used.</li> <li>All UI elements must be usable on all common screen sizes, including mobile devices. Be sure to test newly implemented solutions (JavaScript included) on as many screen sizes and device types as possible.</li> <li>NetBox aligns with Bootstrap's supported Browsers and Devices list.</li> </ul>"
    },
    {
      "location": "development/web-ui/#ui-development",
      "title": "UI Development",
      "text": "<p>To contribute to the NetBox UI, you'll need to review the main Getting Started guide in order to set up your base environment.</p>"
    },
    {
      "location": "development/web-ui/#tools",
      "title": "Tools",
      "text": "<p>Once you have a working NetBox development environment, you'll need to install a few more tools to work with the NetBox UI:</p> <ul> <li>NodeJS (the LTS release should suffice)</li> <li>Yarn (version 1)</li> </ul> <p>After Node and Yarn are installed on your system, you'll need to install all the NetBox UI dependencies:</p> <pre><code>$ cd netbox/project-static\n$ yarn\n</code></pre> <p>Check Your Working Directory</p> <p>You need to be in the <code>netbox/project-static</code> directory to run the below <code>yarn</code> commands.</p>"
    },
    {
      "location": "development/web-ui/#updating-dependencies",
      "title": "Updating Dependencies",
      "text": "<p>Run <code>yarn outdated</code> to identify outdated dependencies.</p> <pre><code>$ yarn outdated\nyarn outdated v1.22.19\ninfo Color legend :\n \"&lt;red&gt;\"    : Major Update backward-incompatible updates\n \"&lt;yellow&gt;\" : Minor Update backward-compatible features\n \"&lt;green&gt;\"  : Patch Update backward-compatible bug fixes\nPackage                          Current Wanted  Latest Workspace Package Type    URL\nbootstrap                        5.3.1   5.3.1   5.3.3  netbox    dependencies    https://getbootstrap.com/\n</code></pre> <p>Run <code>yarn upgrade --latest</code> to automatically upgrade these packages to their most recent versions.</p> <pre><code>$ yarn upgrade bootstrap --latest\nyarn upgrade v1.22.19\n[1/4] Resolving packages...\n[2/4] Fetching packages...\n[3/4] Linking dependencies...\n[4/4] Rebuilding all packages...\nsuccess Saved lockfile.\nsuccess Saved 1 new dependency.\ninfo Direct dependencies\n\u2514\u2500 bootstrap@5.3.3\ninfo All dependencies\n\u2514\u2500 bootstrap@5.3.3\nDone in 0.95s.\n</code></pre> <p><code>package.json</code> will be updated to reflect the new package versions automatically.</p>"
    },
    {
      "location": "development/web-ui/#bundling",
      "title": "Bundling",
      "text": "<p>In order for the TypeScript and Sass (SCSS) source files to be usable by a browser, they must first be transpiled (TypeScript \u2192 JavaScript, Sass \u2192 CSS), bundled, and minified. After making changes to TypeScript or Sass source files, run <code>yarn bundle</code>.</p> <p><code>yarn bundle</code> is a wrapper around the following subcommands, any of which can be run individually:</p> Command Action <code>yarn bundle</code> Bundle TypeScript and Sass (SCSS) source files. <code>yarn bundle:styles</code> Bundle Sass (SCSS) source files only. <code>yarn bundle:scripts</code> Bundle TypeScript source files only. <p>All output files will be written to <code>netbox/project-static/dist</code>, where Django will pick them up when <code>manage.py collectstatic</code> is run.</p> <p>Remember to re-run <code>manage.py collectstatic</code></p> <p>If you're running the development web server \u2014 <code>manage.py runserver</code> \u2014 you'll need to run <code>manage.py collectstatic</code> to see your changes.</p>"
    },
    {
      "location": "development/web-ui/#linting-formatting-type-checking",
      "title": "Linting, Formatting &amp; Type Checking",
      "text": "<p>Before committing any changes to TypeScript files, and periodically throughout the development process, you should run <code>yarn validate</code> to catch formatting, code quality, or type errors.</p> <p>IDE Integrations</p> <p>If you're using an IDE, it is strongly recommended to install ESLint, TypeScript, and Prettier integrations, if available. Most of them will automatically check and/or correct issues in the code as you develop, which can significantly increase your productivity as a contributor.</p> <p><code>yarn validate</code> is a wrapper around the following subcommands, any of which can be run individually:</p> Command Action <code>yarn validate</code> Run all validation. <code>yarn validate:lint</code> Validate TypeScript code via ESLint only. <code>yarn validate:types</code> Validate TypeScript code compilation only. <code>yarn validate:formatting</code> Validate code formatting of JavaScript &amp; Sass/SCSS files. <code>yarn validate:formatting:styles</code> Validate code formatting Sass/SCSS only. <code>yarn validate:formatting:scripts</code> Validate code formatting TypeScript only. <p>You can also run the following commands to automatically fix formatting issues:</p> Command Action <code>yarn format</code> Format TypeScript and Sass (SCSS) source files. <code>yarn format:styles</code> Format Sass (SCSS) source files only. <code>yarn format:scripts</code> Format TypeScript source files only."
    },
    {
      "location": "features/api-integration/",
      "title": "API &amp; Integration",
      "text": "<p>NetBox includes a slew of features which enable integration with other tools and resources powering your network.</p>"
    },
    {
      "location": "features/api-integration/#rest-api",
      "title": "REST API",
      "text": "<p>NetBox's REST API, powered by the Django REST Framework, provides a robust yet accessible interface for creating, modifying, and deleting objects. Employing HTTP for transfer and JSON for data encapsulation, the REST API is easily consumed by clients on any platform and extremely well suited for automation tasks.</p> <pre><code>curl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"site\": {\"name\": \"Branch 12\"}}'\n</code></pre> <p>The REST API employs token-based authentication, which maps API clients to user accounts and their assigned permissions. The API endpoints are fully documented using OpenAPI, and NetBox even includes a convenient browser-based version of the API for exploration. The open source pynetbox and go-netbox API client libraries are also available for Python and Go, respectively.</p> <p>To learn more about this feature, check out the REST API documentation.</p>"
    },
    {
      "location": "features/api-integration/#graphql-api",
      "title": "GraphQL API",
      "text": "<p>NetBox also provides a GraphQL API to complement its REST API. GraphQL enables complex queries for arbitrary objects and fields, enabling the client to retrieve only the specific data it needs from NetBox. This is a special-purpose read-only API intended for efficient queries. Like the REST API, the GraphQL API employs token-based authentication.</p> <p>To learn more about this feature, check out the GraphQL API documentation.</p>"
    },
    {
      "location": "features/api-integration/#webhooks",
      "title": "Webhooks",
      "text": "<p>A webhook is a mechanism for conveying to some external system a change that has taken place in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. To do this, first create a webhook identifying the remote receiver (URL), HTTP method, and any other necessary parameters. Then, define an event rule which is triggered by device changes to transmit the webhook.</p> <p>When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver. Webhooks are an excellent mechanism for building event-based automation processes. To learn more about this feature, check out the webhooks documentation.</p>"
    },
    {
      "location": "features/api-integration/#prometheus-metrics",
      "title": "Prometheus Metrics",
      "text": "<p>NetBox includes a special <code>/metrics</code> view which exposes metrics for a Prometheus scraper, powered by the open source django-prometheus library. To learn more about this feature, check out the Prometheus metrics documentation.</p>"
    },
    {
      "location": "features/authentication-permissions/",
      "title": "Authentication &amp; Permissions",
      "text": ""
    },
    {
      "location": "features/authentication-permissions/#object-based-permissions",
      "title": "Object-Based Permissions",
      "text": "<p>NetBox boasts a very robust permissions system which extends well beyond the model-based permissions of the underlying Django framework. Assigning permissions in NetBox involves several dimensions:</p> <ul> <li>The type(s) of object to which the permission applies</li> <li>The users and/or groups being granted the permissions</li> <li>The action(s) permitted by the permission (e.g. view, add, change, etc.)</li> <li>Any constraints limiting application of the permission to a particular subset of objects</li> </ul> <p>The implementation of constrains is what enables NetBox administrators to assign per-object permissions: Users can be limited to viewing or interacting with arbitrary subsets of objects based on the objects' attributes. For example, you might restrict a particular user to viewing only those prefixes or IP addresses within a particular VRF. Or you might restrict a group to modifying devices within a particular region.</p> <p>Permission constraints are declared in JSON format when creating a permission, and operate very similarly to Django ORM queries. For instance, here's a constraint that matches reserved VLANs with a VLAN ID between 100 and 199:</p> <pre><code>[\n  {\n    \"vid__gte\": 100,\n    \"vid__lt\": 200\n  },\n  {\n    \"status\": \"reserved\"\n  }\n]\n</code></pre> <p>Check out the permissions documentation for more information about permission constraints.</p>"
    },
    {
      "location": "features/authentication-permissions/#ldap-authentication",
      "title": "LDAP Authentication",
      "text": "<p>NetBox includes a built-in authentication backend for authenticating users against a remote LDAP server. The installation documentation provides more detail on this capability.</p>"
    },
    {
      "location": "features/authentication-permissions/#single-sign-on-sso",
      "title": "Single Sign-On (SSO)",
      "text": "<p>NetBox integrates with the open source python-social-auth library to provide myriad options for single sign-on (SSO) authentication. These include:</p> <ul> <li>Cognito</li> <li>GitHub &amp; GitHub Enterprise</li> <li>GitLab</li> <li>Google</li> <li>Hashicorp Vault</li> <li>Keycloak</li> <li>Microsoft Entra ID</li> <li>Microsoft Graph</li> <li>Okta</li> <li>OIDC</li> </ul> <p>...and many others. It's also possible to build your own custom backends as needed using python-social-auth's base OAuth, OpenID, and SAML classes. You can find some examples of configuring SSO in NetBox' authentication documentation.</p>"
    },
    {
      "location": "features/background-jobs/",
      "title": "Background Jobs",
      "text": "<p>NetBox includes the ability to execute certain functions as background tasks. These include:</p> <ul> <li>Report execution</li> <li>Custom script execution</li> <li>Synchronization of remote data sources</li> </ul> <p>Additionally, NetBox plugins can enqueue their own background tasks. This is accomplished using the Job model. Background tasks are executed by the <code>rqworker</code> process(es).</p>"
    },
    {
      "location": "features/background-jobs/#scheduled-jobs",
      "title": "Scheduled Jobs",
      "text": "<p>Background jobs can be configured to run immediately, or at a set time in the future. Scheduled jobs can also be configured to repeat at a set interval.</p>"
    },
    {
      "location": "features/change-logging/",
      "title": "Change Logging",
      "text": "<p>Every time an object in NetBox is created, updated, or deleted, a serialized copy of that object taken both before and after the change is saved to the database, along with metadata including the current time and the user associated with the change. These records form a persistent record of changes both for each individual object as well as NetBox as a whole. The global change log can be viewed by navigating to Other &gt; Change Log.</p> <p>A serialized representation of the instance being modified is included in JSON format. This is similar to how objects are conveyed within the REST API, but does not include any nested representations. For instance, the <code>tenant</code> field of a site will record only the tenant's ID, not a representation of the tenant.</p> <p>When a request is made, a UUID is generated and attached to any change records resulting from that request. For example, editing three objects in bulk will create a separate change record for each  (three in total), and each of those objects will be associated with the same UUID. This makes it easy to identify all the change records resulting from a particular request.</p> <p>Change records are exposed in the API via the read-only endpoint <code>/api/extras/object-changes/</code>. They may also be exported via the web UI in CSV format.</p>"
    },
    {
      "location": "features/change-logging/#correlating-changes-by-request",
      "title": "Correlating Changes by Request",
      "text": "<p>Every request made to NetBox is assigned a random unique ID that can be used to correlate change records. For example, if you change the status of three sites using the UI's bulk edit feature, you will see three new change records (one for each site) all referencing the same request ID. This shows that all three changes were made as part of the same request.</p>"
    },
    {
      "location": "features/circuits/",
      "title": "Circuits",
      "text": "<p>NetBox is ideal for managing your network's transit and peering providers and circuits. It provides all the flexibility needed to model physical circuits in both data center and enterprise environments, and allows for \"connecting\" circuits directly to device interfaces via cables.</p> <pre><code>flowchart TD\n    ASN --&gt; Provider\n    Provider --&gt; ProviderNetwork &amp; ProviderAccount &amp; Circuit\n    ProviderAccount --&gt; Circuit\n    CircuitType --&gt; Circuit\n\nclick ASN \"../../models/circuits/asn/\"\nclick Circuit \"../../models/circuits/circuit/\"\nclick CircuitType \"../../models/circuits/circuittype/\"\nclick Provider \"../../models/circuits/provider/\"\nclick ProviderAccount \"../../models/circuits/provideraccount/\"\nclick ProviderNetwork \"../../models/circuits/providernetwork/\"</code></pre>"
    },
    {
      "location": "features/circuits/#providers",
      "title": "Providers",
      "text": "<p>A provider is any organization which provides Internet or private connectivity. Typically, these are large carriers, however they might also include regional providers or even internal services. Each provider can be assigned account and contact details, and may have one or more AS numbers assigned to it.</p> <p>Sometimes you'll need to model provider networks into which you don't have full visibility; these are typically represented on topology diagrams with cloud icons. NetBox facilitates this through its provider network model: A provider network represents a \"black box\" network to which your circuits can connect. A common example is a provider MPLS network connecting multiple sites.</p>"
    },
    {
      "location": "features/circuits/#circuits_1",
      "title": "Circuits",
      "text": "<p>A circuit is a physical connection between two points, which is installed and maintained by an external provider. For example, an Internet connection delivered as a fiber optic cable would be modeled as a circuit in NetBox.</p> <p>Each circuit is associated with a provider and assigned a circuit ID, which must be unique to that provider. A circuit is also assigned a user-defined type, operational status, and various other operating characteristics. Provider accounts can also be employed to further categorize circuits belonging to a common provider: These may represent different business units or technologies.</p> <p>Each circuit may have up to two terminations (A and Z) defined. Each termination can be associated with a particular site or provider network. In the case of the former, a cable can be connected between the circuit termination and a device component to map its physical connectivity.</p> <p>Physical vs. Virtual Circuits</p> <p>The circuit model in NetBox represents physical connections. Don't confuse these with virtual circuits which may be offered by providers overlaid on physical infrastructure. (For example, a VLAN-tagged subinterface would be a virtual circuit.) A good rule of thumb: If you can't point to it, it's not a physical circuit.</p>"
    },
    {
      "location": "features/configuration-rendering/",
      "title": "Configuration Rendering",
      "text": "<p>One of the critical aspects of operating a network is ensuring that every network node is configured correctly. By leveraging configuration templates and context data, NetBox can render complete configuration files for each device on your network.</p> <pre><code>flowchart TD\n    ConfigContext &amp; ConfigTemplate --&gt; Config{{Rendered configuration}}\n\nclick ConfigContext \"../../models/extras/configcontext/\"\nclick ConfigTemplate \"../../models/extras/configtemplate/\"</code></pre>"
    },
    {
      "location": "features/configuration-rendering/#configuration-templates",
      "title": "Configuration Templates",
      "text": "<p>Configuration templates are written in the Jinja2 templating language, and may be automatically populated from remote data sources. Context data is applied to a template during rendering to output a complete configuration file. Below is an example Jinja2 template which renders a simple network switch configuration file.</p> <pre><code>{% extends 'base.j2' %}\n\n{% block content %}\n    system {\n        host-name {{ device.name }};\n        domain-name example.com;\n        time-zone UTC;\n        authentication-order [ password radius ];\n        ntp {\n            {% for server in ntp_servers %}\n                server {{ server }};\n            {% endfor %}\n        }\n    }\n    {% for interface in device.interfaces.all() %}\n        {% include 'common/interface.j2' %}\n    {% endfor %}\n{% endblock %}\n</code></pre> <p>When rendered for a specific NetBox device, the template's <code>device</code> variable will be populated with the device instance, and <code>ntp_servers</code> will be pulled from the device's available context data. The resulting output will be a valid configuration segment that can be applied directly to a compatible network device.</p>"
    },
    {
      "location": "features/configuration-rendering/#context-data",
      "title": "Context Data",
      "text": "<p>The object for which the configuration is being rendered is made available as template context as <code>device</code> or <code>virtualmachine</code> for devices and virtual machines, respectively. Additionally, NetBox model classes can be accessed by the app or plugin in which they reside. For example:</p> <pre><code>There are {{ dcim.Site.objects.count() }} sites.\n</code></pre>"
    },
    {
      "location": "features/configuration-rendering/#rendering-templates",
      "title": "Rendering Templates",
      "text": ""
    },
    {
      "location": "features/configuration-rendering/#device-configurations",
      "title": "Device Configurations",
      "text": "<p>NetBox provides a REST API endpoint specifically for rendering the default configuration template for a specific device. This is accomplished by sending a POST request to the device's unique URL, optionally including additional context data.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox:8000/api/dcim/devices/123/render-config/ \\\n--data '{\n  \"extra_data\": \"abc123\"\n}'\n</code></pre> <p>This request will trigger resolution of the device's preferred config template in the following order:</p> <ul> <li>The config template assigned to the individual device</li> <li>The config template assigned to the device's role</li> <li>The config template assigned to the device's platform</li> </ul> <p>If no config template has been assigned to any of these three objects, the request will fail.</p> <p>The configuration can be rendered as JSON or as plaintext by setting the <code>Accept:</code> HTTP header. For example:</p> <ul> <li><code>Accept: application/json</code></li> <li><code>Accept: text/plain</code></li> </ul>"
    },
    {
      "location": "features/configuration-rendering/#general-purpose-use",
      "title": "General Purpose Use",
      "text": "<p>NetBox config templates can also be rendered without being tied to any specific device, using a separate general purpose REST API endpoint. Any data included with a POST request to this endpoint will be passed as context data for the template.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox:8000/api/extras/config-templates/123/render/ \\\n--data '{\n  \"foo\": \"abc\",\n  \"bar\": 123\n}'\n</code></pre>"
    },
    {
      "location": "features/contacts/",
      "title": "Contacts",
      "text": "<p>Much like tenancy, contact assignment enables you to track ownership of resources modeled in NetBox. A contact represents an individual responsible for a resource within the context of its assigned role.</p> <pre><code>flowchart TD\n    ContactGroup --&gt; ContactGroup &amp; Contact\n    ContactRole &amp; Contact --&gt; assignment([Assignment])\n    assignment --&gt; Object\n\nclick Contact \"../../models/tenancy/contact/\"\nclick ContactGroup \"../../models/tenancy/contactgroup/\"\nclick ContactRole \"../../models/tenancy/contactrole/\"</code></pre>"
    },
    {
      "location": "features/contacts/#contact-groups",
      "title": "Contact Groups",
      "text": "<p>Contacts can be grouped arbitrarily into a recursive hierarchy, and a contact can be assigned to a group at any level within the hierarchy.</p>"
    },
    {
      "location": "features/contacts/#contact-roles",
      "title": "Contact Roles",
      "text": "<p>A contact role defines the relationship of a contact to an assigned object. For example, you might define roles for administrative, operational, and emergency contacts.</p>"
    },
    {
      "location": "features/contacts/#contacts_1",
      "title": "Contacts",
      "text": "<p>A contact should represent an individual or permanent point of contact. Each contact must define a name, and may optionally include a title, phone number, email address, and related details.</p> <p>Contacts are reused for assignments, so each unique contact must be created only once and can be assigned to any number of NetBox objects, and there is no limit to the number of assigned contacts an object may have. Most core objects in NetBox can have contacts assigned to them.</p> <p>The following models support the assignment of contacts:</p> <ul> <li>circuits.Circuit</li> <li>circuits.Provider</li> <li>circuits.ProviderAccount</li> <li>dcim.Device</li> <li>dcim.Location</li> <li>dcim.Manufacturer</li> <li>dcim.PowerPanel</li> <li>dcim.Rack</li> <li>dcim.Region</li> <li>dcim.Site</li> <li>dcim.SiteGroup</li> <li>tenancy.Tenant</li> <li>virtualization.Cluster</li> <li>virtualization.ClusterGroup</li> <li>virtualization.VirtualMachine</li> </ul>"
    },
    {
      "location": "features/context-data/",
      "title": "Context Data",
      "text": "<p>Configuration context data (or \"config contexts\" for short) is a powerful feature that enables users to define arbitrary data that applies to device and virtual machines based on certain characteristics. For example, suppose you want to define syslog servers for devices assigned to sites within a particular region. In NetBox, you can create a config context instance containing this data and apply it to the desired region. All devices within this region will now include this data when fetched via an API.</p> <pre><code>{\n    \"syslog-servers\": [\n        \"192.168.43.107\",\n        \"192.168.48.112\"\n    ]\n}\n</code></pre> <p>Context data can be consumed by remote API clients, or it can be employed natively to render configuration templates.</p> <p>Config contexts can be computed for objects based on the following criteria:</p> Type Devices Virtual Machines Region Site group Site Location Device type Role Platform Cluster type Cluster group Cluster Tenant group Tenant Tag <p>There are no restrictions around what data can be stored in a configuration context, so long as it can be expressed in JSON.</p>"
    },
    {
      "location": "features/context-data/#hierarchical-rendering",
      "title": "Hierarchical Rendering",
      "text": "<p>While this is handy on its own, the real power of context data stems from its ability to be merged and overridden using multiple instances. For example, perhaps you need to define different syslog servers within the region for a particular device role. You can create a second config context with the appropriate data and a higher weight, and apply it to the desired role. This will override the lower-weight data that applies to the entire region. As you can imagine, this flexibility can cater to many complex use cases.</p> <p>For example, suppose we want to specify a set of syslog and NTP servers for all devices within a region. We could create a config context instance with a weight of 1000 assigned to the region, with the following JSON data:</p> <pre><code>{\n    \"ntp-servers\": [\n        \"172.16.10.22\",\n        \"172.16.10.33\"\n    ],\n    \"syslog-servers\": [\n        \"172.16.9.100\",\n        \"172.16.9.101\"\n    ]\n}\n</code></pre> <p>But suppose there's a problem at one particular site within this region preventing traffic from reaching the regional syslog server. Devices there need to use a local syslog server instead of the two defined above. We'll create a second config context assigned only to that site with a weight of 2000 and the following data:</p> <pre><code>{\n    \"syslog-servers\": [\n        \"192.168.43.107\"\n    ]\n}\n</code></pre> <p>When the context data for a device at this site is rendered, the second, higher-weight data overwrite the first, resulting in the following:</p> <pre><code>{\n    \"ntp-servers\": [\n        \"172.16.10.22\",\n        \"172.16.10.33\"\n    ],\n    \"syslog-servers\": [\n        \"192.168.43.107\"\n    ]\n}\n</code></pre> <p>Data from the higher-weight context overwrites conflicting data from the lower-weight context, while the non-conflicting portion of the lower-weight context (the list of NTP servers) is preserved.</p>"
    },
    {
      "location": "features/context-data/#local-context-data",
      "title": "Local Context Data",
      "text": "<p>Devices and virtual machines may also have a local context data defined. This local context will always take precedence over any separate config context objects which apply to the device/VM. This is useful in situations where we need to call out a specific deviation in the data for a particular object.</p> <p>Warning</p> <p>If you find that you're routinely defining local context data for many individual devices or virtual machines, custom fields may offer a more effective solution.</p>"
    },
    {
      "location": "features/customization/",
      "title": "Customization",
      "text": "<p>While NetBox strives to meet the needs of every network, the needs of users to cater to their own unique environments cannot be ignored. NetBox was built with this in mind, and can be customized in many ways to better suit your particular needs.</p>"
    },
    {
      "location": "features/customization/#tags",
      "title": "Tags",
      "text": "<p>Most objects in NetBox can be assigned user-created tags to aid with organization and filtering. Tag values are completely arbitrary: They may be used to store data in key-value pairs, or they may be employed simply as labels against which objects can be filtered. Each tag can also be assigned a color for quicker differentiation in the user interface.</p> <p>Objects can be filtered by the tags they have applied. For example, the following API request will retrieve all devices tagged as \"monitored\":</p> <pre><code>GET /api/dcim/devices/?tag=monitored\n</code></pre> <p>The <code>tag</code> filter can be specified multiple times to match only objects which have all the specified tags assigned:</p> <pre><code>GET /api/dcim/devices/?tag=monitored&amp;tag=deprecated\n</code></pre>"
    },
    {
      "location": "features/customization/#bookmarks",
      "title": "Bookmarks",
      "text": "<p>Users can bookmark their most commonly visited objects for convenient access. Bookmarks are listed under a user's profile, and can be displayed with custom filtering and ordering on the user's personal dashboard.</p>"
    },
    {
      "location": "features/customization/#custom-fields",
      "title": "Custom Fields",
      "text": "<p>While NetBox provides a rather extensive data model out of the box, the need may arise to store certain additional data associated with NetBox objects. For example, you might need to record the invoice ID alongside an installed device, or record an approving authority when creating a new IP prefix. NetBox administrators can create custom fields on built-in objects to meet these needs.</p> <p>NetBox supports many types of custom field, from basic data types like strings and integers, to complex structures like selection lists or raw JSON. It's even possible to add a custom field which references other NetBox objects. Custom field data is stored directly alongside the object to which it is applied in the database, which ensures minimal performance impact. And custom field data can be written and read via the REST API, just like built-in fields.</p> <p>To learn more about this feature, check out the custom field documentation.</p>"
    },
    {
      "location": "features/customization/#custom-links",
      "title": "Custom Links",
      "text": "<p>Custom links allow you to conveniently reference external resources related to NetBox objects from within the NetBox UI. For example, you might wish to link each virtual machine modeled in NetBox to its corresponding view in some orchestration application. You can do this by creating a templatized custom link for the virtual machine model, specifying something like the following for the link URL:</p> <pre><code>http://server.local/vms/?name={{ object.name }}\n</code></pre> <p>Now, when viewing a virtual machine in NetBox, a user will see a handy button with the chosen title and link (complete with the name of the VM being viewed). Both the text and URL of custom links can be templatized in this manner, and custom links can be grouped together into dropdowns for more efficient display.</p> <p>To learn more about this feature, check out the custom link documentation.</p>"
    },
    {
      "location": "features/customization/#custom-validation",
      "title": "Custom Validation",
      "text": "<p>While NetBox employs robust built-in object validation to ensure the integrity of its database, you might wish to enforce additional rules governing the creation and modification of certain objects. For example, perhaps you require that every device defined in NetBox adheres to a particular naming scheme and includes an asset tag. You can configure a custom validation rule in NetBox to enforce these requirements for the device model:</p> <pre><code>CUSTOM_VALIDATORS = {\n    \"dcim.device\": [\n        {\n            \"name\": {\n                \"regex\": \"[a-z]+\\d{3}\"\n            },\n            \"asset_tag\": {\n                \"required\": True\n            }\n        }\n    ]\n}\n</code></pre> <p>To learn more about this feature, check out the custom validation documentation.</p>"
    },
    {
      "location": "features/customization/#export-templates",
      "title": "Export Templates",
      "text": "<p>Most NetBox objects can be exported in bulk in two built-in CSV formats: The current view (what the user currently sees in the objects list), or all available data. NetBox also provides the capability to define your own custom data export formats via export templates. An export template is essentially Jinja2 template code associated with a particular object type. From the objects list in the NetBox UI, a user can select any of the created export templates to export the objects according to the template logic.</p> <p>An export template doesn't have to render CSV data: Its output can be in any character-based format. For example, you might want to render data using tabs as delimiters, or even create DNS address records directly from the IP addresses list. Export templates are a great way to get the data you need in the format you need quickly.</p> <p>To learn more about this feature, check out the export template documentation.</p>"
    },
    {
      "location": "features/customization/#reports",
      "title": "Reports",
      "text": "<p>NetBox administrators can install custom Python scripts, known as reports, which run within NetBox and can be executed and analyzed within the NetBox UI. Reports are a great way to evaluate NetBox objects against a set of arbitrary rules. For example, you could write a report to check that every router has a loopback interface with an IP address assigned, or that every site has a minimum set of VLANs defined.</p> <p>When a report runs, its logs messages pertaining to the operations being performed, and will ultimately result in either a pass or fail. Reports can be executed via the UI, REST API, or CLI (as a management command). They can be run immediately or scheduled to run at a future time.</p> <p>To learn more about this feature, check out the documentation for reports.</p>"
    },
    {
      "location": "features/customization/#custom-scripts",
      "title": "Custom Scripts",
      "text": "<p>Custom scripts are similar to reports, but more powerful. A custom script can prompt the user for input via a form (or API data), and is built to do much more than just reporting. Custom scripts are generally used to automate tasks, such as the population of new objects in NetBox, or exchanging data with external systems. As with reports, they can be run via the UI, REST API, or CLI, and be scheduled to execute at a future time.</p> <p>The complete Python environment is available to a custom script, including all of NetBox's internal mechanisms: There are no artificial restrictions on what a script can do. As such, custom scripting is considered an advanced feature and requires sufficient familiarity with Python and NetBox's data model.</p> <p>To learn more about this feature, check out the documentation for custom scripts.</p>"
    },
    {
      "location": "features/devices-cabling/",
      "title": "Devices &amp; Cabling",
      "text": "<p>At its heart, NetBox is a tool for modeling your network infrastructure, and the device object is pivotal to that function. A device can be any piece of physical hardware installed within your network, such as server, router, or switch, and may optionally be mounted within a rack. Within each device, resources such as network interfaces and console ports are modeled as discrete components, which may optionally be grouped into modules.</p> <p>NetBox uses device types to represent unique real-world device models. This allows a user to define a device type and all its components once, and easily replicate an unlimited number of device instances from it.</p> <pre><code>flowchart TD\n    Manufacturer -.-&gt; Platform &amp; DeviceType &amp; ModuleType\n    Manufacturer --&gt; DeviceType &amp; ModuleType\n    DeviceRole &amp; Platform &amp; DeviceType --&gt; Device\n    Device &amp; ModuleType ---&gt; Module\n    Device &amp; Module --&gt; Interface &amp; ConsolePort &amp; PowerPort &amp; ...\n\nclick Device \"../../models/dcim/device/\"\nclick DeviceRole \"../../models/dcim/devicerole/\"\nclick DeviceType \"../../models/dcim/devicetype/\"\nclick Manufacturer \"../../models/dcim/manufacturer/\"\nclick Module \"../../models/dcim/module/\"\nclick ModuleType \"../../models/dcim/moduletype/\"\nclick Platform \"../../models/dcim/platform/\"</code></pre>"
    },
    {
      "location": "features/devices-cabling/#manufacturers",
      "title": "Manufacturers",
      "text": "<p>A manufacturer generally represents an organization which produces hardware devices. These can be defined by users, however they should represent an actual entity rather than some abstract idea.</p>"
    },
    {
      "location": "features/devices-cabling/#device-types",
      "title": "Device Types",
      "text": "<p>A device type represents a unique combination of manufacturer and hardware model which maps to discrete make and model of device which exists in the real world. Each device type typically has a number of components created on it, representing network interfaces, device bays, and so on. New devices of this type can then be created in NetBox, and any associated components will be automatically replicated from the device type. This avoids needing to tediously recreate components for each device as it is added in NetBox.</p> <p>The Device Type Library</p> <p>While users are always free to create their own device types in NetBox, many find it convenient to draw from our community library of pre-defined device types. This is possible because a particular make and model of device is applicable universally and never changes.</p> <p>All the following can be modeled as components:</p> <ul> <li>Interfaces</li> <li>Console ports</li> <li>Console server ports</li> <li>Power ports</li> <li>Power outlets</li> <li>Pass-through ports (front and rear)</li> <li>Module bays (which house modules)</li> <li>Device bays (which house child devices)</li> </ul> <p>For example, a Juniper EX4300-48T device type might have the following component templates defined:</p> <ul> <li>One template for a console port (\"Console\")</li> <li>Two templates for power ports (\"PSU0\" and \"PSU1\")</li> <li>48 templates for 1GE interfaces (\"ge-0/0/0\" through \"ge-0/0/47\")</li> <li>Four templates for 10GE interfaces (\"xe-0/2/0\" through \"xe-0/2/3\")</li> </ul> <p>Once component templates have been created, every new device that you create as an instance of this type will automatically be assigned each of the components listed above.</p> <p>Component Instantiation is not Retroactive</p> <p>The instantiation of components from a device type definition occurs only at the time of device creation. If you modify the components assigned to a device type, it will not affect devices which have already been created. This guards against any inadvertent changes to existing devices. However, you always have the option of adding, modifying, or deleting components on existing devices. (These changes can easily be applied to multiple devices at once using the bulk operations available in the UI.)</p>"
    },
    {
      "location": "features/devices-cabling/#devices",
      "title": "Devices",
      "text": "<p>Whereas a device type defines the make and model of a device, a device itself represents an actual piece of installed hardware somewhere in the real world. A device can be installed at a particular position within an equipment rack, or simply associated with a site (and optionally with a location within that site).</p> <p>Each device can have an operational status, functional role, and software platform assigned. Device components are instantiated automatically from the assigned device type upon creation.</p>"
    },
    {
      "location": "features/devices-cabling/#virtual-chassis",
      "title": "Virtual Chassis",
      "text": "<p>Sometimes it is necessary to model a set of physical devices as sharing a single management plane. Perhaps the most common example of such a scenario is stackable switches. These can be modeled as virtual chassis in NetBox, with one device acting as the chassis master and the rest as members. All components of member devices will appear on the master.</p>"
    },
    {
      "location": "features/devices-cabling/#virtual-device-contexts",
      "title": "Virtual Device Contexts",
      "text": "<p>A virtual device context (VDC) is a logical partition within a device. Each VDC operates autonomously but shares a common pool of resources. Each interface can be assigned to one or more VDCs on its device.</p>"
    },
    {
      "location": "features/devices-cabling/#module-types-modules",
      "title": "Module Types &amp; Modules",
      "text": "<p>Much like device types and devices, module types can instantiate discrete modules, which are hardware components installed within devices. Modules often have their own child components, which become available to the parent device. For example, when modeling a chassis-based switch with multiple line cards in NetBox, the chassis would be created (from a device type) as a device, and each of its line cards would be instantiated from a module type as a module installed in one of the device's module bays.</p> <p>Device Bays vs. Module Bays</p> <p>What's the difference between device bays and module bays? Device bays are appropriate when the installed hardware has its own management plane, isolated from the parent device. A common example is a blade server chassis in which the blades share power but operate independently. In contrast, a module bay holds a module which does not operate independently of its parent device, as with the chassis switch line card example mentioned above.</p> <p>One especially nice feature of modules is that templated components can be automatically renamed according to the module bay into which the parent module is installed. For example, if we create a module type with interfaces named <code>Gi{module}/0/1-48</code> and install a module of this type into module bay 7 of a device, NetBox will create interfaces named <code>Gi7/0/1-48</code>.</p>"
    },
    {
      "location": "features/devices-cabling/#cables",
      "title": "Cables",
      "text": "<p>NetBox models cables as connections among certain types of device components and other objects. Each cable can be assigned a type, color, length, and label. NetBox will enforce basic sanity checks to prevent invalid connections. (For example, a network interface cannot be connected to a power outlet.)</p> <p>Either end of a cable may terminate to multiple objects of the same type. For example, a network interface can be connected via a fiber optic cable to two discrete ports on a patch panel (each port attaching to an individual fiber strand in the patch cable).</p> <pre><code>flowchart LR\n    Interface --&gt; Cable\n    Cable --&gt; fp1[Front Port] &amp; fp2[Front Port]</code></pre>"
    },
    {
      "location": "features/event-rules/",
      "title": "Event Rules",
      "text": "<p>NetBox includes the ability to automatically perform certain functions in response to internal events. These include:</p> <ul> <li>Executing a custom script</li> <li>Sending a webhook</li> <li>Generating user notifications</li> </ul> <p>For example, suppose you want to automatically configure a monitoring system to start monitoring a device when its operational status is changed to active, and remove it from monitoring for any other status. You can create a webhook in NetBox for the device model and craft its content and destination URL to effect the desired change on the receiving system. You can then associate an event rule with this webhook and the webhook will be sent automatically by NetBox whenever the configured constraints are met.</p> <p>Each event must be associated with at least one NetBox object type and at least one event (e.g. create, update, or delete).</p>"
    },
    {
      "location": "features/event-rules/#conditional-event-rules",
      "title": "Conditional Event Rules",
      "text": "<p>An event rule may include a set of conditional logic expressed in JSON used to control whether an event triggers for a specific object. For example, you may wish to trigger an event for devices only when the <code>status</code> field of an object is \"active\":</p> <pre><code>{\n  \"and\": [\n    {\n      \"attr\": \"status.value\",\n      \"value\": \"active\"\n    }\n  ]\n}\n</code></pre> <p>For more detail, see the reference documentation for NetBox's conditional logic.</p>"
    },
    {
      "location": "features/event-rules/#event-rule-processing",
      "title": "Event Rule Processing",
      "text": "<p>When a change is detected, any resulting events are placed into a Redis queue for processing. This allows the user's request to complete without needing to wait for the outgoing event(s) to be processed. The events are then extracted from the queue by the <code>rqworker</code> process. The current event queue and any failed events can be inspected under System &gt; Background Tasks.</p>"
    },
    {
      "location": "features/facilities/",
      "title": "Facilities",
      "text": "<p>From global regions down to individual equipment racks, NetBox allows you to model your network's entire presence. This is accomplished through the use of several purpose-built models. The graph below illustrates these models and their relationships.</p> <pre><code>flowchart TD\n    Region --&gt; Region\n    SiteGroup --&gt; SiteGroup\n    Region &amp; SiteGroup --&gt; Site\n    Site --&gt; Location &amp; Device\n    Location --&gt; Location\n    Location --&gt; Rack &amp; Device\n    Rack --&gt; Device\n    Site --&gt; Rack\n    RackRole --&gt; Rack\n\nclick Device \"../../models/dcim/device/\"\nclick Location \"../../models/dcim/location/\"\nclick Rack \"../../models/dcim/rack/\"\nclick RackRole \"../../models/dcim/rackrole/\"\nclick Region \"../../models/dcim/region/\"\nclick Site \"../../models/dcim/site/\"\nclick SiteGroup \"../../models/dcim/sitegroup/\"</code></pre>"
    },
    {
      "location": "features/facilities/#regions",
      "title": "Regions",
      "text": "<p>Regions represent geographic domains in which your network or its customers have a presence. These are typically used to model countries, states, and cities, although NetBox does not prescribe any precise uses and your needs may differ.</p> <p>Regions are self-nesting, so you can define child regions within a parent, and grandchildren within each child. For example, you might create a hierarchy like this:</p> <ul> <li>Europe<ul> <li>France</li> <li>Germany</li> <li>Spain</li> </ul> </li> <li>North America<ul> <li>Canada</li> <li>United States<ul> <li>California</li> <li>New York</li> <li>Texas</li> </ul> </li> </ul> </li> </ul> <p>Regions will always be listed alphabetically by name within each parent, and there is no maximum depth for the hierarchy.</p>"
    },
    {
      "location": "features/facilities/#site-groups",
      "title": "Site Groups",
      "text": "<p>Like regions, site groups can be arranged in a recursive hierarchy for grouping sites. However, whereas regions are intended for geographic organization, site groups may be used for functional grouping. For example, you might classify sites as corporate, branch, or customer sites in addition to where they are physically located.</p> <p>The use of both regions and site groups affords two independent but complementary dimensions across which sites can be organized.</p>"
    },
    {
      "location": "features/facilities/#sites",
      "title": "Sites",
      "text": "<p>A site typically represents a building within a region and/or site group. Each site is assigned an operational status (e.g. active or planned), and can have a discrete mailing address and GPS coordinates assigned to it.</p>"
    },
    {
      "location": "features/facilities/#locations",
      "title": "Locations",
      "text": "<p>A location can be any logical subdivision within a building, such as a floor or room. Like regions and site groups, locations can be nested into a self-recursive hierarchy for maximum flexibility. And like sites, each location has an operational status assigned to it.</p>"
    },
    {
      "location": "features/facilities/#rack-types",
      "title": "Rack Types",
      "text": "<p>A rack type represents a unique specification of a rack which exists in the real world. Each rack type can be setup with weight, height, and unit ordering. New racks of this type can then be created in NetBox, and any associated specifications will be automatically replicated from the device type.</p>"
    },
    {
      "location": "features/facilities/#racks",
      "title": "Racks",
      "text": "<p>Finally, NetBox models each equipment rack as a discrete object within a site and location. These are physical objects into which devices are installed. Each rack can be assigned an operational status, type, facility ID, and other attributes related to inventory tracking. Each rack also must define a height (in rack units) and width, and may optionally specify its physical dimensions.</p> <p>Each rack must be associated to a site, but the assignment to a location within that site is optional. Users can also create custom roles to which racks can be assigned. NetBox supports tracking rack space in half-unit increments, so it's possible to mount devices at e.g. position 2.5 within a rack.</p> <p>Devices</p> <p>You'll notice in the diagram above that a device can be installed within a site, location, or rack. This approach affords plenty of flexibility as not all sites need to define child locations, and not all devices reside in racks.</p>"
    },
    {
      "location": "features/ipam/",
      "title": "IP Address Management",
      "text": "<p>IP address management (IPAM) is one of NetBox's core features. It supports full parity for IP4 and IPv6, advanced VRF assignment, automatic hierarchy formation, and much more.</p>"
    },
    {
      "location": "features/ipam/#ip-hierarchy",
      "title": "IP Hierarchy",
      "text": "<p>NetBox employs several object types to represent a hierarchy of IP resources:</p> <ul> <li>Aggregate - A prefix which represents the root of an addressing hierarchy. This is typically a large swath of public or private address space allocated for use by your organization. Each aggregate is assigned to an authoritative RIR.</li> <li>Prefix - A subnet defined within an aggregate. Prefixes extend the hierarchy by nesting within one another. (For example, 192.168.123.0/24 will appear within 192.168.0.0/16.) Each prefix can be assigned a functional role as well as an operational status.</li> <li>IP Range - An arbitrary range of individual IP addresses within a prefix, all sharing the same mask. Ranges are commonly affiliated with DHCP scopes, but can be used for any similar purpose.</li> <li>IP Address - An individual IP address along with its subnet mask, automatically arranged beneath its parent prefix.</li> </ul> <pre><code>flowchart TD\n    RIR --&gt; Aggregate\n    Aggregate &amp; Role --&gt; Prefix\n    Prefix --&gt; Prefix\n    Prefix --&gt; IPRange &amp; IPAddress\n\nclick Aggregate \"../../models/ipam/aggregate/\"\nclick IPAddress \"../../models/ipam/ipaddress/\"\nclick IPRange \"../../models/ipam/iprange/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick RIR \"../../models/ipam/rir/\"\nclick Role \"../../models/ipam/role/\"</code></pre> <p>Automatic Hierarchies</p> <p>IP objects in NetBox never need to be manually assigned to the parent objects. The construction of hierarchies is handled automatically by the application according to the inherent rules of IP addressing.</p> <p>An example hierarchy might look like this:</p> <ul> <li>100.64.0.0/10 (aggregate)<ul> <li>100.64.0.0/20 (prefix)</li> <li>100.64.16.0/20 (prefix)<ul> <li>100.64.16.0/24 (prefix)<ul> <li>100.64.16.1/24 (address)</li> <li>100.64.16.2/24 (address)</li> <li>100.64.16.3/24 (address)</li> </ul> </li> <li>100.64.19.0/24 (prefix)</li> </ul> </li> <li>100.64.32.0/20 (prefix)<ul> <li>100.64.32.1/24 (address)</li> <li>100.64.32.10-99/24 (range)</li> </ul> </li> </ul> </li> </ul>"
    },
    {
      "location": "features/ipam/#utilization-stats",
      "title": "Utilization Stats",
      "text": "<p>The utilization rate for each prefix is calculated automatically depending on its status. Container prefixes are those which house child prefixes; their utilization rate is determined based on how much of their available IP space is consumed by child prefixes. The utilization rate for any other type of prefix is determined by the aggregate usage of any child IP addresses and/or ranges defined.</p> <p>Similarly, utilization rates for aggregates is determined based on the space consumed by their child prefixes.</p>"
    },
    {
      "location": "features/ipam/#vrf-tracking",
      "title": "VRF Tracking",
      "text": "<p>NetBox supports the modeling of discrete virtual routing and forwarding (VRF) instances to represent multiple routing tables, including those with overlapping address space. Each type of IP object within an aggregate - prefix, IP range, and IP address - can be assigned to a particular VRF. Consequently, each VRF maintains its own isolated IP hierarchy. This makes it very easy to track overlapping IP space.</p> <p>VRF modeling in NetBox very closely follows what you find in real-world network configurations, with each VRF assigned a standards-compliant route distinguisher. You can even create route targets to manage the import and export of routing information among VRFs.</p> <p>Enforcing Unique IP Space</p> <p>Each VRF can be independently configured to permit or prohibit duplicate IP objects. For example, a VRF which has been configured to enforce unique IP space will not allow the creation of two 192.0.2.0/24 prefixes. The ability to toggle this restriction per VRF affords the user maximum flexibility in modeling their IP space.</p>"
    },
    {
      "location": "features/ipam/#as-numbers",
      "title": "AS Numbers",
      "text": "<p>An often overlooked component of IPAM, NetBox also tracks autonomous system (AS) numbers and their assignment to sites. Both 16- and 32-bit AS numbers are supported, and like aggregates each ASN is assigned to an authoritative RIR.</p>"
    },
    {
      "location": "features/ipam/#service-mapping",
      "title": "Service Mapping",
      "text": "<p>NetBox models network applications as discrete service objects associated with devices and/or virtual machines, and optionally with specific IP addresses attached to those parent objects. These can be used to catalog the applications running on your network for reference by other objects or integrated tools.</p> <p>To model services in NetBox, begin by creating a service template defining the name, protocol, and port number(s) on which the service listens. This template can then be easily instantiated to \"attach\" new services to a device or virtual machine. It's also possible to create new services by hand, without a template, however this approach can be tedious.</p>"
    },
    {
      "location": "features/journaling/",
      "title": "Journaling",
      "text": "<p>All primary and organizational models in NetBox support journaling. A journal is a collection of human-generated notes and comments about an object maintained for historical context. It supplements NetBox's change log to provide additional information about why changes have been made or to convey events which occur outside NetBox. Unlike the change log, in which records typically expire after a configurable period of time, journal entries persist for the life of their associated object.</p> <p>Each journal entry has a selectable kind (info, success, warning, or danger) and a user-populated <code>comments</code> field. Each entry automatically records the date, time, and associated user upon being created.</p>"
    },
    {
      "location": "features/l2vpn-overlay/",
      "title": "L2VPN &amp; Overlay",
      "text": "<p>L2VPN and overlay networks, such as VXLAN and EVPN, can be defined in NetBox and tied to interfaces and VLANs. This allows for easy tracking of overlay assets and their relationships with underlay resources.</p> <p>Each L2VPN instance has a type and optional unique identifier. Like VRFs, L2VPNs can also have import and export route targets assigned to them. Terminations can then be created to assign VLANs and/or device and virtual machine interfaces to the overlay.</p>"
    },
    {
      "location": "features/notifications/",
      "title": "Notifications",
      "text": "<p>NetBox includes a system for generating user notifications, which can be marked as read or deleted by individual users. There are two built-in mechanisms for generating a notification:</p> <ul> <li>A user can subscribe to an object. When that object is modified, a notification is created to inform the user of the change.</li> <li>An event rule can be defined to automatically generate a notification for one or more users in response to specific system events.</li> </ul> <p>Additionally, NetBox plugins can generate notifications for their own purposes.</p>"
    },
    {
      "location": "features/power-tracking/",
      "title": "Power Tracking",
      "text": "<p>As part of its DCIM feature set, NetBox supports modeling facility power as discrete power panels and feeds. These are most commonly used to document power distribution within a data center, but can serve more traditional environments as well.</p> <p></p>"
    },
    {
      "location": "features/power-tracking/#power-panels",
      "title": "Power Panels",
      "text": "<p>A power panel is the furthest upstream power element modeled in NetBox. It typically represents a power distribution panel (or breaker panel) where facility power is split into multiple discrete circuits, which are modeled as feeds.</p> <p>Each power panel is associated with a site, and may optionally be associated with a particular location within that site. There is no limit to how many power feeds a single panel can supply, however both of these object types should map to real-world objects.</p>"
    },
    {
      "location": "features/power-tracking/#power-feeds",
      "title": "Power Feeds",
      "text": "<p>A power feed represents a discrete power circuit originating from an upstream power panel. Each power feed can be assigned a name, operational status, and various electrical characteristics such as supply (AC or DC), voltage, amperage, and so on.</p> <p>A device power port can be connected to a power feed via a cable. Only one port can be connected to a feed: Where multiple devices draw power from the same feed, a power distribution unit (PDU) must be modeled as an individual device mapping a power port to multiple power outlets to which the downstream devices can connect (as in the example above).</p> <p>Primary and Redundant Power</p> <p>Each power feed in NetBox is assigned a type: primary or redundant. This allows easily modeling redundant power distribution topologies. In scenarios involving only a single, non-redundant power supply, mark all power feeds as primary.</p>"
    },
    { "location": "features/search/", "title": "Search", "text": "" },
    {
      "location": "features/search/#global-search",
      "title": "Global Search",
      "text": "<p>NetBox includes a powerful global search engine, providing a single convenient interface to search across its complex data model. Relevant fields on each model are indexed according to their precedence, so that the most relevant results are returned first. When objects are created or modified, the search index is updated immediately, ensuring real-time accuracy.</p> <p>When entering a search query, the user can choose a specific lookup type: exact match, partial match, etc. When a partial match is found, the matching portion of the applicable field value is included with each result so that the user can easily determine its relevance.</p> <p>Custom fields defined by NetBox administrators are also included in search results if configured with a search weight. Additionally, NetBox plugins can register their own custom models for inclusion alongside core models.</p> <p>Note</p> <p>NetBox does not index any static choice field's (including custom fields of type \"Selection\" or \"Multiple selection\").</p>"
    },
    {
      "location": "features/search/#saved-filters",
      "title": "Saved Filters",
      "text": "<p>Each type of object in NetBox is accompanied by an extensive set of filters, each tied to a specific attribute, which enable the creation of complex queries. Often you'll find that certain queries are used routinely to apply some set of prescribed conditions to a query. Once a set of filters has been applied, NetBox offers the option to save it for future use.</p> <p>For example, suppose you often need to locate all planned devices of a certain type within a region. The applicable filters can be applied and then saved as custom named filter for reuse, such that</p> <pre><code>?status=planned&amp;device_type_id=78&amp;region_id=12\n</code></pre> <p>becomes</p> <pre><code>?filter=my-custom-filter\n</code></pre> <p>These saved filters can be used both within the UI and for API queries.</p>"
    },
    {
      "location": "features/synchronized-data/",
      "title": "Synchronized Data",
      "text": "<p>Several models in NetBox support the automatic synchronization of local data from a designated remote source. For example, configuration templates defined in NetBox can source their content from text files stored in a remote git repository. This is accomplished using the core data source and data file models.</p> <p>To enable remote data synchronization, the NetBox administrator first designates one or more remote data sources. NetBox currently supports the following source types:</p> <ul> <li>Git repository</li> <li>Amazon S3 bucket (or compatible product)</li> <li>Local disk path</li> </ul> <p>(Local disk paths are considered \"remote\" in this context as they exist outside NetBox's database. These paths could also be mapped to external network shares.)</p> <p>Info</p> <p>Data backends which connect to external sources typically require the installation of one or more supporting Python libraries. The Git backend requires the <code>dulwich</code> package, and the S3 backend requires the <code>boto3</code> package. These must be installed within NetBox's environment to enable these backends.</p> <p>Info</p> <p>If you are configuring Git and have <code>HTTP_PROXIES</code> configured to use the SOCKS protocol, you will also need to install the <code>python_socks</code> Python library.</p> <p>Each type of remote source has its own configuration parameters. For instance, a git source will ask the user to specify a branch and authentication credentials. Once the source has been created, a synchronization job is run to automatically replicate remote files in the local database.</p> <p>The following NetBox models can be associated with replicated data files:</p> <ul> <li>Config contexts</li> <li>Config templates</li> <li>Export templates</li> </ul> <p>Once a data has been designated for a local instance, its data will be replaced with the content of the replicated file. When the replicated file is updated in the future (via synchronization jobs), the local instance will be flagged as having out-of-date data. A user can then synchronize these objects individually or in bulk to effect the update. This two-stage process ensures that automated synchronization tasks do not immediately affect production data.</p> <p>Permissions</p> <p>A user must be assigned the <code>core.sync_datasource</code> permission in order to synchronize local files from a remote data source.</p>"
    },
    {
      "location": "features/tenancy/",
      "title": "Tenancy",
      "text": "<p>Most core objects within NetBox's data model support tenancy. This is the association of an object with a particular tenant to convey ownership or dependency. For example, an enterprise might represent its internal business units as tenants, whereas a managed services provider might create a tenant in NetBox to represent each of its customers.</p> <pre><code>flowchart TD\n    TenantGroup --&gt; TenantGroup &amp; Tenant\n    Tenant --&gt; Site &amp; Device &amp; Prefix &amp; Circuit &amp; ...\n\nclick Tenant \"../../models/tenancy/tenant/\"\nclick TenantGroup \"../../models/tenancy/tenantgroup/\"</code></pre>"
    },
    {
      "location": "features/tenancy/#tenant-groups",
      "title": "Tenant Groups",
      "text": "<p>Tenants can be grouped by any logic that your use case demands, and groups can be nested recursively for maximum flexibility. For example, You might define a parent \"Customers\" group with child groups \"Current\" and \"Past\" within it. A tenant can be assigned to a group at any level within the hierarchy.</p>"
    },
    {
      "location": "features/tenancy/#tenants",
      "title": "Tenants",
      "text": "<p>Typically, the tenant model is used to represent a customer or internal organization, however it can be used for whatever purpose meets your needs.</p> <p>Most core objects within NetBox can be assigned to particular tenant, so this model provides a very convenient way to correlate ownership across object types. For example, each of your customers might have its own racks, devices, IP addresses, circuits and so on: These can all be easily tracked via tenant assignment.</p> <p>The following objects can be assigned to tenants:</p> <ul> <li>Sites</li> <li>Racks</li> <li>Rack reservations</li> <li>Devices</li> <li>VRFs</li> <li>Prefixes</li> <li>IP addresses</li> <li>VLANs</li> <li>Circuits</li> <li>Clusters</li> <li>Virtual machines</li> </ul> <p>Tenant assignment is used to signify the ownership of an object in NetBox. As such, each object may only be owned by a single tenant. For example, if you have a firewall dedicated to a particular customer, you would assign it to the tenant which represents that customer. However, if the firewall serves multiple customers, it doesn't belong to any particular customer, so tenant assignment would not be appropriate.</p>"
    },
    {
      "location": "features/virtualization/",
      "title": "Virtualization",
      "text": "<p>Virtual machines and clusters can be modeled in NetBox alongside physical infrastructure. IP addresses and other resources are assigned to these objects just like physical objects, providing a seamless integration between physical and virtual networks.</p> <pre><code>flowchart TD\n    ClusterGroup &amp; ClusterType --&gt; Cluster\n    Cluster --&gt; VirtualMachine\n    Platform --&gt; VirtualMachine\n    VirtualMachine --&gt; VMInterface\n\nclick Cluster \"../../models/virtualization/cluster/\"\nclick ClusterGroup \"../../models/virtualization/clustergroup/\"\nclick ClusterType \"../../models/virtualization/clustertype/\"\nclick Platform \"../../models/dcim/platform/\"\nclick VirtualMachine \"../../models/virtualization/virtualmachine/\"\nclick VMInterface \"../../models/virtualization/vminterface/\"</code></pre>"
    },
    {
      "location": "features/virtualization/#clusters",
      "title": "Clusters",
      "text": "<p>A cluster is one or more physical host devices on which virtual machines can run. Each cluster must have a type and operational status, and may be assigned to a group. (Both types and groups are user-defined.) Each cluster may designate one or more devices as hosts, however this is optional.</p>"
    },
    {
      "location": "features/virtualization/#virtual-machines",
      "title": "Virtual Machines",
      "text": "<p>A virtual machine is a virtualized compute instance. These behave in NetBox very similarly to device objects, but without any physical attributes. For example, a VM may have interfaces assigned to it with IP addresses and VLANs, however its interfaces cannot be connected via cables (because they are virtual). Each VM may also define its compute, memory, and storage resources as well.</p>"
    },
    {
      "location": "features/vlan-management/",
      "title": "VLAN Management",
      "text": "<p>Complementing its IPAM capabilities, NetBox also tracks VLAN information to assist with layer two network configurations. VLANs are defined per IEEE 802.1Q and related standards, and can be assigned to groups and functional roles.</p> <pre><code>flowchart TD\n    VLANGroup &amp; Role --&gt; VLAN\n\nclick Role \"../../models/ipam/role/\"\nclick VLAN \"../../models/ipam/vlan/\"\nclick VLANGroup \"../../models/ipam/vlangroup/\"</code></pre>"
    },
    {
      "location": "features/vlan-management/#vlan-groups",
      "title": "VLAN Groups",
      "text": "<p>A VLAN group is a collection of VLANs defined within a particular scope. Each VLAN group can be associated with a particular site, location, rack, or similar object to indicate its domain, and designates a minimum and maximum VLAN ID within the group. (By default, these are the standard minimum and maximum values of 1 and 4094, respectively.)</p> <p>Within a group, each VLAN must have a unique ID and name. There is no limit to how many groups can be created per scope.</p>"
    },
    {
      "location": "features/vlan-management/#vlans",
      "title": "VLANs",
      "text": "<p>NetBox models VLANs according to their definition under IEEE 802.1Q, with a 12-bit VLAN ID and a name. Each VLAN also has an operational status, and may be assigned a function role, just like prefixes. Each VLAN can be assigned to a VLAN group or site to convey the domain in which the VLAN exists.</p> <p>Once defined, VLANs can be associated with device and virtual machine interfaces. Each interface can be assigned an 802.1Q mode (access or tagged), and the relevant VLANs can be applied as tagged or untagged.</p>"
    },
    {
      "location": "features/vpn-tunnels/",
      "title": "Tunnels",
      "text": "<p>NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.</p> <pre><code>flowchart TD\n    Termination1[TunnelTermination]\n    Termination2[TunnelTermination]\n    Interface1[Interface]\n    Interface2[Interface]\n    Tunnel --&gt; Termination1 &amp; Termination2\n    Termination1 --&gt; Interface1\n    Termination2 --&gt; Interface2\n    Interface1 --&gt; Device\n    Interface2 --&gt; VirtualMachine\n\nclick Tunnel \"../../models/vpn/tunnel/\"\nclick TunnelTermination1 \"../../models/vpn/tunneltermination/\"\nclick TunnelTermination2 \"../../models/vpn/tunneltermination/\"</code></pre>"
    },
    {
      "location": "features/vpn-tunnels/#ipsec-ike",
      "title": "IPSec &amp; IKE",
      "text": "<p>NetBox includes robust support for modeling IPSec &amp; IKE policies. These are used to define encryption and authentication parameters for IPSec tunnels.</p> <pre><code>flowchart TD\n    subgraph IKEProposals[Proposals]\n    IKEProposal1[IKEProposal]\n    IKEProposal2[IKEProposal]\n    end\n    subgraph IPSecProposals[Proposals]\n    IPSecProposal1[IPSecProposal]\n    IPSecProposal2[IPSecProposal]\n    end\n    IKEProposals --&gt; IKEPolicy\n    IPSecProposals --&gt; IPSecPolicy\n    IKEPolicy &amp; IPSecPolicy--&gt; IPSecProfile\n    IPSecProfile --&gt; Tunnel\n\nclick IKEProposal1 \"../../models/vpn/ikeproposal/\"\nclick IKEProposal2 \"../../models/vpn/ikeproposal/\"\nclick IKEPolicy \"../../models/vpn/ikepolicy/\"\nclick IPSecProposal1 \"../../models/vpn/ipsecproposal/\"\nclick IPSecProposal2 \"../../models/vpn/ipsecproposal/\"\nclick IPSecPolicy \"../../models/vpn/ipsecpolicy/\"\nclick IPSecProfile \"../../models/vpn/ipsecprofile/\"\nclick Tunnel \"../../models/vpn/tunnel/\"</code></pre>"
    },
    {
      "location": "features/wireless/",
      "title": "Wireless",
      "text": "<p>Just as NetBox provides robust modeling for physical cable plants, it also supports modeling wireless LANs and point-to-point links.</p>"
    },
    {
      "location": "features/wireless/#wireless-lans",
      "title": "Wireless LANs",
      "text": "<pre><code>flowchart TD\n    WirelessLANGroup --&gt; WirelessLANGroup &amp; WirelessLAN\n\nclick WirelessLAN \"../../models/wireless/wirelesslan/\"\nclick WirelessLANGroup \"../../models/wireless/wirelesslangroup/\"</code></pre> <p>A wireless LAN is a multi-access network shared by multiple wireless clients, identified by a common service set identifier (SSID) and authentication parameters. Wireless LANs can be organized into self-nesting groups, and each wireless LAN may optionally be bound to a particular VLAN. This allows easily mapping wireless networks to their wired counterparts.</p> <p>Authentication attributes for wireless LANs include:</p> <ul> <li>Type - Open, WEP, WPA, etc.</li> <li>Cipher - Auto, TKIP, or AES</li> <li>Pre-shared key (PSK) - The secret key configured on all participating clients</li> </ul> <p>The definition of authentication parameters is optional.</p>"
    },
    {
      "location": "features/wireless/#wireless-links",
      "title": "Wireless Links",
      "text": "<p>Whereas a wireless LAN represents a physical multi-access segment with any number of clients, a wireless link is a point-to-point connection between exactly two stations. These links behave much like cables, but more accurately model the nature of wireless communications.</p> <p>Like wireless LANs, wireless links also have an SSID and (optional) authentication attributes.</p>"
    },
    {
      "location": "getting-started/planning/",
      "title": "Planning Your Move",
      "text": "<p>This guide outlines the steps necessary for planning a successful migration to NetBox. Although it is written under the context of a completely new installation, the general approach outlined here works just as well for adding new data to existing NetBox deployments.</p>"
    },
    {
      "location": "getting-started/planning/#identify-current-sources-of-truth",
      "title": "Identify Current Sources of Truth",
      "text": "<p>Before beginning to use NetBox for your own data, it's crucial to first understand where your existing sources of truth reside. A \"source of truth\" is really just any repository of data that is authoritative for a given domain. For example, you may have a spreadsheet which tracks all IP prefixes in use on your network. So long as everyone involved agrees that this spreadsheet is authoritative for the entire network, it is your source of truth for IP prefixes.</p> <p>Anything can be a source of truth, provided it meets two conditions:</p> <ol> <li>It is agreed upon by all relevant parties that this source of data is correct.</li> <li>The domain to which it applies is well-defined.</li> </ol> <p>Dedicate some time to take stock of your own sources of truth for your infrastructure. Upon attempting to catalog these, you're very likely to encounter some challenges, such as:</p> <ul> <li>Multiple conflicting sources for a given domain. For example, there may be multiple versions of a spreadsheet circulating, each of which asserts a conflicting set of data.</li> <li>Sources with no domain defined. You may encounter that different teams within your organization use different tools for the same purpose, with no normal definition of when either should be used.</li> <li>Inaccessible data formatting. Some tools are better suited for programmatic usage than others. For example, spreadsheets are generally very easy to parse and export, however free-form notes on wiki or similar application are much more difficult to consume.</li> <li>There is no source of truth. Sometimes you'll find that a source of truth simply doesn't exist for a domain. For example, when assigning IP addresses, operators may be just using any (presumed) available IP from a subnet without ever recording its usage.</li> </ul> <p>See if you can identify each domain of infrastructure data for your organization, and the source of truth for each. Once you have these compiled, you'll need to determine what belongs in NetBox.</p>"
    },
    {
      "location": "getting-started/planning/#determine-what-to-move",
      "title": "Determine What to Move",
      "text": "<p>The general rule when determining what data to put into NetBox is this: If there's a model for it, it belongs in NetBox. For instance, NetBox has purpose-built models for racks, devices, cables, IP prefixes, VLANs, and so on. These are very straightforward to use. However, you'll inevitably reach the limits of NetBox's data model and question what additional data might make sense to record in NetBox. For example, you might wonder whether NetBox should function as the source of truth for infrastructure DNS records or DHCP scopes.</p> <p>NetBox provides two core mechanisms for extending its data model. The first is custom fields: Most models in NetBox support the addition of custom fields to hold additional data for which a built-in field does not exist. For example, you might wish to add an \"inventory ID\" field to the device model. The second mechanism is plugins. Users can create their own plugins to introduce entirely new models, views, and API endpoints in NetBox. This can be incredibly powerful, as it enables rapid development and tight integration with core models.</p> <p>That said, it doesn't always make sense to migrate a domain of data to NetBox. For example, many organizations opt to use only the IPAM components or only the DCIM components of NetBox, and integrate with other sources of truth for different domains. This is an entirely valid approach (so long as everyone involved agrees which tool is authoritative for each domain). Ultimately, you'll need to weigh the value of having non-native data models in NetBox against the effort required to define and maintain those models.</p> <p>Consider also that NetBox is under constant development. Although the current release might not support a particular type of object, there may be plans to add support for it in a future release. (And if there aren't, consider submitting a feature request citing your use case.)</p>"
    },
    {
      "location": "getting-started/planning/#validate-existing-data",
      "title": "Validate Existing Data",
      "text": "<p>The last step before migrating data to NetBox is the most crucial: validation. The GIGO (garbage in, garbage out) principle is in full effect: Your source of truth is only as good as the data it holds. While NetBox has very powerful data validation tools (including support for custom validation rules), ultimately the onus falls to a human operator to assert what is correct and what is not. For example, NetBox can validate the connection of a cable between two interfaces, but it cannot say whether the cable should be there.</p> <p>Here are some tips to help ensure you're only importing valid data into NetBox:</p> <ul> <li>Ensure you're starting with complete, well-formatted data. JSON or CSV is highly recommended for the best portability.</li> <li>Consider defining custom validation rules in NetBox prior to import. (For example, to enforce device naming schemes.)</li> <li>Use custom scripts to automatically populate patterned data. (For example, to automatically create a set of standard VLANs for each site.)</li> </ul> <p>There are several methods available to import data into NetBox, which we'll cover in the next section.</p>"
    },
    {
      "location": "getting-started/planning/#order-of-operations",
      "title": "Order of Operations",
      "text": "<p>When starting with a completely empty database, it might not be immediately clear where to begin. Many models in NetBox rely on the advance creation of other types. For example, you cannot create a device type until after you have created its manufacturer.</p> <p>Below is the (rough) recommended order in which NetBox objects should be created or imported. While it is not required to follow this exact order, doing so will help ensure the smoothest workflow.</p> <ol> <li>Tenant groups and tenants</li> <li>Regions, site groups, sites, and locations</li> <li>Rack roles and racks</li> <li>Manufacturers, device types, and module types</li> <li>Platforms and device roles</li> <li>Devices and modules</li> <li>Providers, provider accounts, and provider networks</li> <li>Circuit types and circuits</li> <li>Wireless LAN groups and wireless LANs</li> <li>Route targets and VRFs</li> <li>RIRs and aggregates</li> <li>IP/VLAN roles</li> <li>Prefixes, IP ranges, and IP addresses</li> <li>VLAN groups and VLANs</li> <li>Cluster types, cluster groups, and clusters</li> <li>Virtual machines and VM interfaces</li> </ol> <p>This is not a comprehensive list, but should suffice for the initial data imports. Beyond these, it the order in which objects are added doesn't have much if any impact.</p> <p>The graphs below illustrate some of the core dependencies among different models in NetBox for your reference.</p> <p>Self-Nesting Models</p> <p>Each model in the graphs below which show a looping arrow pointing back to itself can be nested in a recursive hierarchy. For example, you can have regions representing both countries and cities, with the latter nested underneath the former.</p>"
    },
    {
      "location": "getting-started/planning/#tenancy",
      "title": "Tenancy",
      "text": "<pre><code>flowchart TD\n    TenantGroup --&gt; TenantGroup &amp; Tenant\n    Tenant --&gt; Site &amp; Device &amp; Prefix &amp; VLAN &amp; ...\n\nclick Device \"../../models/dcim/device/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick Site \"../../models/dcim/site/\"\nclick Tenant \"../../models/tenancy/tenant/\"\nclick TenantGroup \"../../models/tenancy/tenantgroup/\"\nclick VLAN \"../../models/ipam/vlan/\"</code></pre>"
    },
    {
      "location": "getting-started/planning/#sites-racks-and-devices",
      "title": "Sites, Racks, and Devices",
      "text": "<pre><code>flowchart TD\n    Region --&gt; Region\n    SiteGroup --&gt; SiteGroup\n    DeviceRole &amp; Platform --&gt; Device\n    Region &amp; SiteGroup --&gt; Site\n    Site --&gt; Location &amp; Device\n    Location --&gt; Location\n    Location --&gt; Rack &amp; Device\n    Rack --&gt; Device\n    Manufacturer --&gt; DeviceType &amp; ModuleType\n    DeviceType  --&gt; Device\n    Device &amp; ModuleType ---&gt; Module\n    Device &amp; Module --&gt; Interface\n\nclick Device \"../../models/dcim/device/\"\nclick DeviceRole \"../../models/dcim/devicerole/\"\nclick DeviceType \"../../models/dcim/devicetype/\"\nclick Interface \"../../models/dcim/interface/\"\nclick Location \"../../models/dcim/location/\"\nclick Manufacturer \"../../models/dcim/manufacturer/\"\nclick Module \"../../models/dcim/module/\"\nclick ModuleType \"../../models/dcim/moduletype/\"\nclick Platform \"../../models/dcim/platform/\"\nclick Rack \"../../models/dcim/rack/\"\nclick RackRole \"../../models/dcim/rackrole/\"\nclick Region \"../../models/dcim/region/\"\nclick Site \"../../models/dcim/site/\"\nclick SiteGroup \"../../models/dcim/sitegroup/\"</code></pre>"
    },
    {
      "location": "getting-started/planning/#vrfs-prefixes-ip-addresses-and-vlans",
      "title": "VRFs, Prefixes, IP Addresses, and VLANs",
      "text": "<pre><code>flowchart TD\n    VLANGroup --&gt; VLAN\n    Role --&gt; VLAN &amp; IPRange &amp; Prefix\n    RIR --&gt; Aggregate\n    RouteTarget --&gt; VRF\n    Aggregate &amp; VRF --&gt; Prefix\n    VRF --&gt; IPRange &amp; IPAddress\n    Prefix --&gt; VLAN &amp; IPRange &amp; IPAddress\n\nclick Aggregate \"../../models/ipam/aggregate/\"\nclick IPAddress \"../../models/ipam/ipaddress/\"\nclick IPRange \"../../models/ipam/iprange/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick RIR \"../../models/ipam/rir/\"\nclick Role \"../../models/ipam/role/\"\nclick VLAN \"../../models/ipam/vlan/\"\nclick VLANGroup \"../../models/ipam/vlangroup/\"\nclick VRF \"../../models/ipam/vrf/\"</code></pre>"
    },
    {
      "location": "getting-started/planning/#circuits",
      "title": "Circuits",
      "text": "<pre><code>flowchart TD\n    Provider &amp; CircuitType --&gt; Circuit\n    Provider --&gt; ProviderNetwork\n    Circuit --&gt; CircuitTermination\n\nclick Circuit \"../../models/circuits/circuit/\"\nclick CircuitTermination \"../../models/circuits/circuittermination/\"\nclick CircuitType \"../../models/circuits/circuittype/\"\nclick Provider \"../../models/circuits/provider/\"\nclick ProviderNetwork \"../../models/circuits/providernetwork/\"</code></pre>"
    },
    {
      "location": "getting-started/planning/#clusters-and-virtual-machines",
      "title": "Clusters and Virtual Machines",
      "text": "<pre><code>flowchart TD\n    ClusterGroup &amp; ClusterType --&gt; Cluster\n    Cluster --&gt; VirtualMachine\n    Site --&gt; Cluster &amp; VirtualMachine\n    Device &amp; Platform --&gt; VirtualMachine\n    VirtualMachine --&gt; VMInterface\n\nclick Cluster \"../../models/virtualization/cluster/\"\nclick ClusterGroup \"../../models/virtualization/clustergroup/\"\nclick ClusterType \"../../models/virtualization/clustertype/\"\nclick Device \"../../models/dcim/device/\"\nclick Platform \"../../models/dcim/platform/\"\nclick VirtualMachine \"../../models/virtualization/virtualmachine/\"\nclick VMInterface \"../../models/virtualization/vminterface/\"</code></pre>"
    },
    {
      "location": "getting-started/populating-data/",
      "title": "Populating Data",
      "text": "<p>This section covers the mechanisms which are available to populate data in NetBox.</p>"
    },
    {
      "location": "getting-started/populating-data/#manual-object-creation",
      "title": "Manual Object Creation",
      "text": "<p>The simplest and most direct way of populating data in NetBox is to use the object creation forms in the user interface.</p> <p>Not Ideal for Large Imports</p> <p>While convenient and readily accessible to even novice users, creating objects one at a time by manually completing these forms obviously does not scale well. For large imports, you're generally best served by using one of the other methods discussed in this section.</p> <p>To create a new object in NetBox, find the object type in the navigation menu and click the green \"Add\" button.</p> <p>Missing Button?</p> <p>If you don't see an \"add\" button for certain object types, it's likely that your account does not have sufficient permission to create these types. Ask your NetBox administrator to grant the required permissions.</p> <p>Also note that some object types, such as device components, cannot be created directly from the navigation menu. These must be created within the context of a parent object (such as a parent device).</p>"
    },
    {
      "location": "getting-started/populating-data/#bulk-import-csvyaml",
      "title": "Bulk Import (CSV/YAML)",
      "text": "<p>NetBox supports the bulk import of new objects, and updating of existing objects using CSV-formatted data. This method can be ideal for importing spreadsheet data, which is very easy to convert to CSV data. CSV data can be imported either as raw text using the form field, or by uploading a properly formatted CSV file.</p> <p>When viewing the CSV import form for an object type, you'll notice that the headers for the required columns have been pre-populated. Each form has a table beneath it titled \"CSV Field Options,\" which lists all supported columns for your reference. (Generally, these map to the fields you see in the corresponding creation form for individual objects.)</p> <p>If an \"id\" field is added the data will be used to update existing records instead of importing new objects.</p> <p>Note that some models (namely device types and module types) do not support CSV import. Instead, they accept YAML-formatted data to facilitate the import of both the parent object as well as child components.</p>"
    },
    {
      "location": "getting-started/populating-data/#scripting",
      "title": "Scripting",
      "text": "<p>Sometimes you'll find that data you need to populate in NetBox can be easily reduced to a pattern. For example, suppose you have one hundred branch sites and each site gets five VLANs, numbered 101 through 105. While it's certainly possible to explicitly define each of these 500 VLANs in a CSV file for import, it may be quicker to draft a simple custom script to automatically create these VLANs according to the pattern. This ensures a high degree of confidence in the validity of the data, since it's impossible for a script to \"miss\" a VLAN here or there.</p> <p>Reconstruct Existing Data with Scripts</p> <p>Sometimes, you might want to write a script to populate objects even if you have the necessary data ready for import. This is because using a script eliminates the need to manually verify existing data prior to import.</p>"
    },
    {
      "location": "getting-started/populating-data/#rest-api",
      "title": "REST API",
      "text": "<p>You can also use the REST API to facilitate the population of data in NetBox. The REST API offers full programmatic control over the creation of objects, subject to the same validation rules enforced by the UI forms. Additionally, the REST API supports the bulk creation of multiple objects using a single request.</p> <p>For more information about this option, see the REST API documentation.</p>"
    },
    {
      "location": "installation/",
      "title": "Installation",
      "text": "<p>NetBox Cloud</p> <p>The instructions below are for installing NetBox as a standalone, self-hosted application. For a Cloud-delivered solution, check out NetBox Cloud by NetBox Labs.</p> <p>The installation instructions provided here have been tested to work on Ubuntu 22.04 and CentOS 8.3. The particular commands needed to install dependencies on other distributions may vary significantly. Unfortunately, this is outside the control of the NetBox maintainers. Please consult your distribution's documentation for assistance with any errors.</p> <p>The following sections detail how to set up a new instance of NetBox:</p> <ol> <li>PostgreSQL database</li> <li>Redis</li> <li>NetBox components</li> <li>Gunicorn or uWSGI</li> <li>HTTP server</li> <li>LDAP authentication (optional)</li> </ol>"
    },
    {
      "location": "installation/#requirements",
      "title": "Requirements",
      "text": "Dependency Supported Versions Python 3.10, 3.11, 3.12 PostgreSQL 13+ Redis 4.0+ <p>Below is a simplified overview of the NetBox application stack for reference:</p> <p></p>"
    },
    {
      "location": "installation/#upgrading",
      "title": "Upgrading",
      "text": "<p>If you are upgrading from an existing installation, please consult the upgrading guide.</p>"
    },
    {
      "location": "installation/1-postgresql/",
      "title": "PostgreSQL Database Installation",
      "text": "<p>This section entails the installation and configuration of a local PostgreSQL database. If you already have a PostgreSQL database service in place, skip to the next section.</p> <p>PostgreSQL 13 or later required</p> <p>NetBox requires PostgreSQL 13 or later. Please note that MySQL and other relational databases are not supported.</p>"
    },
    {
      "location": "installation/1-postgresql/#installation",
      "title": "Installation",
      "text": "UbuntuCentOS <pre><code>sudo apt update\nsudo apt install -y postgresql\n</code></pre> <pre><code>sudo yum install -y postgresql-server\nsudo postgresql-setup --initdb\n</code></pre> <p>CentOS configures ident host-based authentication for PostgreSQL by default. Because NetBox will need to authenticate using a username and password, modify <code>/var/lib/pgsql/data/pg_hba.conf</code> to support MD5 authentication by changing <code>ident</code> to <code>md5</code> for the lines below:</p> <pre><code>host    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\n</code></pre> <p>Once PostgreSQL has been installed, start the service and enable it to run at boot:</p> <pre><code>sudo systemctl enable --now postgresql\n</code></pre> <p>Before continuing, verify that you have installed PostgreSQL 13 or later:</p> <pre><code>psql -V\n</code></pre>"
    },
    {
      "location": "installation/1-postgresql/#database-creation",
      "title": "Database Creation",
      "text": "<p>At a minimum, we need to create a database for NetBox and assign it a username and password for authentication. Start by invoking the PostgreSQL shell as the system Postgres user.</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Within the shell, enter the following commands to create the database and user (role), substituting your own value for the password:</p> <pre><code>CREATE DATABASE netbox;\nCREATE USER netbox WITH PASSWORD 'J5brHrAXFLQSif0K';\nALTER DATABASE netbox OWNER TO netbox;\n-- the next two commands are needed on PostgreSQL 15 and later\n\\connect netbox;\nGRANT CREATE ON SCHEMA public TO netbox;\n</code></pre> <p>Use a strong password</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your NetBox installation.</p> <p>Use UTF8 encoding</p> <p>Make sure that your database uses <code>UTF8</code> encoding (the default for new installations). Especially do not use <code>SQL_ASCII</code> encoding, as it can lead to unpredictable and unrecoverable errors. Enter <code>\\l</code> to check your encoding.</p> <p>Once complete, enter <code>\\q</code> to exit the PostgreSQL shell.</p>"
    },
    {
      "location": "installation/1-postgresql/#verify-service-status",
      "title": "Verify Service Status",
      "text": "<p>You can verify that authentication works by executing the <code>psql</code> command and passing the configured username and password. (Replace <code>localhost</code> with your database server if using a remote database.)</p> <pre><code>$ psql --username netbox --password --host localhost netbox\nPassword for user netbox: \npsql (12.5 (Ubuntu 12.5-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nnetbox=&gt; \\conninfo\nYou are connected to database \"netbox\" as user \"netbox\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nnetbox=&gt; \\q\n</code></pre> <p>If successful, you will enter a <code>netbox</code> prompt. Type <code>\\conninfo</code> to confirm your connection, or type <code>\\q</code> to exit.</p>"
    },
    {
      "location": "installation/2-redis/",
      "title": "Redis Installation",
      "text": ""
    },
    {
      "location": "installation/2-redis/#install-redis",
      "title": "Install Redis",
      "text": "<p>Redis is an in-memory key-value store which NetBox employs for caching and queuing. This section entails the installation and configuration of a local Redis instance. If you already have a Redis service in place, skip to the next section.</p> UbuntuCentOS <pre><code>sudo apt install -y redis-server\n</code></pre> <pre><code>sudo yum install -y redis\nsudo systemctl enable --now redis\n</code></pre> <p>Before continuing, verify that your installed version of Redis is at least v4.0:</p> <pre><code>redis-server -v\n</code></pre> <p>You may wish to modify the Redis configuration at <code>/etc/redis.conf</code> or <code>/etc/redis/redis.conf</code>, however in most cases the default configuration is sufficient.</p>"
    },
    {
      "location": "installation/2-redis/#verify-service-status",
      "title": "Verify Service Status",
      "text": "<p>Use the <code>redis-cli</code> utility to ensure the Redis service is functional:</p> <pre><code>redis-cli ping\n</code></pre> <p>If successful, you should receive a <code>PONG</code> response from the server.</p>"
    },
    {
      "location": "installation/3-netbox/",
      "title": "NetBox Installation",
      "text": "<p>This section of the documentation discusses installing and configuring the NetBox application itself.</p>"
    },
    {
      "location": "installation/3-netbox/#install-system-packages",
      "title": "Install System Packages",
      "text": "<p>Begin by installing all system packages required by NetBox and its dependencies.</p> <p>Python 3.10 or later required</p> <p>NetBox supports Python 3.10, 3.11, and 3.12.</p> UbuntuCentOS <pre><code>sudo apt install -y python3 python3-pip python3-venv python3-dev build-essential libxml2-dev libxslt1-dev libffi-dev libpq-dev libssl-dev zlib1g-dev\n</code></pre> <pre><code>sudo yum install -y gcc libxml2-devel libxslt-devel libffi-devel libpq-devel openssl-devel redhat-rpm-config\n</code></pre> <p>Before continuing, check that your installed Python version is at least 3.10:</p> <pre><code>python3 -V\n</code></pre>"
    },
    {
      "location": "installation/3-netbox/#download-netbox",
      "title": "Download NetBox",
      "text": "<p>This documentation provides two options for installing NetBox: from a downloadable archive, or from the git repository. Installing from a package (option A below) requires manually fetching and extracting the archive for every future update, whereas installation via git (option B) allows for seamless upgrades by checking out the latest release tag.</p>"
    },
    {
      "location": "installation/3-netbox/#option-a-download-a-release-archive",
      "title": "Option A: Download a Release Archive",
      "text": "<p>Download the latest stable release from GitHub as a tarball or ZIP archive and extract it to your desired path. In this example, we'll use <code>/opt/netbox</code> as the NetBox root.</p> <pre><code>sudo wget https://github.com/netbox-community/netbox/archive/refs/tags/vX.Y.Z.tar.gz\nsudo tar -xzf vX.Y.Z.tar.gz -C /opt\nsudo ln -s /opt/netbox-X.Y.Z/ /opt/netbox\n</code></pre> <p>Note</p> <p>It is recommended to install NetBox in a directory named for its version number. For example, NetBox v3.0.0 would be installed into <code>/opt/netbox-3.0.0</code>, and a symlink from <code>/opt/netbox/</code> would point to this location. (You can verify this configuration with the command <code>ls -l /opt | grep netbox</code>.) This allows for future releases to be installed in parallel without interrupting the current installation. When changing to the new release, only the symlink needs to be updated.</p>"
    },
    {
      "location": "installation/3-netbox/#option-b-clone-the-git-repository",
      "title": "Option B: Clone the Git Repository",
      "text": "<p>Create the base directory for the NetBox installation. For this guide, we'll use <code>/opt/netbox</code>.</p> <pre><code>sudo mkdir -p /opt/netbox/\ncd /opt/netbox/\n</code></pre> <p>If <code>git</code> is not already installed, install it:</p> UbuntuCentOS <pre><code>sudo apt install -y git\n</code></pre> <pre><code>sudo yum install -y git\n</code></pre> <p>Next, clone the git repository:</p> <pre><code>sudo git clone https://github.com/netbox-community/netbox.git .\n</code></pre> <p>This command should generate output similar to the following:</p> <pre><code>Cloning into '.'...\nremote: Enumerating objects: 996, done.\nremote: Counting objects: 100% (996/996), done.\nremote: Compressing objects: 100% (935/935), done.\nremote: Total 996 (delta 148), reused 386 (delta 34), pack-reused 0\nReceiving objects: 100% (996/996), 4.26 MiB | 9.81 MiB/s, done.\nResolving deltas: 100% (148/148), done.\n</code></pre> <p>Finally, check out the tag for the desired release. You can find these on our releases page. Replace <code>vX.Y.Z</code> with your selected release tag below.</p> <pre><code>sudo git checkout vX.Y.Z\n</code></pre> <p>Using this installation method enables easy upgrades in the future by simply checking out the latest release tag.</p>"
    },
    {
      "location": "installation/3-netbox/#create-the-netbox-system-user",
      "title": "Create the NetBox System User",
      "text": "<p>Create a system user account named <code>netbox</code>. We'll configure the WSGI and HTTP services to run under this account. We'll also assign this user ownership of the media directory. This ensures that NetBox will be able to save uploaded files.</p> UbuntuCentOS <pre><code>sudo adduser --system --group netbox\nsudo chown --recursive netbox /opt/netbox/netbox/media/\nsudo chown --recursive netbox /opt/netbox/netbox/reports/\nsudo chown --recursive netbox /opt/netbox/netbox/scripts/\n</code></pre> <pre><code>sudo groupadd --system netbox\nsudo adduser --system -g netbox netbox\nsudo chown --recursive netbox /opt/netbox/netbox/media/\nsudo chown --recursive netbox /opt/netbox/netbox/reports/\nsudo chown --recursive netbox /opt/netbox/netbox/scripts/\n</code></pre>"
    },
    {
      "location": "installation/3-netbox/#configuration",
      "title": "Configuration",
      "text": "<p>Move into the NetBox configuration directory and make a copy of <code>configuration_example.py</code> named <code>configuration.py</code>. This file will hold all of your local configuration parameters.</p> <pre><code>cd /opt/netbox/netbox/netbox/\nsudo cp configuration_example.py configuration.py\n</code></pre> <p>Open <code>configuration.py</code> with your preferred editor to begin configuring NetBox. NetBox offers many configuration parameters, but only the following four are required for new installations:</p> <ul> <li><code>ALLOWED_HOSTS</code></li> <li><code>DATABASE</code></li> <li><code>REDIS</code></li> <li><code>SECRET_KEY</code></li> </ul>"
    },
    {
      "location": "installation/3-netbox/#allowed_hosts",
      "title": "ALLOWED_HOSTS",
      "text": "<p>This is a list of the valid hostnames and IP addresses by which this server can be reached. You must specify at least one name or IP address. (Note that this does not restrict the locations from which NetBox may be accessed: It is merely for HTTP host header validation.)</p> <pre><code>ALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']\n</code></pre> <p>If you are not yet sure what the domain name and/or IP address of the NetBox installation will be, you can set this to a wildcard (asterisk) to allow all host values:</p> <pre><code>ALLOWED_HOSTS = ['*']\n</code></pre>"
    },
    {
      "location": "installation/3-netbox/#database",
      "title": "DATABASE",
      "text": "<p>This parameter holds the database configuration details. You must define the username and password used when you configured PostgreSQL. If the service is running on a remote host, update the <code>HOST</code> and <code>PORT</code> parameters accordingly. See the configuration documentation for more detail on individual parameters.</p> <pre><code>DATABASE = {\n    'NAME': 'netbox',               # Database name\n    'USER': 'netbox',               # PostgreSQL username\n    'PASSWORD': 'J5brHrAXFLQSif0K', # PostgreSQL password\n    'HOST': 'localhost',            # Database server\n    'PORT': '',                     # Database port (leave blank for default)\n    'CONN_MAX_AGE': 300,            # Max database connection age (seconds)\n}\n</code></pre>"
    },
    {
      "location": "installation/3-netbox/#redis",
      "title": "REDIS",
      "text": "<p>Redis is a in-memory key-value store used by NetBox for caching and background task queuing. Redis typically requires minimal configuration; the values below should suffice for most installations. See the configuration documentation for more detail on individual parameters.</p> <p>Note that NetBox requires the specification of two separate Redis databases: <code>tasks</code> and <code>caching</code>. These may both be provided by the same Redis service, however each should have a unique numeric database ID.</p> <pre><code>REDIS = {\n    'tasks': {\n        'HOST': 'localhost',      # Redis server\n        'PORT': 6379,             # Redis port\n        'PASSWORD': '',           # Redis password (optional)\n        'DATABASE': 0,            # Database ID\n        'SSL': False,             # Use SSL (optional)\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'PASSWORD': '',\n        'DATABASE': 1,            # Unique ID for second database\n        'SSL': False,\n    }\n}\n</code></pre>"
    },
    {
      "location": "installation/3-netbox/#secret_key",
      "title": "SECRET_KEY",
      "text": "<p>This parameter must be assigned a randomly-generated key employed as a salt for hashing and related cryptographic functions. (Note, however, that it is never directly used in the encryption of secret data.) This key must be unique to this installation and is recommended to be at least 50 characters long. It should not be shared outside the local system.</p> <p>A simple Python script named <code>generate_secret_key.py</code> is provided in the parent directory to assist in generating a suitable key:</p> <pre><code>python3 ../generate_secret_key.py\n</code></pre> <p>SECRET_KEY values must match</p> <p>In the case of a highly available installation with multiple web servers, <code>SECRET_KEY</code> must be identical among all servers in order to maintain a persistent user session state.</p> <p>When you have finished modifying the configuration, remember to save the file.</p>"
    },
    {
      "location": "installation/3-netbox/#optional-requirements",
      "title": "Optional Requirements",
      "text": "<p>All Python packages required by NetBox are listed in <code>requirements.txt</code> and will be installed automatically. NetBox also supports some optional packages. If desired, these packages must be listed in <code>local_requirements.txt</code> within the NetBox root directory.</p>"
    },
    {
      "location": "installation/3-netbox/#remote-file-storage",
      "title": "Remote File Storage",
      "text": "<p>By default, NetBox will use the local filesystem to store uploaded files. To use a remote filesystem, install the <code>django-storages</code> library and configure your desired storage backend in <code>configuration.py</code>.</p> <pre><code>sudo sh -c \"echo 'django-storages' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre>"
    },
    {
      "location": "installation/3-netbox/#remote-data-sources",
      "title": "Remote Data Sources",
      "text": "<p>NetBox supports integration with several remote data sources via configurable backends. Each of these requires the installation of one or more additional libraries.</p> <ul> <li>Amazon S3: <code>boto3</code></li> <li>Git: <code>dulwich</code></li> </ul> <p>For example, to enable the Amazon S3 backend, add <code>boto3</code> to your local requirements file:</p> <pre><code>sudo sh -c \"echo 'boto3' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre> <p>Info</p> <p>These packages were previously required in NetBox v3.5 but now are optional.</p>"
    },
    {
      "location": "installation/3-netbox/#sentry-integration",
      "title": "Sentry Integration",
      "text": "<p>NetBox may be configured to send error reports to Sentry for analysis. This integration requires installation of the <code>sentry-sdk</code> Python library.</p> <pre><code>sudo sh -c \"echo 'sentry-sdk' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre> <p>Info</p> <p>Sentry integration was previously included by default in NetBox v3.6 but is now optional.</p>"
    },
    {
      "location": "installation/3-netbox/#run-the-upgrade-script",
      "title": "Run the Upgrade Script",
      "text": "<p>Once NetBox has been configured, we're ready to proceed with the actual installation. We'll run the packaged upgrade script (<code>upgrade.sh</code>) to perform the following actions:</p> <ul> <li>Create a Python virtual environment</li> <li>Installs all required Python packages</li> <li>Run database schema migrations</li> <li>Builds the documentation locally (for offline use)</li> <li>Aggregate static resource files on disk</li> </ul> <p>Warning</p> <p>If you still have a Python virtual environment active from a previous installation step, disable it now by running the <code>deactivate</code> command. This will avoid errors on systems where <code>sudo</code> has been configured to preserve the user's current environment.</p> <pre><code>sudo /opt/netbox/upgrade.sh\n</code></pre> <p>Note that Python 3.10 or later is required for NetBox v4.0 and later releases. If the default Python installation on your server is set to a lesser version,  pass the path to the supported installation as an environment variable named <code>PYTHON</code>. (Note that the environment variable must be passed after the <code>sudo</code> command.)</p> <pre><code>sudo PYTHON=/usr/bin/python3.10 /opt/netbox/upgrade.sh\n</code></pre> <p>Note</p> <p>Upon completion, the upgrade script may warn that no existing virtual environment was detected. As this is a new installation, this warning can be safely ignored.</p>"
    },
    {
      "location": "installation/3-netbox/#create-a-super-user",
      "title": "Create a Super User",
      "text": "<p>NetBox does not come with any predefined user accounts. You'll need to create a super user (administrative account) to be able to log into NetBox. First, enter the Python virtual environment created by the upgrade script:</p> <pre><code>source /opt/netbox/venv/bin/activate\n</code></pre> <p>Once the virtual environment has been activated, you should notice the string <code>(venv)</code> prepended to your console prompt.</p> <p>Next, we'll create a superuser account using the <code>createsuperuser</code> Django management command (via <code>manage.py</code>). Specifying an email address for the user is not required, but be sure to use a very strong password.</p> <pre><code>cd /opt/netbox/netbox\npython3 manage.py createsuperuser\n</code></pre>"
    },
    {
      "location": "installation/3-netbox/#schedule-the-housekeeping-task",
      "title": "Schedule the Housekeeping Task",
      "text": "<p>NetBox includes a <code>housekeeping</code> management command that handles some recurring cleanup tasks, such as clearing out old sessions and expired change records. Although this command may be run manually, it is recommended to configure a scheduled job using the system's <code>cron</code> daemon or a similar utility.</p> <p>A shell script which invokes this command is included at <code>contrib/netbox-housekeeping.sh</code>. It can be copied to or linked from your system's daily cron task directory, or included within the crontab directly. (If installing NetBox into a nonstandard path, be sure to update the system paths within this script first.)</p> <pre><code>sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n</code></pre> <p>See the housekeeping documentation for further details.</p>"
    },
    {
      "location": "installation/3-netbox/#test-the-application",
      "title": "Test the Application",
      "text": "<p>At this point, we should be able to run NetBox's development server for testing. We can check by starting a development instance locally.</p> <p>Tip</p> <p>Check that the Python virtual environment is still active before attempting to run the server.</p> <pre><code>python3 manage.py runserver 0.0.0.0:8000 --insecure\n</code></pre> <p>If successful, you should see output similar to the following:</p> <pre><code>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nAugust 30, 2021 - 18:02:23\nDjango version 3.2.6, using settings 'netbox.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> <p>Next, connect to the name or IP of the server (as defined in <code>ALLOWED_HOSTS</code>) on port 8000; for example, http://127.0.0.1:8000/. You should be greeted with the NetBox home page. Try logging in using the username and password specified when creating a superuser.</p> <p>Note</p> <p>By default RHEL based distros will likely block your testing attempts with firewalld. The development server port can be opened with <code>firewall-cmd</code> (add <code>--permanent</code> if you want the rule to survive server restarts):</p> <pre><code>firewall-cmd --zone=public --add-port=8000/tcp\n</code></pre> <p>Not for production use</p> <p>The development server is for development and testing purposes only. It is neither performant nor secure enough for production use. Do not use it in production.</p> <p>Warning</p> <p>If the test service does not run, or you cannot reach the NetBox home page, something has gone wrong. Do not proceed with the rest of this guide until the installation has been corrected.</p> <p>Type <code>Ctrl+c</code> to stop the development server.</p>"
    },
    {
      "location": "installation/4a-gunicorn/",
      "title": "Gunicorn",
      "text": "<p>Tip</p> <p>This page provides instructions for setting up the gunicorn WSGI server. If you plan to use uWSGI instead, go here.</p> <p>NetBox runs as a WSGI application behind an HTTP server. This documentation shows how to install and configure gunicorn (which is automatically installed with NetBox) for this role, however other WSGI servers are available and should work similarly well.</p>"
    },
    {
      "location": "installation/4a-gunicorn/#configuration",
      "title": "Configuration",
      "text": "<p>NetBox ships with a default configuration file for gunicorn. To use it, copy <code>/opt/netbox/contrib/gunicorn.py</code> to <code>/opt/netbox/gunicorn.py</code>. (We make a copy of this file rather than pointing to it directly to ensure that any local changes to it do not get overwritten during a future NetBox upgrade.)</p> <pre><code>sudo cp /opt/netbox/contrib/gunicorn.py /opt/netbox/gunicorn.py\n</code></pre> <p>While the provided configuration should suffice for most initial installations, you may wish to edit this file to change the bound IP address and/or port number, or to make performance-related adjustments. See the Gunicorn documentation for the available configuration parameters.</p>"
    },
    {
      "location": "installation/4a-gunicorn/#systemd-setup",
      "title": "systemd Setup",
      "text": "<p>We'll use systemd to control both gunicorn and NetBox's background worker process. First, copy <code>contrib/netbox.service</code> and <code>contrib/netbox-rq.service</code> to the <code>/etc/systemd/system/</code> directory and reload the systemd daemon.</p> <p>Check user &amp; group assignment</p> <p>The stock service configuration files packaged with NetBox assume that the service will run with the <code>netbox</code> user and group names. If these differ on your installation, be sure to update the service files accordingly.</p> <pre><code>sudo cp -v /opt/netbox/contrib/*.service /etc/systemd/system/\nsudo systemctl daemon-reload\n</code></pre> <p>Then, start the <code>netbox</code> and <code>netbox-rq</code> services and enable them to initiate at boot time:</p> <pre><code>sudo systemctl enable --now netbox netbox-rq\n</code></pre> <p>You can use the command <code>systemctl status netbox</code> to verify that the WSGI service is running:</p> <pre><code>systemctl status netbox.service\n</code></pre> <p>You should see output similar to the following:</p> <pre><code>\u25cf netbox.service - NetBox WSGI Service\n     Loaded: loaded (/etc/systemd/system/netbox.service; enabled; vendor preset: enabled)\n     Active: active (running) since Mon 2021-08-30 04:02:36 UTC; 14h ago\n       Docs: https://docs.netbox.dev/\n   Main PID: 1140492 (gunicorn)\n      Tasks: 19 (limit: 4683)\n     Memory: 666.2M\n     CGroup: /system.slice/netbox.service\n             \u251c\u25001140492 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/gunicorn --pid /va&gt;\n             \u251c\u25001140513 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/gunicorn --pid /va&gt;\n             \u251c\u25001140514 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/gunicorn --pid /va&gt;\n...\n</code></pre> <p>Note</p> <p>If the NetBox service fails to start, issue the command <code>journalctl -eu netbox</code> to check for log messages that may indicate the problem.</p> <p>Once you've verified that the WSGI workers are up and running, move on to HTTP server setup.</p> <p>Note</p> <p>There is a bug in the current stable release of gunicorn (v21.2.0) where automatic restarts of the worker processes can result in 502 errors under heavy load. (See gunicorn bug #3038 for more detail.) Users who encounter this issue may opt to downgrade to an earlier, unaffected release of gunicorn (<code>pip install gunicorn==20.1.0</code>). Note, however, that this earlier release does not officially support Python 3.11.</p>"
    },
    {
      "location": "installation/4b-uwsgi/",
      "title": "uWSGI",
      "text": "<p>Tip</p> <p>This page provides instructions for setting up the uWSGI WSGI server. If you plan to use gunicorn instead, go here.</p> <p>NetBox runs as a WSGI application behind an HTTP server. This documentation shows how to install and configure uWSGI for this role, however other WSGI servers are available and should work similarly well.</p>"
    },
    {
      "location": "installation/4b-uwsgi/#installation",
      "title": "Installation",
      "text": "<p>Activate the Python virtual environment and install the <code>pyuwsgi</code> package using pip:</p> <pre><code>source /opt/netbox/venv/bin/activate\npip3 install pyuwsgi\n</code></pre> <p>Once installed, add the package to <code>local_requirements.txt</code> to ensure it is re-installed during future rebuilds of the virtual environment:</p> <pre><code>sudo sh -c \"echo 'pyuwsgi' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre>"
    },
    {
      "location": "installation/4b-uwsgi/#configuration",
      "title": "Configuration",
      "text": "<p>NetBox ships with a default configuration file for uWSGI. To use it, copy <code>/opt/netbox/contrib/uwsgi.ini</code> to <code>/opt/netbox/uwsgi.ini</code>. (We make a copy of this file rather than pointing to it directly to ensure that any local changes to it do not get overwritten during a future NetBox upgrade.)</p> <pre><code>sudo cp /opt/netbox/contrib/uwsgi.ini /opt/netbox/uwsgi.ini\n</code></pre> <p>While the provided configuration should suffice for most initial installations, you may wish to edit this file to change the bound IP address and/or port number, or to make performance-related adjustments. See the uWSGI documentation for the available configuration parameters and take a minute to review the Things to know page. Django also provides additional documentation on configuring uWSGI with a Django app.</p>"
    },
    {
      "location": "installation/4b-uwsgi/#systemd-setup",
      "title": "systemd Setup",
      "text": "<p>We'll use systemd to control both uWSGI and NetBox's background worker process. First, copy <code>contrib/netbox.service</code> and <code>contrib/netbox-rq.service</code> to the <code>/etc/systemd/system/</code> directory.</p> <pre><code>sudo cp -v /opt/netbox/contrib/*.service /etc/systemd/system/\nsudo systemctl daemon-reload\n</code></pre> <p>The reference configuration assumes that gunicorn is in use, so we need to update it. Edit the <code>netbox.service</code> file to remove the line beginning with <code>ExecStart=/opt/netbox/venv/bin/gunicorn</code> and uncomment the line below it.</p> <p>Check user &amp; group assignment</p> <p>The stock service configuration files packaged with NetBox assume that the service will run with the <code>netbox</code> user and group names. If these differ on your installation, be sure to update the service files accordingly.</p> <p>Once the configuration file has been saved, reload the service:</p> <pre><code>sudo systemctl daemon-reload\n</code></pre> <p>Then, start the <code>netbox</code> and <code>netbox-rq</code> services and enable them to initiate at boot time:</p> <pre><code>sudo systemctl enable --now netbox netbox-rq\n</code></pre> <p>You can use the command <code>systemctl status netbox</code> to verify that the WSGI service is running:</p> <pre><code>systemctl status netbox.service\n</code></pre> <p>You should see output similar to the following:</p> <pre><code>\u25cf netbox.service - NetBox WSGI Service\n     Loaded: loaded (/etc/systemd/system/netbox.service; enabled; vendor preset: enabled)\n     Active: active (running) since Mon 2021-08-30 04:02:36 UTC; 14h ago\n       Docs: https://docs.netbox.dev/\n   Main PID: 1140492 (uwsgi)\n      Tasks: 19 (limit: 4683)\n     Memory: 666.2M\n     CGroup: /system.slice/netbox.service\n             \u251c\u25001061 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/uwsgi --ini /opt/netbox/uwsgi.ini\n             \u251c\u25001976 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/uwsgi --ini /opt/netbox/uwsgi.ini\n...\n</code></pre> <p>Note</p> <p>If the NetBox service fails to start, issue the command <code>journalctl -eu netbox</code> to check for log messages that may indicate the problem.</p> <p>Once you've verified that the WSGI workers are up and running, move on to HTTP server setup.</p>"
    },
    {
      "location": "installation/4b-uwsgi/#http-server-installation",
      "title": "HTTP Server Installation",
      "text": "<p>For server installation, you will want to follow the NetBox HTTP Server Setup guide, however after copying the configuration file, you will need to edit the file and change the <code>location</code> section to uncomment the uWSGI parameters:</p> <pre><code>    location / {\n        # proxy_pass http://127.0.0.1:8001;\n        # proxy_set_header X-Forwarded-Host $http_host;\n        # proxy_set_header X-Real-IP $remote_addr;\n        # proxy_set_header X-Forwarded-Proto $scheme;\n        # comment the lines above and uncomment the lines below if using uWSGI\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8001;\n        uwsgi_param Host $host;\n        uwsgi_param X-Real-IP $remote_addr;\n        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;\n        uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;\n    }\n</code></pre>"
    },
    {
      "location": "installation/5-http-server/",
      "title": "HTTP Server Setup",
      "text": "<p>This documentation provides example configurations for both nginx and Apache, though any HTTP server which supports WSGI should be compatible.</p> <p>Info</p> <p>For the sake of brevity, only Ubuntu 20.04 instructions are provided here. These tasks are not unique to NetBox and should carry over to other distributions with minimal changes. Please consult your distribution's documentation for assistance if needed.</p>"
    },
    {
      "location": "installation/5-http-server/#obtain-an-ssl-certificate",
      "title": "Obtain an SSL Certificate",
      "text": "<p>To enable HTTPS access to NetBox, you'll need a valid SSL certificate. You can purchase one from a trusted commercial provider, obtain one for free from Let's Encrypt, or generate your own (although self-signed certificates are generally untrusted). Both the public certificate and private key files need to be installed on your NetBox server in a location that is readable by the <code>netbox</code> user.</p> <p>The command below can be used to generate a self-signed certificate for testing purposes, however it is strongly recommended to use a certificate from a trusted authority in production. Two files will be created: the public certificate (<code>netbox.crt</code>) and the private key (<code>netbox.key</code>). The certificate is published to the world, whereas the private key must be kept secret at all times.</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n-keyout /etc/ssl/private/netbox.key \\\n-out /etc/ssl/certs/netbox.crt\n</code></pre> <p>The above command will prompt you for additional details of the certificate; all of these are optional.</p>"
    },
    {
      "location": "installation/5-http-server/#http-server-installation",
      "title": "HTTP Server Installation",
      "text": ""
    },
    {
      "location": "installation/5-http-server/#option-a-nginx",
      "title": "Option A: nginx",
      "text": "<p>Begin by installing nginx:</p> <pre><code>sudo apt install -y nginx\n</code></pre> <p>Once nginx is installed, copy the nginx configuration file provided by NetBox to <code>/etc/nginx/sites-available/netbox</code>. Be sure to replace <code>netbox.example.com</code> with the domain name or IP address of your installation. (This should match the value configured for <code>ALLOWED_HOSTS</code> in <code>configuration.py</code>.)</p> <pre><code>sudo cp /opt/netbox/contrib/nginx.conf /etc/nginx/sites-available/netbox\n</code></pre> <p>gunicorn vs. uWSGI</p> <p>The reference nginx configuration file assumes that gunicorn is in use. If using uWSGI instead, you'll need to remove the gunicorn-specific configuration (lines beginning with <code>proxy_pass</code> and <code>proxy_set_header</code>) and uncomment the uWSGI section below them before proceeding.</p> <p>Then, delete <code>/etc/nginx/sites-enabled/default</code> and create a symlink in the <code>sites-enabled</code> directory to the configuration file you just created.</p> <pre><code>sudo rm /etc/nginx/sites-enabled/default\nsudo ln -s /etc/nginx/sites-available/netbox /etc/nginx/sites-enabled/netbox\n</code></pre> <p>Finally, restart the <code>nginx</code> service to use the new configuration.</p> <pre><code>sudo systemctl restart nginx\n</code></pre>"
    },
    {
      "location": "installation/5-http-server/#option-b-apache",
      "title": "Option B: Apache",
      "text": "<p>Begin by installing Apache:</p> <pre><code>sudo apt install -y apache2\n</code></pre> <p>Next, copy the default configuration file to <code>/etc/apache2/sites-available/</code>. Be sure to modify the <code>ServerName</code> parameter appropriately.</p> <pre><code>sudo cp /opt/netbox/contrib/apache.conf /etc/apache2/sites-available/netbox.conf\n</code></pre> <p>Finally, ensure that the required Apache modules are enabled, enable the <code>netbox</code> site, and reload Apache:</p> <pre><code>sudo a2enmod ssl proxy proxy_http headers rewrite\nsudo a2ensite netbox\nsudo systemctl restart apache2\n</code></pre>"
    },
    {
      "location": "installation/5-http-server/#confirm-connectivity",
      "title": "Confirm Connectivity",
      "text": "<p>At this point, you should be able to connect to the HTTPS service at the server name or IP address you provided.</p> <p>Info</p> <p>Please keep in mind that the configurations provided here are bare minimums required to get NetBox up and running. You may want to make adjustments to better suit your production environment.</p> <p>Warning</p> <p>Certain components of NetBox (such as the display of rack elevation diagrams) rely on the use of embedded objects. Ensure that your HTTP server configuration does not override the <code>X-Frame-Options</code> response header set by NetBox.</p>"
    },
    {
      "location": "installation/5-http-server/#troubleshooting",
      "title": "Troubleshooting",
      "text": "<p>If you are unable to connect to the HTTP server, check that:</p> <ul> <li>Nginx/Apache is running and configured to listen on the correct port.</li> <li>Access is not being blocked by a firewall somewhere along the path. (Try connecting locally from the server itself.)</li> </ul> <p>If you are able to connect but receive a 502 (bad gateway) error, check the following:</p> <ul> <li>The WSGI worker processes (gunicorn) are running (<code>systemctl status netbox</code> should show a status of \"active (running)\")</li> <li>Nginx/Apache is configured to connect to the port on which gunicorn is listening (default is 8001).</li> <li>SELinux is not preventing the reverse proxy connection. You may need to allow HTTP network connections with the command <code>setsebool -P httpd_can_network_connect 1</code></li> </ul>"
    },
    {
      "location": "installation/6-ldap/",
      "title": "LDAP Configuration",
      "text": "<p>This guide explains how to implement LDAP authentication using an external server. User authentication will fall back to built-in Django users in the event of a failure.</p>"
    },
    {
      "location": "installation/6-ldap/#install-requirements",
      "title": "Install Requirements",
      "text": ""
    },
    {
      "location": "installation/6-ldap/#install-system-packages",
      "title": "Install System Packages",
      "text": "<p>On Ubuntu:</p> <pre><code>sudo apt install -y libldap2-dev libsasl2-dev libssl-dev\n</code></pre> <p>On CentOS:</p> <pre><code>sudo yum install -y openldap-devel python3-devel\n</code></pre>"
    },
    {
      "location": "installation/6-ldap/#install-django-auth-ldap",
      "title": "Install django-auth-ldap",
      "text": "<p>Activate the Python virtual environment and install the <code>django-auth-ldap</code> package using pip:</p> <pre><code>source /opt/netbox/venv/bin/activate\npip3 install django-auth-ldap\n</code></pre> <p>Once installed, add the package to <code>local_requirements.txt</code> to ensure it is re-installed during future rebuilds of the virtual environment:</p> <pre><code>sudo sh -c \"echo 'django-auth-ldap' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre>"
    },
    {
      "location": "installation/6-ldap/#configuration",
      "title": "Configuration",
      "text": "<p>First, enable the LDAP authentication backend in <code>configuration.py</code>. (Be sure to overwrite this definition if it is already set to <code>RemoteUserBackend</code>.)</p> <pre><code>REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'\n</code></pre> <p>Next, create a file in the same directory as <code>configuration.py</code> (typically <code>/opt/netbox/netbox/netbox/</code>) named <code>ldap_config.py</code>. Define all of the parameters required below in <code>ldap_config.py</code>. Complete documentation of all <code>django-auth-ldap</code> configuration options is included in the project's official documentation.</p>"
    },
    {
      "location": "installation/6-ldap/#general-server-configuration",
      "title": "General Server Configuration",
      "text": "<p>Info</p> <p>When using Active Directory you may need to specify a port on <code>AUTH_LDAP_SERVER_URI</code> to authenticate users from all domains in the forest. Use <code>3269</code> for secure, or <code>3268</code> for non-secure access to the GC (Global Catalog).</p> <pre><code>import ldap\n\n# Server URI\nAUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com\"\n\n# The following may be needed if you are binding to Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_REFERRALS: 0\n}\n\n# Set the DN and password for the NetBox service account.\nAUTH_LDAP_BIND_DN = \"CN=NETBOXSA, OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n\n# Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)\nLDAP_IGNORE_CERT_ERRORS = True\n\n# Include this setting if you want to validate the LDAP server certificates against a CA certificate directory on your server\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTDIR, LDAP_CA_CERT_DIR)\nLDAP_CA_CERT_DIR = '/etc/ssl/certs'\n\n# Include this setting if you want to validate the LDAP server certificates against your own CA.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, LDAP_CA_CERT_FILE)\nLDAP_CA_CERT_FILE = '/path/to/example-CA.crt'\n</code></pre> <p>STARTTLS can be configured by setting <code>AUTH_LDAP_START_TLS = True</code> and using the <code>ldap://</code> URI scheme.</p>"
    },
    {
      "location": "installation/6-ldap/#user-authentication",
      "title": "User Authentication",
      "text": "<p>Info</p> <p>When using Windows Server 2012+, <code>AUTH_LDAP_USER_DN_TEMPLATE</code> should be set to None.</p> <pre><code>from django_auth_ldap.config import LDAPSearch\n\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"ou=Users,dc=example,dc=com\",\n                                    ldap.SCOPE_SUBTREE,\n                                    \"(sAMAccountName=%(user)s)\")\n\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = \"uid=%(user)s,ou=users,dc=example,dc=com\"\n\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n    \"email\": \"mail\"\n}\n</code></pre>"
    },
    {
      "location": "installation/6-ldap/#user-groups-for-permissions",
      "title": "User Groups for Permissions",
      "text": "<p>Info</p> <p>When using Microsoft Active Directory, support for nested groups can be activated by using <code>NestedGroupOfNamesType()</code> instead of <code>GroupOfNamesType()</code> for <code>AUTH_LDAP_GROUP_TYPE</code>. You will also need to modify the import line to use <code>NestedGroupOfNamesType</code> instead of <code>GroupOfNamesType</code> .</p> <pre><code>from django_auth_ldap.config import LDAPSearch, GroupOfNamesType\n\n# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group\n# hierarchy.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\"dc=example,dc=com\", ldap.SCOPE_SUBTREE,\n                                    \"(objectClass=group)\")\nAUTH_LDAP_GROUP_TYPE = GroupOfNamesType()\n\n# Define a group required to login.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=NETBOX_USERS,DC=example,DC=com\"\n\n# Mirror LDAP group assignments.\nAUTH_LDAP_MIRROR_GROUPS = True\n\n# Define special user types using groups. Exercise great caution when assigning superuser status.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n    \"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n    \"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n    \"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n\n# For more granular permissions, we can map LDAP groups to Django groups.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n\n# Cache groups for one hour to reduce LDAP traffic\nAUTH_LDAP_CACHE_TIMEOUT = 3600\n</code></pre> <ul> <li><code>is_active</code> - All users must be mapped to at least this group to enable authentication. Without this, users cannot log in.</li> <li><code>is_staff</code> - Users mapped to this group are enabled for access to the administration tools; this is the equivalent of checking the \"staff status\" box on a manually created user. This doesn't grant any specific permissions.</li> <li><code>is_superuser</code> - Users mapped to this group will be granted superuser status. Superusers are implicitly granted all permissions.</li> </ul> <p>Warning</p> <p>Authentication will fail if the groups (the distinguished names) do not exist in the LDAP directory.</p>"
    },
    {
      "location": "installation/6-ldap/#authenticating-with-active-directory",
      "title": "Authenticating with Active Directory",
      "text": "<p>Integrating Active Directory for authentication can be a bit challenging as it may require handling different login formats. This solution will allow users to log in either using their full User Principal Name (UPN) or their username alone, by filtering the DN according to either the <code>sAMAccountName</code> or the <code>userPrincipalName</code>. The following configuration options will allow your users to enter their usernames in the format <code>username</code> or <code>username@domain.tld</code>.</p> <p>Just as before, the configuration options are defined in the file ldap_config.py. First, modify the <code>AUTH_LDAP_USER_SEARCH</code> option to match the following:</p> <pre><code>AUTH_LDAP_USER_SEARCH = LDAPSearch(\n    \"ou=Users,dc=example,dc=com\",\n    ldap.SCOPE_SUBTREE,\n    \"(|(userPrincipalName=%(user)s)(sAMAccountName=%(user)s))\"\n)\n</code></pre> <p>In addition, <code>AUTH_LDAP_USER_DN_TEMPLATE</code> should be set to <code>None</code> as described in the previous sections. Next, modify <code>AUTH_LDAP_USER_ATTR_MAP</code> to match the following:</p> <pre><code>AUTH_LDAP_USER_ATTR_MAP = {\n    \"username\": \"sAMAccountName\",\n    \"email\": \"mail\",\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n}\n</code></pre> <p>Finally, we need to add one more configuration option, <code>AUTH_LDAP_USER_QUERY_FIELD</code>. The following should be added to your LDAP configuration file:</p> <pre><code>AUTH_LDAP_USER_QUERY_FIELD = \"username\"\n</code></pre> <p>With these configuration options, your users will be able to log in either with or without the UPN suffix.</p>"
    },
    {
      "location": "installation/6-ldap/#example-configuration",
      "title": "Example Configuration",
      "text": "<p>Info</p> <p>This configuration is intended to serve as a template, but may need to be modified in accordance with your environment.</p> <pre><code>import ldap\nfrom django_auth_ldap.config import LDAPSearch, NestedGroupOfNamesType\n\n# Server URI\nAUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com:3269\"\n\n# The following may be needed if you are binding to Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_REFERRALS: 0\n}\n\n# Set the DN and password for the NetBox service account.\nAUTH_LDAP_BIND_DN = \"CN=NETBOXSA,OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n\n# Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)\nLDAP_IGNORE_CERT_ERRORS = False\n\n# Include this setting if you want to validate the LDAP server certificates against a CA certificate directory on your server\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTDIR, LDAP_CA_CERT_DIR)\nLDAP_CA_CERT_DIR = '/etc/ssl/certs'\n\n# Include this setting if you want to validate the LDAP server certificates against your own CA.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, LDAP_CA_CERT_FILE)\nLDAP_CA_CERT_FILE = '/path/to/example-CA.crt'\n\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    \"ou=Users,dc=example,dc=com\",\n    ldap.SCOPE_SUBTREE,\n    \"(|(userPrincipalName=%(user)s)(sAMAccountName=%(user)s))\"\n)\n\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = None\n\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"username\": \"sAMAccountName\",\n    \"email\": \"mail\",\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n}\n\nAUTH_LDAP_USER_QUERY_FIELD = \"username\"\n\n# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group\n# hierarchy.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\n    \"dc=example,dc=com\",\n    ldap.SCOPE_SUBTREE,\n    \"(objectClass=group)\"\n)\nAUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()\n\n# Define a group required to login.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=NETBOX_USERS,DC=example,DC=com\"\n\n# Mirror LDAP group assignments.\nAUTH_LDAP_MIRROR_GROUPS = True\n\n# Define special user types using groups. Exercise great caution when assigning superuser status.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n    \"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n    \"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n    \"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n\n# For more granular permissions, we can map LDAP groups to Django groups.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n\n# Cache groups for one hour to reduce LDAP traffic\nAUTH_LDAP_CACHE_TIMEOUT = 3600\nAUTH_LDAP_ALWAYS_UPDATE_USER = True\n</code></pre>"
    },
    {
      "location": "installation/6-ldap/#troubleshooting-ldap",
      "title": "Troubleshooting LDAP",
      "text": "<p><code>systemctl restart netbox</code> restarts the NetBox service, and initiates any changes made to <code>ldap_config.py</code>. If there are syntax errors present, the NetBox process will not spawn an instance, and errors should be logged to <code>/var/log/messages</code>.</p> <p>For troubleshooting LDAP user/group queries, add or merge the following logging configuration to <code>configuration.py</code>:</p> <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'netbox_auth_log': {\n            'level': 'DEBUG',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': '/opt/netbox/local/logs/django-ldap-debug.log',\n            'maxBytes': 1024 * 500,\n            'backupCount': 5,\n        },\n    },\n    'loggers': {\n        'django_auth_ldap': {\n            'handlers': ['netbox_auth_log'],\n            'level': 'DEBUG',\n        },\n    },\n}\n</code></pre> <p>Ensure the file and path specified in logfile exist and are writable and executable by the application service account. Restart the netbox service and attempt to log into the site to trigger log entries to this file.</p>"
    },
    {
      "location": "installation/upgrading/",
      "title": "Upgrading to a New NetBox Release",
      "text": "<p>Upgrading NetBox to a new version is pretty simple, however users are cautioned to always review the release notes and save a backup of their current deployment prior to beginning an upgrade.</p> <p>NetBox can generally be upgraded directly to any newer release with no interim steps, with the one exception being incrementing major versions. This can be done only from the most recent minor release of the major version. For example, NetBox v2.11.8 can be upgraded to version 3.3.2 following the steps below. However, a deployment of NetBox v2.10.10 or earlier must first be upgraded to any v2.11 release, and then to any v3.x release. (This is to accommodate the consolidation of database schema migrations effected by a major version change).</p> <p></p> <p>Perform a Backup</p> <p>Always be sure to save a backup of your current NetBox deployment prior to starting the upgrade process.</p>"
    },
    {
      "location": "installation/upgrading/#1-review-the-release-notes",
      "title": "1. Review the Release Notes",
      "text": "<p>Prior to upgrading your NetBox instance, be sure to carefully review all release notes that have been published since your current version was released. Although the upgrade process typically does not involve additional work, certain releases may introduce breaking or backward-incompatible changes. These are called out in the release notes under the release in which the change went into effect.</p>"
    },
    {
      "location": "installation/upgrading/#2-update-dependencies-to-required-versions",
      "title": "2. Update Dependencies to Required Versions",
      "text": "<p>NetBox requires the following dependencies:</p> Dependency Supported Versions Python 3.10, 3.11, 3.12 PostgreSQL 13+ Redis 4.0+"
    },
    {
      "location": "installation/upgrading/#3-install-the-latest-release",
      "title": "3. Install the Latest Release",
      "text": "<p>As with the initial installation, you can upgrade NetBox by either downloading the latest release package or by checking out the latest production release from the git repository.</p> <p>Warning</p> <p>Use the same method as you used to install NetBox originally.</p> <p>If you are not sure how NetBox was installed originally, check with this command:</p> <pre><code>ls -ld /opt/netbox /opt/netbox/.git\n</code></pre> <p>If NetBox was installed from a release package, then <code>/opt/netbox</code> will be a symlink pointing to the current version, and <code>/opt/netbox/.git</code> will not exist.  If it was installed from git, then <code>/opt/netbox</code> and <code>/opt/netbox/.git</code> will both exist as normal directories.</p>"
    },
    {
      "location": "installation/upgrading/#option-a-download-a-release",
      "title": "Option A: Download a Release",
      "text": "<p>Download the latest stable release from GitHub as a tarball or ZIP archive. Extract it to your desired path. In this example, we'll use <code>/opt/netbox</code>.</p> <p>Download and extract the latest version:</p> <pre><code># Set $NEWVER to the NetBox version being installed\nNEWVER=3.5.0\nwget https://github.com/netbox-community/netbox/archive/v$NEWVER.tar.gz\nsudo tar -xzf v$NEWVER.tar.gz -C /opt\nsudo ln -sfn /opt/netbox-$NEWVER/ /opt/netbox\n</code></pre> <p>Copy <code>local_requirements.txt</code>, <code>configuration.py</code>, and <code>ldap_config.py</code> (if present) from the current installation to the new version:</p> <pre><code># Set $OLDVER to the NetBox version currently installed\nOLDVER=3.4.9\nsudo cp /opt/netbox-$OLDVER/local_requirements.txt /opt/netbox/\nsudo cp /opt/netbox-$OLDVER/netbox/netbox/configuration.py /opt/netbox/netbox/netbox/\nsudo cp /opt/netbox-$OLDVER/netbox/netbox/ldap_config.py /opt/netbox/netbox/netbox/\n</code></pre> <p>Be sure to replicate your uploaded media as well. (The exact action necessary will depend on where you choose to store your media, but in general moving or copying the media directory will suffice.)</p> <pre><code>sudo cp -pr /opt/netbox-$OLDVER/netbox/media/ /opt/netbox/netbox/\n</code></pre> <p>Also make sure to copy or link any custom scripts and reports that you've made. Note that if these are stored outside the project root, you will not need to copy them. (Check the <code>SCRIPTS_ROOT</code> and <code>REPORTS_ROOT</code> parameters in the configuration file above if you're unsure.)</p> <pre><code>sudo cp -r /opt/netbox-$OLDVER/netbox/scripts /opt/netbox/netbox/\nsudo cp -r /opt/netbox-$OLDVER/netbox/reports /opt/netbox/netbox/\n</code></pre> <p>If you followed the original installation guide to set up gunicorn, be sure to copy its configuration as well:</p> <pre><code>sudo cp /opt/netbox-$OLDVER/gunicorn.py /opt/netbox/\n</code></pre>"
    },
    {
      "location": "installation/upgrading/#option-b-check-out-a-git-release",
      "title": "Option B: Check Out a Git Release",
      "text": "<p>This guide assumes that NetBox is installed at <code>/opt/netbox</code>. First, determine the latest release either by visiting our releases page or by running the following <code>git</code> commands:</p> <pre><code>sudo git fetch --tags\ngit describe --tags $(git rev-list --tags --max-count=1)\n</code></pre> <p>Check out the desired release by specifying its tag:</p> <pre><code>sudo git checkout v4.2.0\n</code></pre>"
    },
    {
      "location": "installation/upgrading/#4-run-the-upgrade-script",
      "title": "4. Run the Upgrade Script",
      "text": "<p>Once the new code is in place, verify that any optional Python packages required by your deployment (e.g. <code>django-auth-ldap</code>) are listed in <code>local_requirements.txt</code>. Then, run the upgrade script:</p> <pre><code>sudo ./upgrade.sh\n</code></pre> <p>Warning</p> <p>If the default version of Python is not at least 3.10, you'll need to pass the path to a supported Python version as an environment variable when calling the upgrade script. For example:</p> <pre><code>sudo PYTHON=/usr/bin/python3.10 ./upgrade.sh\n</code></pre> <p>This script performs the following actions:</p> <ul> <li>Destroys and rebuilds the Python virtual environment</li> <li>Installs all required Python packages (listed in <code>requirements.txt</code>)</li> <li>Installs any additional packages from <code>local_requirements.txt</code></li> <li>Applies any database migrations that were included in the release</li> <li>Builds the documentation locally (for offline use)</li> <li>Collects all static files to be served by the HTTP service</li> <li>Deletes stale content types from the database</li> <li>Deletes all expired user sessions from the database</li> </ul> <p>Note</p> <p>If the upgrade script prompts a warning about unreflected database migrations, this indicates that some change has been made to your local codebase and should be investigated. Never attempt to create new migrations unless you are intentionally modifying the database schema.</p>"
    },
    {
      "location": "installation/upgrading/#5-restart-the-netbox-services",
      "title": "5. Restart the NetBox Services",
      "text": "<p>Warning</p> <p>If you are upgrading from an installation that does not use a Python virtual environment (any release prior to v2.7.9), you'll need to update the systemd service files to reference the new Python and gunicorn executables before restarting the services. These are located in <code>/opt/netbox/venv/bin/</code>. See the example service files in <code>/opt/netbox/contrib/</code> for reference.</p> <p>Finally, restart the gunicorn and RQ services:</p> <pre><code>sudo systemctl restart netbox netbox-rq\n</code></pre>"
    },
    {
      "location": "installation/upgrading/#6-verify-housekeeping-scheduling",
      "title": "6. Verify Housekeeping Scheduling",
      "text": "<p>If upgrading from a release prior to NetBox v3.0, check that a cron task (or similar scheduled process) has been configured to run NetBox's nightly housekeeping command. A shell script which invokes this command is included at <code>contrib/netbox-housekeeping.sh</code>. It can be linked from your system's daily cron task directory, or included within the crontab directly. (If NetBox has been installed in a nonstandard path, be sure to update the system paths within this script first.)</p> <pre><code>sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n</code></pre> <p>See the housekeeping documentation for further details.</p>"
    },
    {
      "location": "integrations/graphql-api/",
      "title": "GraphQL API Overview",
      "text": "<p>NetBox provides a read-only GraphQL API to complement its REST API. This API is powered by Strawberry Django.</p>"
    },
    {
      "location": "integrations/graphql-api/#queries",
      "title": "Queries",
      "text": "<p>GraphQL enables the client to specify an arbitrary nested list of fields to include in the response. All queries are made to the root <code>/graphql</code> API endpoint. For example, to return the circuit ID and provider name of each circuit with an active status, you can issue a request such as the following:</p> <pre><code>curl -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\nhttp://netbox/graphql/ \\\n--data '{\"query\": \"query {circuit_list(status:\\\"active\\\") {cid provider {name}}}\"}'\n</code></pre> <p>The response will include the requested data formatted as JSON:</p> <pre><code>{\n  \"data\": {\n    \"circuits\": [\n      {\n        \"cid\": \"1002840283\",\n        \"provider\": {\n          \"name\": \"CenturyLink\"\n        }\n      },\n      {\n        \"cid\": \"1002840457\",\n        \"provider\": {\n          \"name\": \"CenturyLink\"\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>Note</p> <p>It's recommended to pass the return data through a JSON parser such as <code>jq</code> for better readability.</p> <p>NetBox provides both a singular and plural query field for each object type:</p> <ul> <li><code>$OBJECT</code>: Returns a single object. Must specify the object's unique ID as <code>(id: 123)</code>.</li> <li><code>$OBJECT_list</code>: Returns a list of objects, optionally filtered by given parameters.</li> </ul> <p>For example, query <code>device(id:123)</code> to fetch a specific device (identified by its unique ID), and query <code>device_list</code> (with an optional set of filters) to fetch all devices.</p> <p>For more detail on constructing GraphQL queries, see the GraphQL queries documentation.  For filtering and lookup syntax, please refer to the Strawberry Django documentation.</p>"
    },
    {
      "location": "integrations/graphql-api/#filtering",
      "title": "Filtering",
      "text": "<p>The GraphQL API employs the same filtering logic as the UI and REST API. Filters can be specified as key-value pairs within parentheses immediately following the query name. For example, the following will return only sites within the North Carolina region with a status of active:</p> <pre><code>query {\n  site_list(filters: {region: \"us-nc\", status: \"active\"}) {\n    name\n  }\n}\n</code></pre> <p>In addition, filtering can be done on list of related objects as shown in the following query:</p> <pre><code>{\n  device_list {\n    id\n    name\n    interfaces(filters: {enabled: true}) {\n      name\n    }\n  }\n}\n</code></pre>"
    },
    {
      "location": "integrations/graphql-api/#multiple-return-types",
      "title": "Multiple Return Types",
      "text": "<p>Certain queries can return multiple types of objects, for example cable terminations can return circuit terminations, console ports and many others.  These can be queried using inline fragments as shown below:</p> <pre><code>{\n    cable_list {\n      id\n      a_terminations {\n        ... on CircuitTerminationType {\n          id\n          class_type\n        }\n        ... on ConsolePortType {\n          id\n          class_type\n        }\n        ... on ConsoleServerPortType {\n          id\n          class_type\n        }\n      }\n    }\n}\n</code></pre> <p>The field \"class_type\" is an easy way to distinguish what type of object it is when viewing the returned data, or when filtering.  It contains the class name, for example \"CircuitTermination\" or \"ConsoleServerPort\".</p>"
    },
    {
      "location": "integrations/graphql-api/#authentication",
      "title": "Authentication",
      "text": "<p>NetBox's GraphQL API uses the same API authentication tokens as its REST API. Authentication tokens are included with requests by attaching an <code>Authorization</code> HTTP header in the following form:</p> <pre><code>Authorization: Token $TOKEN\n</code></pre>"
    },
    {
      "location": "integrations/graphql-api/#disabling-the-graphql-api",
      "title": "Disabling the GraphQL API",
      "text": "<p>If not needed, the GraphQL API can be disabled by setting the <code>GRAPHQL_ENABLED</code> configuration parameter to False and restarting NetBox.</p>"
    },
    {
      "location": "integrations/prometheus-metrics/",
      "title": "Prometheus Metrics",
      "text": "<p>NetBox supports optionally exposing native Prometheus metrics from the application. Prometheus is a popular time series metric platform used for monitoring.</p> <p>NetBox exposes metrics at the <code>/metrics</code> HTTP endpoint, e.g. <code>https://netbox.local/metrics</code>. Metric exposition can be toggled with the <code>METRICS_ENABLED</code> configuration setting. Metrics are not exposed by default.</p>"
    },
    {
      "location": "integrations/prometheus-metrics/#metric-types",
      "title": "Metric Types",
      "text": "<p>NetBox makes use of the django-prometheus library to export a number of different types of metrics, including:</p> <ul> <li>Per model insert, update, and delete counters</li> <li>Per view request counters</li> <li>Per view request latency histograms</li> <li>Request body size histograms</li> <li>Response body size histograms</li> <li>Response code counters</li> <li>Database connection, execution, and error counters</li> <li>Cache hit, miss, and invalidation counters</li> <li>Django middleware latency histograms</li> <li>Other Django related metadata metrics</li> </ul> <p>For the exhaustive list of exposed metrics, visit the <code>/metrics</code> endpoint on your NetBox instance.</p>"
    },
    {
      "location": "integrations/prometheus-metrics/#multi-processing-notes",
      "title": "Multi Processing Notes",
      "text": "<p>When deploying NetBox in a multiprocess manner (e.g. running multiple Gunicorn workers) the Prometheus client library requires the use of a shared directory to collect metrics from all worker processes. To configure this, first create or designate a local directory to which the worker processes have read and write access, and then configure your WSGI service (e.g. Gunicorn) to define this path as the <code>prometheus_multiproc_dir</code> environment variable.</p> <p>Warning</p> <p>If having accurate long-term metrics in a multiprocess environment is crucial to your deployment, it's recommended you use the <code>uwsgi</code> library instead of <code>gunicorn</code>. The issue lies in the way <code>gunicorn</code> tracks worker processes (vs <code>uwsgi</code>) which helps manage the metrics files created by the above configurations. If you're using NetBox with gunicorn in a containerized environment following the one-process-per-container methodology, then you will likely not need to change to <code>uwsgi</code>. More details can be found in  issue #3779.</p>"
    },
    {
      "location": "integrations/rest-api/",
      "title": "REST API Overview",
      "text": ""
    },
    {
      "location": "integrations/rest-api/#what-is-a-rest-api",
      "title": "What is a REST API?",
      "text": "<p>REST stands for representational state transfer. It's a particular type of API which employs HTTP requests and JavaScript Object Notation (JSON) to facilitate create, retrieve, update, and delete (CRUD) operations on objects within an application. Each type of operation is associated with a particular HTTP verb:</p> <ul> <li><code>GET</code>: Retrieve an object or list of objects</li> <li><code>POST</code>: Create an object</li> <li><code>PUT</code> / <code>PATCH</code>: Modify an existing object. <code>PUT</code> requires all mandatory fields to be specified, while <code>PATCH</code> only expects the field that is being modified to be specified.</li> <li><code>DELETE</code>: Delete an existing object</li> </ul> <p>Additionally, the <code>OPTIONS</code> verb can be used to inspect a particular REST API endpoint and return all supported actions and their available parameters.</p> <p>One of the primary benefits of a REST API is its human-friendliness. Because it utilizes HTTP and JSON, it's very easy to interact with NetBox data on the command line using common tools. For example, we can request an IP address from NetBox and output the JSON using <code>curl</code> and <code>jq</code>. The following command makes an HTTP <code>GET</code> request for information about a particular IP address, identified by its primary key, and uses <code>jq</code> to present the raw JSON data returned in a more human-friendly format. (Piping the output through <code>jq</code> isn't strictly required but makes it much easier to read.)</p> <pre><code>curl -s http://netbox/api/ipam/ip-addresses/2954/ | jq '.'\n</code></pre> <pre><code>{\n  \"id\": 2954,\n  \"url\": \"http://netbox/api/ipam/ip-addresses/2954/\",\n  \"family\": {\n    \"value\": 4,\n    \"label\": \"IPv4\"\n  },\n  \"address\": \"192.168.0.42/26\",\n  \"vrf\": null,\n  \"tenant\": null,\n  \"status\": {\n    \"value\": \"active\",\n    \"label\": \"Active\"\n  },\n  \"role\": null,\n  \"assigned_object_type\": \"dcim.interface\",\n  \"assigned_object_id\": 114771,\n  \"assigned_object\": {\n    \"id\": 114771,\n    \"url\": \"http://netbox/api/dcim/interfaces/114771/\",\n    \"device\": {\n      \"id\": 2230,\n      \"url\": \"http://netbox/api/dcim/devices/2230/\",\n      \"name\": \"router1\",\n      \"display_name\": \"router1\"\n    },\n    \"name\": \"et-0/1/2\",\n    \"cable\": null,\n    \"connection_status\": null\n  },\n  \"nat_inside\": null,\n  \"nat_outside\": null,\n  \"dns_name\": \"\",\n  \"description\": \"Example IP address\",\n  \"tags\": [],\n  \"custom_fields\": {},\n  \"created\": \"2020-08-04\",\n  \"last_updated\": \"2020-08-04T14:12:39.666885Z\"\n}\n</code></pre> <p>Each attribute of the IP address is expressed as an attribute of the JSON object. Fields may include their own nested objects, as in the case of the <code>assigned_object</code> field above. Every object includes a primary key named <code>id</code> which uniquely identifies it in the database.</p>"
    },
    {
      "location": "integrations/rest-api/#interactive-documentation",
      "title": "Interactive Documentation",
      "text": "<p>Comprehensive, interactive documentation of all REST API endpoints is available on a running NetBox instance at <code>/api/schema/swagger-ui/</code>. This interface provides a convenient sandbox for researching and experimenting with specific endpoints and request types. The API itself can also be explored using a web browser by navigating to its root at <code>/api/</code>.</p>"
    },
    {
      "location": "integrations/rest-api/#endpoint-hierarchy",
      "title": "Endpoint Hierarchy",
      "text": "<p>NetBox's entire REST API is housed under the API root at <code>https://&lt;hostname&gt;/api/</code>. The URL structure is divided at the root level by application: circuits, DCIM, extras, IPAM, plugins, tenancy, users, and virtualization. Within each application exists a separate path for each model. For example, the provider and circuit objects are located under the \"circuits\" application:</p> <ul> <li><code>/api/circuits/providers/</code></li> <li><code>/api/circuits/circuits/</code></li> </ul> <p>Likewise, the site, rack, and device objects are located under the \"DCIM\" application:</p> <ul> <li><code>/api/dcim/sites/</code></li> <li><code>/api/dcim/racks/</code></li> <li><code>/api/dcim/devices/</code></li> </ul> <p>The full hierarchy of available endpoints can be viewed by navigating to the API root in a web browser.</p> <p>Each model generally has two views associated with it: a list view and a detail view. The list view is used to retrieve a list of multiple objects and to create new objects. The detail view is used to retrieve, update, or delete an single existing object. All objects are referenced by their numeric primary key (<code>id</code>).</p> <ul> <li><code>/api/dcim/devices/</code> - List existing devices or create a new device</li> <li><code>/api/dcim/devices/123/</code> - Retrieve, update, or delete the device with ID 123</li> </ul> <p>Lists of objects can be filtered and ordered using a set of query parameters. For example, to find all interfaces belonging to the device with ID 123:</p> <pre><code>GET /api/dcim/interfaces/?device_id=123\n</code></pre> <p>An optional <code>ordering</code> parameter can be used to define how to sort the results. Building off the previous example, to sort all the interfaces in reverse order of creation (newest to oldest) for a device with ID 123:</p> <pre><code>GET /api/dcim/interfaces/?device_id=123&amp;ordering=-created\n</code></pre> <p>See the filtering documentation for more details on topics related to filtering, ordering and lookup expressions.</p>"
    },
    {
      "location": "integrations/rest-api/#serialization",
      "title": "Serialization",
      "text": "<p>The REST API generally represents objects in one of two ways: complete or brief. The base serializer is used to present the complete view of an object. This includes all database table fields which comprise the model, and may include additional metadata. A base serializer includes relationships to parent objects, but does not include child objects. For example, the <code>VLANSerializer</code> includes a nested representation its parent VLANGroup (if any), but does not include any assigned Prefixes. Serializers employ a minimal \"brief\" representation of related objects, which includes only the attributes prudent for identifying the object.</p> <pre><code>{\n    \"id\": 1048,\n    \"site\": {\n        \"id\": 7,\n        \"url\": \"http://netbox/api/dcim/sites/7/\",\n        \"name\": \"Corporate HQ\",\n        \"slug\": \"corporate-hq\"\n    },\n    \"group\": {\n        \"id\": 4,\n        \"url\": \"http://netbox/api/ipam/vlan-groups/4/\",\n        \"name\": \"Production\",\n        \"slug\": \"production\"\n    },\n    \"vid\": 101,\n    \"name\": \"Users-Floor1\",\n    \"tenant\": null,\n    \"status\": {\n        \"value\": 1,\n        \"label\": \"Active\"\n    },\n    \"role\": {\n        \"id\": 9,\n        \"url\": \"http://netbox/api/ipam/roles/9/\",\n        \"name\": \"User Access\",\n        \"slug\": \"user-access\"\n    },\n    \"description\": \"\",\n    \"display_name\": \"101 (Users-Floor1)\",\n    \"custom_fields\": {}\n}\n</code></pre>"
    },
    {
      "location": "integrations/rest-api/#related-objects",
      "title": "Related Objects",
      "text": "<p>Related objects (e.g. <code>ForeignKey</code> fields) are included using nested brief representations. This is a minimal representation of an object, including only its direct URL and enough information to display the object to a user. When performing write API actions (<code>POST</code>, <code>PUT</code>, and <code>PATCH</code>), related objects may be specified by either numeric ID (primary key), or by a set of attributes sufficiently unique to return the desired object.</p> <p>For example, when creating a new device, its rack can be specified by NetBox ID (PK):</p> <pre><code>{\n    \"name\": \"MyNewDevice\",\n    \"rack\": 123,\n    ...\n}\n</code></pre> <p>Or by a set of attributes which uniquely identify the rack:</p> <pre><code>{\n    \"name\": \"MyNewDevice\",\n    \"rack\": {\n        \"site\": {\n            \"name\": \"Equinix DC6\"\n        },\n        \"name\": \"R204\"\n    },\n    ...\n}\n</code></pre> <p>Note that if the provided parameters do not return exactly one object, a validation error is raised.</p>"
    },
    {
      "location": "integrations/rest-api/#generic-relations",
      "title": "Generic Relations",
      "text": "<p>Some objects within NetBox have attributes which can reference an object of multiple types, known as generic relations. For example, an IP address can be assigned to either a device interface or a virtual machine interface. When making this assignment via the REST API, we must specify two attributes:</p> <ul> <li><code>assigned_object_type</code> - The content type of the assigned object, defined as <code>&lt;app&gt;.&lt;model&gt;</code></li> <li><code>assigned_object_id</code> - The assigned object's unique numeric ID</li> </ul> <p>Together, these values identify a unique object in NetBox. The assigned object (if any) is represented by the <code>assigned_object</code> attribute on the IP address model.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/ipam/ip-addresses/ \\\n--data '{\n    \"address\": \"192.0.2.1/24\",\n    \"assigned_object_type\": \"dcim.interface\",\n    \"assigned_object_id\": 69023\n}'\n</code></pre> <pre><code>{\n    \"id\": 56296,\n    \"url\": \"http://netbox/api/ipam/ip-addresses/56296/\",\n    \"assigned_object_type\": \"dcim.interface\",\n    \"assigned_object_id\": 69000,\n    \"assigned_object\": {\n        \"id\": 69000,\n        \"url\": \"http://netbox/api/dcim/interfaces/69023/\",\n        \"device\": {\n            \"id\": 2174,\n            \"url\": \"http://netbox/api/dcim/devices/2174/\",\n            \"name\": \"device105\",\n            \"display_name\": \"device105\"\n        },\n        \"name\": \"ge-0/0/0\",\n        \"cable\": null,\n        \"connection_status\": null\n    },\n    ...\n}\n</code></pre> <p>If we wanted to assign this IP address to a virtual machine interface instead, we would have set <code>assigned_object_type</code> to <code>virtualization.vminterface</code> and updated the object ID appropriately.</p>"
    },
    {
      "location": "integrations/rest-api/#brief-format",
      "title": "Brief Format",
      "text": "<p>Most API endpoints support an optional \"brief\" format, which returns only a minimal representation of each object in the response. This is useful when you need only a list of available objects without any related data, such as when populating a drop-down list in a form. As an example, the default (complete) format of an IP address looks like this:</p> <pre><code>GET /api/ipam/prefixes/13980/\n\n{\n    \"id\": 13980,\n    \"url\": \"http://netbox/api/ipam/prefixes/13980/\",\n    \"family\": {\n        \"value\": 4,\n        \"label\": \"IPv4\"\n    },\n    \"prefix\": \"192.0.2.0/24\",\n    \"site\": {\n        \"id\": 3,\n        \"url\": \"http://netbox/api/dcim/sites/17/\",\n        \"name\": \"Site 23A\",\n        \"slug\": \"site-23a\"\n    },\n    \"vrf\": null,\n    \"tenant\": null,\n    \"vlan\": null,\n    \"status\": {\n        \"value\": \"container\",\n        \"label\": \"Container\"\n    },\n    \"role\": {\n        \"id\": 17,\n        \"url\": \"http://netbox/api/ipam/roles/17/\",\n        \"name\": \"Staging\",\n        \"slug\": \"staging\"\n    },\n    \"is_pool\": false,\n    \"description\": \"Example prefix\",\n    \"tags\": [],\n    \"custom_fields\": {},\n    \"created\": \"2018-12-10\",\n    \"last_updated\": \"2019-03-01T20:02:46.173540Z\"\n}\n</code></pre> <p>The brief format is much more terse:</p> <pre><code>GET /api/ipam/prefixes/13980/?brief=1\n\n{\n    \"id\": 13980,\n    \"url\": \"http://netbox/api/ipam/prefixes/13980/\",\n    \"family\": 4,\n    \"prefix\": \"10.40.3.0/24\"\n}\n</code></pre> <p>The brief format is supported for both lists and individual objects.</p>"
    },
    {
      "location": "integrations/rest-api/#excluding-config-contexts",
      "title": "Excluding Config Contexts",
      "text": "<p>When retrieving devices and virtual machines via the REST API, each will include its rendered configuration context data by default. Users with large amounts of context data will likely observe suboptimal performance when returning multiple objects, particularly with very high page sizes. To combat this, context data may be excluded from the response data by attaching the query parameter <code>?exclude=config_context</code> to the request. This parameter works for both list and detail views.</p>"
    },
    {
      "location": "integrations/rest-api/#pagination",
      "title": "Pagination",
      "text": "<p>API responses which contain a list of many objects will be paginated for efficiency. The root JSON object returned by a list endpoint contains the following attributes:</p> <ul> <li><code>count</code>: The total number of all objects matching the query</li> <li><code>next</code>: A hyperlink to the next page of results (if applicable)</li> <li><code>previous</code>: A hyperlink to the previous page of results (if applicable)</li> <li><code>results</code>: The list of objects on the current page</li> </ul> <p>Here is an example of a paginated response:</p> <pre><code>HTTP 200 OK\nAllow: GET, POST, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"count\": 2861,\n    \"next\": \"http://netbox/api/dcim/devices/?limit=50&amp;offset=50\",\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": 231,\n            \"name\": \"Device1\",\n            ...\n        },\n        {\n            \"id\": 232,\n            \"name\": \"Device2\",\n            ...\n        },\n        ...\n    ]\n}\n</code></pre> <p>The default page is determined by the <code>PAGINATE_COUNT</code> configuration parameter, which defaults to 50. However, this can be overridden per request by specifying the desired <code>offset</code> and <code>limit</code> query parameters. For example, if you wish to retrieve a hundred devices at a time, you would make a request for:</p> <pre><code>http://netbox/api/dcim/devices/?limit=100\n</code></pre> <p>The response will return devices 1 through 100. The URL provided in the <code>next</code> attribute of the response will return devices 101 through 200:</p> <pre><code>{\n    \"count\": 2861,\n    \"next\": \"http://netbox/api/dcim/devices/?limit=100&amp;offset=100\",\n    \"previous\": null,\n    \"results\": [...]\n}\n</code></pre> <p>The maximum number of objects that can be returned is limited by the <code>MAX_PAGE_SIZE</code> configuration parameter, which is 1000 by default. Setting this to <code>0</code> or <code>None</code> will remove the maximum limit. An API consumer can then pass <code>?limit=0</code> to retrieve all matching objects with a single request.</p> <p>Warning</p> <p>Disabling the page size limit introduces a potential for very resource-intensive requests, since one API request can effectively retrieve an entire table from the database.</p>"
    },
    {
      "location": "integrations/rest-api/#interacting-with-objects",
      "title": "Interacting with Objects",
      "text": ""
    },
    {
      "location": "integrations/rest-api/#retrieving-multiple-objects",
      "title": "Retrieving Multiple Objects",
      "text": "<p>To query NetBox for a list of objects, make a <code>GET</code> request to the model's list endpoint. Objects are listed under the response object's <code>results</code> parameter.</p> <pre><code>curl -s -X GET http://netbox/api/ipam/ip-addresses/ | jq '.'\n</code></pre> <pre><code>{\n  \"count\": 42031,\n  \"next\": \"http://netbox/api/ipam/ip-addresses/?limit=50&amp;offset=50\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 5618,\n      \"address\": \"192.0.2.1/24\",\n      ...\n    },\n    {\n      \"id\": 5619,\n      \"address\": \"192.0.2.2/24\",\n      ...\n    },\n    {\n      \"id\": 5620,\n      \"address\": \"192.0.2.3/24\",\n      ...\n    },\n    ...\n  ]\n}\n</code></pre>"
    },
    {
      "location": "integrations/rest-api/#retrieving-a-single-object",
      "title": "Retrieving a Single Object",
      "text": "<p>To query NetBox for a single object, make a <code>GET</code> request to the model's detail endpoint specifying its unique numeric ID.</p> <p>Note</p> <p>Note that the trailing slash is required. Omitting this will return a 302 redirect.</p> <pre><code>curl -s -X GET http://netbox/api/ipam/ip-addresses/5618/ | jq '.'\n</code></pre> <pre><code>{\n  \"id\": 5618,\n  \"address\": \"192.0.2.1/24\",\n  ...\n}\n</code></pre>"
    },
    {
      "location": "integrations/rest-api/#creating-a-new-object",
      "title": "Creating a New Object",
      "text": "<p>To create a new object, make a <code>POST</code> request to the model's list endpoint with JSON data pertaining to the object being created. Note that a REST API token is required for all write operations; see the authentication section for more information. Also be sure to set the <code>Content-Type</code> HTTP header to <code>application/json</code>.</p> <pre><code>curl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"site\": 6}' | jq '.'\n</code></pre> <pre><code>{\n  \"id\": 18691,\n  \"url\": \"http://netbox/api/ipam/prefixes/18691/\",\n  \"family\": {\n    \"value\": 4,\n    \"label\": \"IPv4\"\n  },\n  \"prefix\": \"192.0.2.0/24\",\n  \"site\": {\n    \"id\": 6,\n    \"url\": \"http://netbox/api/dcim/sites/6/\",\n    \"name\": \"US-East 4\",\n    \"slug\": \"us-east-4\"\n  },\n  \"vrf\": null,\n  \"tenant\": null,\n  \"vlan\": null,\n  \"status\": {\n    \"value\": \"active\",\n    \"label\": \"Active\"\n  },\n  \"role\": null,\n  \"is_pool\": false,\n  \"description\": \"\",\n  \"tags\": [],\n  \"custom_fields\": {},\n  \"created\": \"2020-08-04\",\n  \"last_updated\": \"2020-08-04T20:08:39.007125Z\"\n}\n</code></pre>"
    },
    {
      "location": "integrations/rest-api/#creating-multiple-objects",
      "title": "Creating Multiple Objects",
      "text": "<p>To create multiple instances of a model using a single request, make a <code>POST</code> request to the model's list endpoint with a list of JSON objects representing each instance to be created. If successful, the response will contain a list of the newly created instances. The example below illustrates the creation of three new sites.</p> <pre><code>curl -X POST -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[\n{\"name\": \"Site 1\", \"slug\": \"site-1\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 2\", \"slug\": \"site-2\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 3\", \"slug\": \"site-3\", \"region\": {\"name\": \"United States\"}}\n]'\n</code></pre> <pre><code>[\n    {\n        \"id\": 21,\n        \"url\": \"http://netbox/api/dcim/sites/21/\",\n        \"name\": \"Site 1\",\n        ...\n    },\n    {\n        \"id\": 22,\n        \"url\": \"http://netbox/api/dcim/sites/22/\",\n        \"name\": \"Site 2\",\n        ...\n    },\n    {\n        \"id\": 23,\n        \"url\": \"http://netbox/api/dcim/sites/23/\",\n        \"name\": \"Site 3\",\n        ...\n    }\n]\n</code></pre>"
    },
    {
      "location": "integrations/rest-api/#updating-an-object",
      "title": "Updating an Object",
      "text": "<p>To modify an object which has already been created, make a <code>PATCH</code> request to the model's detail endpoint specifying its unique numeric ID. Include any data which you wish to update on the object. As with object creation, the <code>Authorization</code> and <code>Content-Type</code> headers must also be specified.</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/18691/ \\\n--data '{\"status\": \"reserved\"}' | jq '.'\n</code></pre> <pre><code>{\n  \"id\": 18691,\n  \"url\": \"http://netbox/api/ipam/prefixes/18691/\",\n  \"family\": {\n    \"value\": 4,\n    \"label\": \"IPv4\"\n  },\n  \"prefix\": \"192.0.2.0/24\",\n  \"site\": {\n    \"id\": 6,\n    \"url\": \"http://netbox/api/dcim/sites/6/\",\n    \"name\": \"US-East 4\",\n    \"slug\": \"us-east-4\"\n  },\n  \"vrf\": null,\n  \"tenant\": null,\n  \"vlan\": null,\n  \"status\": {\n    \"value\": \"reserved\",\n    \"label\": \"Reserved\"\n  },\n  \"role\": null,\n  \"is_pool\": false,\n  \"description\": \"\",\n  \"tags\": [],\n  \"custom_fields\": {},\n  \"created\": \"2020-08-04\",\n  \"last_updated\": \"2020-08-04T20:14:55.709430Z\"\n}\n</code></pre> <p>PUT versus PATCH</p> <p>The NetBox REST API support the use of either <code>PUT</code> or <code>PATCH</code> to modify an existing object. The difference is that a <code>PUT</code> request requires the user to specify a complete representation of the object being modified, whereas a <code>PATCH</code> request need include only the attributes that are being updated. For most purposes, using <code>PATCH</code> is recommended.</p>"
    },
    {
      "location": "integrations/rest-api/#updating-multiple-objects",
      "title": "Updating Multiple Objects",
      "text": "<p>Multiple objects can be updated simultaneously by issuing a <code>PUT</code> or <code>PATCH</code> request to a model's list endpoint with a list of dictionaries specifying the numeric ID of each object to be deleted and the attributes to be updated. For example, to update sites with IDs 10 and 11 to a status of \"active\", issue the following request:</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10, \"status\": \"active\"}, {\"id\": 11, \"status\": \"active\"}]'\n</code></pre> <p>Note that there is no requirement for the attributes to be identical among objects. For instance, it's possible to update the status of one site along with the name of another in the same request.</p> <p>Note</p> <p>The bulk update of objects is an all-or-none operation, meaning that if NetBox fails to successfully update any of the specified objects (e.g. due a validation error), the entire operation will be aborted and none of the objects will be updated.</p>"
    },
    {
      "location": "integrations/rest-api/#deleting-an-object",
      "title": "Deleting an Object",
      "text": "<p>To delete an object from NetBox, make a <code>DELETE</code> request to the model's detail endpoint specifying its unique numeric ID. The <code>Authorization</code> header must be included to specify an authorization token, however this type of request does not support passing any data in the body.</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\nhttp://netbox/api/ipam/prefixes/18691/\n</code></pre> <p>Note that <code>DELETE</code> requests do not return any data: If successful, the API will return a 204 (No Content) response.</p> <p>Note</p> <p>You can run <code>curl</code> with the verbose (<code>-v</code>) flag to inspect the HTTP response codes.</p>"
    },
    {
      "location": "integrations/rest-api/#deleting-multiple-objects",
      "title": "Deleting Multiple Objects",
      "text": "<p>NetBox supports the simultaneous deletion of multiple objects of the same type by issuing a <code>DELETE</code> request to the model's list endpoint with a list of dictionaries specifying the numeric ID of each object to be deleted. For example, to delete sites with IDs 10, 11, and 12, issue the following request:</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10}, {\"id\": 11}, {\"id\": 12}]'\n</code></pre> <p>Note</p> <p>The bulk deletion of objects is an all-or-none operation, meaning that if NetBox fails to delete any of the specified objects (e.g. due a dependency by a related object), the entire operation will be aborted and none of the objects will be deleted.</p>"
    },
    {
      "location": "integrations/rest-api/#authentication",
      "title": "Authentication",
      "text": "<p>The NetBox REST API primarily employs token-based authentication. For convenience, cookie-based authentication can also be used when navigating the browsable API.</p>"
    },
    {
      "location": "integrations/rest-api/#tokens",
      "title": "Tokens",
      "text": "<p>A token is a unique identifier mapped to a NetBox user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.</p> <p>By default, all users can create and manage their own REST API tokens under the user control panel in the UI or via the REST API. This ability can be disabled by overriding the <code>DEFAULT_PERMISSIONS</code> configuration parameter.</p> <p>Each token contains a 160-bit key represented as 40 hexadecimal characters. When creating a token, you'll typically leave the key field blank so that a random key will be automatically generated. However, NetBox allows you to specify a key in case you need to restore a previously deleted token to operation.</p> <p>Additionally, a token can be set to expire at a specific time. This can be useful if an external client needs to be granted temporary access to NetBox.</p> <p>Restricting Token Retrieval</p> <p>The ability to retrieve the key value of a previously-created API token can be restricted by disabling the <code>ALLOW_TOKEN_RETRIEVAL</code> configuration parameter.</p>"
    },
    {
      "location": "integrations/rest-api/#restricting-write-operations",
      "title": "Restricting Write Operations",
      "text": "<p>By default, a token can be used to perform all actions via the API that a user would be permitted to do via the web UI. Deselecting the \"write enabled\" option will restrict API requests made with the token to read operations (e.g. GET) only.</p>"
    },
    {
      "location": "integrations/rest-api/#client-ip-restriction",
      "title": "Client IP Restriction",
      "text": "<p>Each API token can optionally be restricted by client IP address. If one or more allowed IP prefixes/addresses is defined for a token, authentication will fail for any client connecting from an IP address outside the defined range(s). This enables restricting the use a token to a specific client. (By default, any client IP address is permitted.)</p>"
    },
    {
      "location": "integrations/rest-api/#creating-tokens-for-other-users",
      "title": "Creating Tokens for Other Users",
      "text": "<p>It is possible to provision authentication tokens for other users via the REST API. To do, so the requesting user must have the <code>users.grant_token</code> permission assigned. While all users have inherent permission by default to create their own tokens, this permission is required to enable the creation of tokens for other users.</p> <p>Exercise Caution</p> <p>The ability to create tokens on behalf of other users enables the requestor to access the created token. This ability is intended e.g. for the provisioning of tokens by automated services, and should be used with extreme caution to avoid a security compromise.</p>"
    },
    {
      "location": "integrations/rest-api/#authenticating-to-the-api",
      "title": "Authenticating to the API",
      "text": "<p>An authentication token is attached to a request by setting the <code>Authorization</code> header to the string <code>Token</code> followed by a space and the user's token:</p> <pre><code>$ curl -H \"Authorization: Token $TOKEN\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/dcim/sites/\n{\n    \"count\": 10,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [...]\n}\n</code></pre> <p>A token is not required for read-only operations which have been exempted from permissions enforcement (using the <code>EXEMPT_VIEW_PERMISSIONS</code> configuration parameter). However, if a token is required but not present in a request, the API will return a 403 (Forbidden) response:</p> <pre><code>$ curl https://netbox/api/dcim/sites/\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre> <p>When a token is used to authenticate a request, its <code>last_updated</code> time updated to the current time if its last use was recorded more than 60 seconds ago (or was never recorded). This allows users to determine which tokens have been active recently.</p> <p>Note</p> <p>The \"last used\" time for tokens will not be updated while maintenance mode is enabled.</p>"
    },
    {
      "location": "integrations/rest-api/#initial-token-provisioning",
      "title": "Initial Token Provisioning",
      "text": "<p>Ideally, each user should provision his or her own API token(s) via the web UI. However, you may encounter a scenario where a token must be created by a user via the REST API itself. NetBox provides a special endpoint to provision tokens using a valid username and password combination. (Note that the user must have permission to create API tokens regardless of the interface used.)</p> <p>To provision a token via the REST API, make a <code>POST</code> request to the <code>/api/users/tokens/provision/</code> endpoint:</p> <pre><code>$ curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/users/tokens/provision/ \\\n--data '{\n    \"username\": \"hankhill\",\n    \"password\": \"I&lt;3C3H8\"\n}'\n</code></pre> <p>Note that we are not passing an existing REST API token with this request. If the supplied credentials are valid, a new REST API token will be automatically created for the user. Note that the key will be automatically generated, and write ability will be enabled.</p> <pre><code>{\n    \"id\": 6,\n    \"url\": \"https://netbox/api/users/tokens/6/\",\n    \"display\": \"**********************************3c9cb9\",\n    \"user\": {\n        \"id\": 2,\n        \"url\": \"https://netbox/api/users/users/2/\",\n        \"display\": \"hankhill\",\n        \"username\": \"hankhill\"\n    },\n    \"created\": \"2024-03-11T20:09:13.339367Z\",\n    \"expires\": null,\n    \"last_used\": null,\n    \"key\": \"9fc9b897abec9ada2da6aec9dbc34596293c9cb9\",\n    \"write_enabled\": true,\n    \"description\": \"\",\n    \"allowed_ips\": []\n}\n</code></pre>"
    },
    {
      "location": "integrations/rest-api/#http-headers",
      "title": "HTTP Headers",
      "text": ""
    },
    {
      "location": "integrations/rest-api/#api-version",
      "title": "<code>API-Version</code>",
      "text": "<p>This header specifies the API version in use. This will always match the version of NetBox installed. For example, NetBox v3.4.2 will report an API version of <code>3.4</code>.</p>"
    },
    {
      "location": "integrations/rest-api/#x-request-id",
      "title": "<code>X-Request-ID</code>",
      "text": "<p>This header specifies the unique ID assigned to the received API request. It can be very handy for correlating a request with change records. For example, after creating several new objects, you can filter against the object changes API endpoint to retrieve the resulting change records:</p> <pre><code>GET /api/extras/object-changes/?request_id=e39c84bc-f169-4d5f-bc1c-94487a1b18b5\n</code></pre> <p>The request ID can also be used to filter many objects directly, to return those created or updated by a certain request:</p> <pre><code>GET /api/dcim/sites/?created_by_request=e39c84bc-f169-4d5f-bc1c-94487a1b18b5\n</code></pre> <p>Note</p> <p>This header is included with all NetBox responses, although it is most practical when working with an API.</p>"
    },
    {
      "location": "integrations/synchronized-data/",
      "title": "Synchronized Data",
      "text": "<p>Some NetBox models support automatic synchronization of certain attributes from remote data sources, such as a git repository hosted on GitHub or GitLab. Data from the authoritative remote source is synchronized locally in NetBox as data files.</p> <p>Permissions</p> <p>A user must be assigned the <code>core.sync_datasource</code> permission in order to synchronize local files from a remote data source. This is accomplished by creating a permission for the \"Core &gt; Data Source\" object type with the <code>sync</code> action, and assigning it to the desired user and/or group.</p> <p>The following features support the use of synchronized data:</p> <ul> <li>Configuration templates</li> <li>Configuration context data</li> <li>Export templates</li> </ul>"
    },
    {
      "location": "integrations/webhooks/",
      "title": "Webhooks",
      "text": "<p>NetBox can be configured via Event Rules to transmit outgoing webhooks to remote systems in response to internal object changes. The receiver can act on the data in these webhook messages to perform related tasks.</p> <p>For example, suppose you want to automatically configure a monitoring system to start monitoring a device when its operational status is changed to active, and remove it from monitoring for any other status. You can create a webhook in NetBox for the device model and craft its content and destination URL to effect the desired change on the receiving system. Webhooks will be sent automatically by NetBox whenever the configured constraints are met.</p> <p>Security Notice</p> <p>Webhooks support the inclusion of user-submitted code to generate the URL, custom headers, and payloads, which may pose security risks under certain conditions. Only grant permission to create or modify webhooks to trusted users.</p>"
    },
    {
      "location": "integrations/webhooks/#jinja2-template-support",
      "title": "Jinja2 Template Support",
      "text": "<p>Jinja2 templating is supported for the <code>URL</code>, <code>additional_headers</code> and <code>body_template</code> fields. This enables the user to convey object data in the request headers as well as to craft a customized request body. Request content can be crafted to enable the direct interaction with external systems by ensuring the outgoing message is in a format the receiver expects and understands.</p> <p>For example, you might create a NetBox webhook to trigger a Slack message any time an IP address is created. You can accomplish this using the following configuration:</p> <ul> <li>Object type: IPAM &gt; IP address</li> <li>HTTP method: <code>POST</code></li> <li>URL: Slack incoming webhook URL</li> <li>HTTP content type: <code>application/json</code></li> <li>Body template: <code>{\"text\": \"IP address {{ data['address'] }} was created by {{ username }}!\"}</code></li> </ul>"
    },
    {
      "location": "integrations/webhooks/#available-context",
      "title": "Available Context",
      "text": "<p>The following data is available as context for Jinja2 templates:</p> <ul> <li><code>event</code> - The type of event which triggered the webhook: created, updated, or deleted.</li> <li><code>model</code> - The NetBox model which triggered the change.</li> <li><code>timestamp</code> - The time at which the event occurred (in ISO 8601 format).</li> <li><code>username</code> - The name of the user account associated with the change.</li> <li><code>request_id</code> - The unique request ID. This may be used to correlate multiple changes associated with a single request.</li> <li><code>data</code> - A detailed representation of the object in its current state. This is typically equivalent to the model's representation in NetBox's REST API.</li> <li><code>snapshots</code> - Minimal \"snapshots\" of the object state both before and after the change was made; provided as a dictionary with keys named <code>prechange</code> and <code>postchange</code>. These are not as extensive as the fully serialized representation, but contain enough information to convey what has changed.</li> </ul>"
    },
    {
      "location": "integrations/webhooks/#default-request-body",
      "title": "Default Request Body",
      "text": "<p>If no body template is specified, the request body will be populated with a JSON object containing the context data. For example, a newly created site might appear as follows:</p> <pre><code>{\n    \"event\": \"created\",\n    \"timestamp\": \"2021-03-09 17:55:33.968016+00:00\",\n    \"model\": \"site\",\n    \"username\": \"jstretch\",\n    \"request_id\": \"fdbca812-3142-4783-b364-2e2bd5c16c6a\",\n    \"data\": {\n        \"id\": 19,\n        \"name\": \"Site 1\",\n        \"slug\": \"site-1\",\n        \"status\": \n            \"value\": \"active\",\n            \"label\": \"Active\",\n            \"id\": 1\n        },\n        \"region\": null,\n        ...\n    },\n    \"snapshots\": {\n        \"prechange\": null,\n        \"postchange\": {\n            \"created\": \"2021-03-09\",\n            \"last_updated\": \"2021-03-09T17:55:33.851Z\",\n            \"name\": \"Site 1\",\n            \"slug\": \"site-1\",\n            \"status\": \"active\",\n            ...\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>The setting of conditional webhooks has been moved to Event Rules since NetBox 3.7</p>"
    },
    {
      "location": "integrations/webhooks/#webhook-processing",
      "title": "Webhook Processing",
      "text": "<p>Using Event Rules, when a change is detected, any resulting webhooks are placed into a Redis queue for processing. This allows the user's request to complete without needing to wait for the outgoing webhook(s) to be processed. The webhooks are then extracted from the queue by the <code>rqworker</code> process and HTTP requests are sent to their respective destinations. The current webhook queue and any failed webhooks can be inspected under System &gt; Background Tasks.</p> <p>A request is considered successful if the response has a 2XX status code; otherwise, the request is marked as having failed. Failed requests may be requeued manually under System &gt; Background Tasks.</p>"
    },
    {
      "location": "integrations/webhooks/#troubleshooting",
      "title": "Troubleshooting",
      "text": "<p>To assist with verifying that the content of outgoing webhooks is rendered correctly, NetBox provides a simple HTTP listener that can be run locally to receive and display webhook requests. First, modify the target URL of the desired webhook to <code>http://localhost:9000/</code>. This will instruct NetBox to send the request to the local server on TCP port 9000. Then, start the webhook receiver service from the NetBox root directory:</p> <pre><code>$ python netbox/manage.py webhook_receiver\nListening on port http://localhost:9000. Stop with CONTROL-C.\n</code></pre> <p>You can test the receiver itself by sending any HTTP request to it. For example:</p> <pre><code>$ curl -X POST http://localhost:9000 --data '{\"foo\": \"bar\"}'\n</code></pre> <p>The server will print output similar to the following:</p> <pre><code>[1] Tue, 07 Apr 2020 17:44:02 GMT 127.0.0.1 \"POST / HTTP/1.1\" 200 -\nHost: localhost:9000\nUser-Agent: curl/7.58.0\nAccept: */*\nContent-Length: 14\nContent-Type: application/x-www-form-urlencoded\n\n{\"foo\": \"bar\"}\n------------\n</code></pre> <p>Note that <code>webhook_receiver</code> does not actually do anything with the information received: It merely prints the request headers and body for inspection. If you don't see any output, check that the <code>rqworker</code> process is running and that webhook events are being placed into the queue.</p> <p>Webhook results can be found in the NetBox admin UI under the Background Tasks section. You can see any finished or failed runs, as well as the error log for failed webhooks.</p>"
    },
    {
      "location": "models/circuits/circuit/",
      "title": "Circuits",
      "text": "<p>A circuit represents a physical point-to-point data connection, typically used to interconnect sites across considerable distances (e.g. to deliver Internet connectivity).</p>"
    },
    {
      "location": "models/circuits/circuit/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/circuit/#provider",
      "title": "Provider",
      "text": "<p>The provider to which this circuit belongs.</p>"
    },
    {
      "location": "models/circuits/circuit/#provider-account",
      "title": "Provider Account",
      "text": "<p>Circuits may optionally be assigned to a specific provider account.</p>"
    },
    {
      "location": "models/circuits/circuit/#circuit-id",
      "title": "Circuit ID",
      "text": "<p>An identifier for this circuit. This must be unique to the assigned provider. (Circuits assigned to different providers may have the same circuit ID.)</p>"
    },
    {
      "location": "models/circuits/circuit/#circuit-type",
      "title": "Circuit Type",
      "text": "<p>Each circuit is classified by a user-defined circuit type. Generally this is something like \"Internet access,\" \"MPLS/VPN,\" etc.</p>"
    },
    {
      "location": "models/circuits/circuit/#status",
      "title": "Status",
      "text": "<p>The operational status of the circuit. By default, the following statuses are available:</p> Name Planned Provisioning Active Offline Deprovisioning Decommissioned <p>Custom circuit statuses</p> <p>Additional circuit statuses may be defined by setting <code>Circuit.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/circuits/circuit/#distance",
      "title": "Distance",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The distance between the circuit's two endpoints, including a unit designation (e.g. 100 meters or 25 feet).</p>"
    },
    {
      "location": "models/circuits/circuit/#description",
      "title": "Description",
      "text": "<p>A brief description of the circuit.</p>"
    },
    {
      "location": "models/circuits/circuit/#installation-date",
      "title": "Installation Date",
      "text": "<p>The date on which the circuit was installed.</p>"
    },
    {
      "location": "models/circuits/circuit/#termination-date",
      "title": "Termination Date",
      "text": "<p>The date on which the circuit is scheduled to be disconnected.</p>"
    },
    {
      "location": "models/circuits/circuit/#commit-rate",
      "title": "Commit Rate",
      "text": "<p>The committed rate (throughput) of the circuit, in kilobits per second.</p>"
    },
    {
      "location": "models/circuits/circuitgroup/",
      "title": "Circuit Groups",
      "text": "<p>Circuits can be arranged into administrative groups for organization. The assignment of a circuit to a group is optional.</p>"
    },
    {
      "location": "models/circuits/circuitgroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/circuitgroup/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/circuits/circuitgroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/circuits/circuitgroupassignment/",
      "title": "Circuit Group Assignments",
      "text": "<p>Circuits can be assigned to circuit groups for correlation purposes. For instance, three circuits, each belonging to a different provider, may each be assigned to the same circuit group. Each assignment may optionally include a priority designation.</p>"
    },
    {
      "location": "models/circuits/circuitgroupassignment/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/circuitgroupassignment/#group",
      "title": "Group",
      "text": "<p>The circuit group being assigned.</p>"
    },
    {
      "location": "models/circuits/circuitgroupassignment/#member",
      "title": "Member",
      "text": "<p>The circuit or virtual circuit assigned to the group.</p>"
    },
    {
      "location": "models/circuits/circuitgroupassignment/#priority",
      "title": "Priority",
      "text": "<p>The circuit's operation priority relative to its peers within the group. The assignment of a priority is optional. Choices include:</p> <ul> <li>Primary</li> <li>Secondary</li> <li>Tertiary</li> <li>Inactive</li> </ul> <p>Tip</p> <p>Additional priority choices may be defined by setting <code>CircuitGroupAssignment.priority</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/circuits/circuittermination/",
      "title": "Circuit Terminations",
      "text": "<p>Each circuit may have up to two terminations, designated A and Z. At either termination, a circuit may connect to a site, device interface (via a cable), or to a provider network.</p> <p>In adherence with NetBox's philosophy of closely modeling the real world, a circuit may be connected only to a physical interface. For example, circuits may not terminate to LAG interfaces, which are virtual in nature. In such cases, a separate physical circuit is associated with each LAG member interface and each needs to be modeled discretely.</p> <p>Note</p> <p>A circuit in NetBox represents a physical link, and cannot have more than two endpoints. When modeling a multi-point topology, each leg of the topology must be defined as a discrete circuit, with one end terminating within the provider's infrastructure. The provider network model is ideal for representing these networks.</p>"
    },
    {
      "location": "models/circuits/circuittermination/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/circuittermination/#circuit",
      "title": "Circuit",
      "text": "<p>The circuit to which this termination belongs.</p>"
    },
    {
      "location": "models/circuits/circuittermination/#termination-side",
      "title": "Termination Side",
      "text": "<p>Designates the termination as forming either the A or Z end of the circuit.</p>"
    },
    {
      "location": "models/circuits/circuittermination/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, the circuit termination will be considered \"connected\" even if no cable has been connected to it in NetBox.</p>"
    },
    {
      "location": "models/circuits/circuittermination/#termination",
      "title": "Termination",
      "text": "<p>This field replaced the <code>site</code> and <code>provider_network</code> fields in NetBox v4.2.</p> <p>The region, site group, site, location or provider network with which this circuit termination is associated. Once created, a cable can be connected between the circuit termination and a device interface (or similar component).</p>"
    },
    {
      "location": "models/circuits/circuittermination/#port-speed",
      "title": "Port Speed",
      "text": "<p>The operating speed of the terminated interface, in kilobits per second. This is useful for documenting the speed of a circuit when the actual interface to which it terminates is not being modeled in NetBox.</p>"
    },
    {
      "location": "models/circuits/circuittermination/#upstream-speed",
      "title": "Upstream Speed",
      "text": "<p>The upstream speed of the terminated interface (in kilobits per second), if different from the downstream speed (a common scenario with e.g. DOCSIS cable modems).</p>"
    },
    {
      "location": "models/circuits/circuittermination/#cross-connect-id",
      "title": "Cross-connect ID",
      "text": "<p>In a data center environment, circuits are often delivered via a local cross-connect. While it may not be appropriate to model the cross-connect itself in NetBox, it's a good idea to record its ID for reference where applicable.</p>"
    },
    {
      "location": "models/circuits/circuittermination/#patch-panel-ports",
      "title": "Patch Panel &amp; Port(s)",
      "text": "<p>Similar to the cross-connect ID, this field can be used to track physical connection details which may be outside the scope of what is being modeled in NetBox.</p>"
    },
    {
      "location": "models/circuits/circuittype/",
      "title": "Circuit Types",
      "text": "<p>Circuits are classified by functional type. These types are completely customizable, and are typically used to convey the type of service being delivered over a circuit. For example, you might define circuit types for:</p> <ul> <li>Internet transit</li> <li>Out-of-band connectivity</li> <li>Peering</li> <li>Private backhaul</li> </ul>"
    },
    {
      "location": "models/circuits/circuittype/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/circuittype/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/circuits/circuittype/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/circuits/provider/",
      "title": "Providers",
      "text": "<p>A provider is any entity which provides some form of connectivity of among sites or organizations within a site. While this obviously includes carriers which offer Internet and private transit service, it might also include Internet exchange (IX) points and even organizations with whom you peer directly. Each circuit within NetBox must be assigned a provider and a circuit ID which is unique to that provider.</p>"
    },
    {
      "location": "models/circuits/provider/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/provider/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/circuits/provider/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/circuits/provider/#asns",
      "title": "ASNs",
      "text": "<p>The AS numbers assigned to this provider (optional).</p>"
    },
    {
      "location": "models/circuits/provider/#portal-url",
      "title": "Portal URL",
      "text": "<p>The URL for the provider's customer service portal.</p>"
    },
    {
      "location": "models/circuits/provider/#noc-contact",
      "title": "NOC Contact",
      "text": "<p>Contact details for the provider's network operations center (NOC).</p>"
    },
    {
      "location": "models/circuits/provider/#admin-contact",
      "title": "Admin Contact",
      "text": "<p>Administrative contact details for the provider.</p>"
    },
    {
      "location": "models/circuits/provideraccount/",
      "title": "Provider Accounts",
      "text": "<p>This model can be used to represent individual accounts associated with a provider.</p>"
    },
    {
      "location": "models/circuits/provideraccount/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/provideraccount/#provider",
      "title": "Provider",
      "text": "<p>The provider the account belongs to.</p>"
    },
    {
      "location": "models/circuits/provideraccount/#name",
      "title": "Name",
      "text": "<p>A human-friendly name, unique to the provider.</p>"
    },
    {
      "location": "models/circuits/provideraccount/#account-number",
      "title": "Account Number",
      "text": "<p>The administrative account identifier tied to this provider for your organization.</p>"
    },
    {
      "location": "models/circuits/providernetwork/",
      "title": "Provider Networks",
      "text": "<p>This model can be used to represent the boundary of a provider network, the details of which are unknown or unimportant to the NetBox user. For example, it might represent a provider's regional MPLS network to which multiple circuits provide connectivity.</p>"
    },
    {
      "location": "models/circuits/providernetwork/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/providernetwork/#provider",
      "title": "Provider",
      "text": "<p>The provider responsible for the operation of this network.</p>"
    },
    {
      "location": "models/circuits/providernetwork/#name",
      "title": "Name",
      "text": "<p>A human-friendly name, unique to the provider.</p>"
    },
    {
      "location": "models/circuits/providernetwork/#service-id",
      "title": "Service ID",
      "text": "<p>An arbitrary identifier used as an alternate reference for the type of connectivity or service being delivered.</p>"
    },
    {
      "location": "models/circuits/virtualcircuit/",
      "title": "Virtual Circuits",
      "text": "<p>This feature was introduced in NetBox v4.2.</p> <p>A virtual circuit can connect two or more interfaces atop a set of decoupled physical connections. For example, it's very common to form a virtual connection between two virtual interfaces, each of which is bound to a physical interface on its respective device and physically connected to a provider network via an independent physical circuit.</p>"
    },
    {
      "location": "models/circuits/virtualcircuit/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/virtualcircuit/#provider-network",
      "title": "Provider Network",
      "text": "<p>The provider network across which the virtual circuit is formed.</p>"
    },
    {
      "location": "models/circuits/virtualcircuit/#provider-account",
      "title": "Provider Account",
      "text": "<p>The provider account with which the virtual circuit is associated (if any).</p>"
    },
    {
      "location": "models/circuits/virtualcircuit/#circuit-id",
      "title": "Circuit ID",
      "text": "<p>The unique identifier assigned to the virtual circuit by its provider.</p>"
    },
    {
      "location": "models/circuits/virtualcircuit/#type",
      "title": "Type",
      "text": "<p>The assigned virtual circuit type.</p>"
    },
    {
      "location": "models/circuits/virtualcircuit/#status",
      "title": "Status",
      "text": "<p>The operational status of the virtual circuit. By default, the following statuses are available:</p> Name Planned Provisioning Active Offline Deprovisioning Decommissioned <p>Custom circuit statuses</p> <p>Additional circuit statuses may be defined by setting <code>Circuit.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/circuits/virtualcircuittermination/",
      "title": "Virtual Circuit Terminations",
      "text": "<p>This feature was introduced in NetBox v4.2.</p> <p>This model represents the connection of a virtual interface to a virtual circuit.</p>"
    },
    {
      "location": "models/circuits/virtualcircuittermination/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/virtualcircuittermination/#virtual-circuit",
      "title": "Virtual Circuit",
      "text": "<p>The virtual circuit to which the interface is connected.</p>"
    },
    {
      "location": "models/circuits/virtualcircuittermination/#interface",
      "title": "Interface",
      "text": "<p>The interface connected to the virtual circuit.</p>"
    },
    {
      "location": "models/circuits/virtualcircuittermination/#role",
      "title": "Role",
      "text": "<p>The functional role of the termination. This depends on the virtual circuit's topology, which is typically either peer-to-peer or hub-and-spoke (multipoint). Valid choices include:</p> <ul> <li>Peer</li> <li>Hub</li> <li>Spoke</li> </ul>"
    },
    {
      "location": "models/circuits/virtualcircuittype/",
      "title": "Virtual Circuit Types",
      "text": "<p>Like physical circuits, virtual circuits are classified by functional type. These types are completely customizable, and can help categorize circuits by function or technology.</p>"
    },
    {
      "location": "models/circuits/virtualcircuittype/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/circuits/virtualcircuittype/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/circuits/virtualcircuittype/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/core/datafile/",
      "title": "Data Files",
      "text": "<p>A data file object is the representation in NetBox's database of some file belonging to a remote data source. Data files are synchronized automatically, and cannot be modified locally (although they can be deleted).</p>"
    },
    {
      "location": "models/core/datafile/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/core/datafile/#source",
      "title": "Source",
      "text": "<p>The data source to which this file belongs.</p>"
    },
    {
      "location": "models/core/datafile/#path",
      "title": "Path",
      "text": "<p>The path to the file, relative to its source's URL. For example, a file at <code>/opt/config-data/routing/bgp/peer.yaml</code> with a source URL of <code>file:///opt/config-data/</code> would have its path set to <code>routing/bgp/peer.yaml</code>.</p>"
    },
    {
      "location": "models/core/datafile/#last-updated",
      "title": "Last Updated",
      "text": "<p>The date and time at which the file most recently updated from its source. Note that this attribute is updated only when the file's contents have been modified. Re-synchronizing the data source will not update this timestamp if the upstream file's data has not changed.</p>"
    },
    {
      "location": "models/core/datafile/#size",
      "title": "Size",
      "text": "<p>The file's size, in bytes.</p>"
    },
    {
      "location": "models/core/datafile/#hash",
      "title": "Hash",
      "text": "<p>A SHA256 hash of the file's data. This can be compared to a hash taken from the original file to determine whether any changes have been made.</p>"
    },
    {
      "location": "models/core/datasource/",
      "title": "Data Sources",
      "text": "<p>A data source represents some external repository of data which NetBox can consume, such as a git repository. Files within the data source are synchronized to NetBox by saving them in the database as data file objects.</p>"
    },
    {
      "location": "models/core/datasource/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/core/datasource/#name",
      "title": "Name",
      "text": "<p>The data source's human-friendly name.</p>"
    },
    {
      "location": "models/core/datasource/#type",
      "title": "Type",
      "text": "<p>The type of data source. Supported options include:</p> <ul> <li>Local directory</li> <li>git repository</li> <li>Amazon S3 bucket</li> </ul>"
    },
    {
      "location": "models/core/datasource/#url",
      "title": "URL",
      "text": "<p>The URL identifying the remote source. Some examples are included below.</p> Type Example URL Local file:///path/to/my/data/ git https://github.com/my-organization/my-repo Amazon S3 https://s3.us-east-2.amazonaws.com/my-bucket-name/"
    },
    {
      "location": "models/core/datasource/#status",
      "title": "Status",
      "text": "<p>The source's current synchronization status. Note that this cannot be set manually: It is updated automatically when the source is synchronized.</p>"
    },
    {
      "location": "models/core/datasource/#enabled",
      "title": "Enabled",
      "text": "<p>If false, synchronization will be disabled.</p>"
    },
    {
      "location": "models/core/datasource/#ignore-rules",
      "title": "Ignore Rules",
      "text": "<p>A set of rules (one per line) identifying filenames to ignore during synchronization. Some examples are provided below. See Python's <code>fnmatch()</code> documentation for a complete reference.</p> Rule Description <code>README</code> Ignore any files named <code>README</code> <code>*.txt</code> Ignore any files with a <code>.txt</code> extension <code>data???.json</code> Ignore e.g. <code>data123.json</code>"
    },
    {
      "location": "models/core/datasource/#last-synced",
      "title": "Last Synced",
      "text": "<p>The date and time at which the source was most recently synchronized successfully.</p>"
    },
    {
      "location": "models/core/job/",
      "title": "Jobs",
      "text": "<p>The Job model is used to schedule and record the execution of background tasks.</p>"
    },
    { "location": "models/core/job/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/core/job/#name",
      "title": "Name",
      "text": "<p>The name or other identifier of the NetBox object with which the job is associated.</p>"
    },
    {
      "location": "models/core/job/#object-type",
      "title": "Object Type",
      "text": "<p>The type of object (model) associated with this job.</p>"
    },
    {
      "location": "models/core/job/#created",
      "title": "Created",
      "text": "<p>The date and time at which the job itself was created.</p>"
    },
    {
      "location": "models/core/job/#scheduled",
      "title": "Scheduled",
      "text": "<p>The date and time at which the job is/was scheduled to execute (if not submitted for immediate execution at the time of creation).</p>"
    },
    {
      "location": "models/core/job/#interval",
      "title": "Interval",
      "text": "<p>The interval (in minutes) at which a scheduled job should re-execute.</p>"
    },
    {
      "location": "models/core/job/#completed",
      "title": "Completed",
      "text": "<p>The date and time at which the job completed (if complete).</p>"
    },
    {
      "location": "models/core/job/#user",
      "title": "User",
      "text": "<p>The user who created the job.</p>"
    },
    {
      "location": "models/core/job/#status",
      "title": "Status",
      "text": "<p>The job's current status. Potential values include:</p> Value Description Pending Awaiting execution by an RQ worker process Scheduled Scheduled for a future date/time Running Currently executing Completed Successfully completed Failed The job did not complete successfully Errored An unexpected error was encountered during execution"
    },
    {
      "location": "models/core/job/#data",
      "title": "Data",
      "text": "<p>Any data associated with the execution of the job, such as log output.</p>"
    },
    {
      "location": "models/core/job/#job-id",
      "title": "Job ID",
      "text": "<p>The job's UUID, used for unique identification within a queue.</p>"
    },
    {
      "location": "models/dcim/cable/",
      "title": "Cables",
      "text": "<p>All connections between device components in NetBox are represented using cables. A cable represents a direct physical connection between two sets of endpoints (A and B), such as a console port and a patch panel port, or between two network interfaces. Cables may be connected to the following objects:</p> <ul> <li>Network interfaces</li> <li>Console ports</li> <li>Console server ports</li> <li>Pass-through ports (front and rear)</li> <li>Circuit terminations</li> <li>Power ports</li> <li>Power outlets</li> <li>Power feeds</li> </ul>"
    },
    { "location": "models/dcim/cable/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/dcim/cable/#status",
      "title": "Status",
      "text": "<p>The cable's operational status. Choices include:</p> <ul> <li>Active (default)</li> <li>Planned</li> <li>Decommissioning</li> </ul>"
    },
    {
      "location": "models/dcim/cable/#type",
      "title": "Type",
      "text": "<p>The cable's physical medium or classification.</p>"
    },
    {
      "location": "models/dcim/cable/#label",
      "title": "Label",
      "text": "<p>An arbitrary label used to identify the cable.</p>"
    },
    {
      "location": "models/dcim/cable/#color",
      "title": "Color",
      "text": "<p>The color of the cable.</p>"
    },
    {
      "location": "models/dcim/cable/#length",
      "title": "Length",
      "text": "<p>The numeric length of the cable, including a unit designation (e.g. 100 meters or 25 feet).</p>"
    },
    {
      "location": "models/dcim/cable/#tracing-cables",
      "title": "Tracing Cables",
      "text": "<p>A cable may be traced from any of its endpoints by clicking the \"trace\" button. (A REST API endpoint also provides this functionality.) NetBox will follow the path of connected cables from this termination across the directly connected cable to the far-end termination. If the cable connects to a pass-through port, and the peer port has another cable connected, NetBox will continue following the cable path until it encounters a non-pass-through or unconnected termination point. The entire path will be displayed to the user.</p>"
    },
    {
      "location": "models/dcim/consoleport/",
      "title": "Console Ports",
      "text": "<p>A console port provides connectivity to the physical console of a device. These are typically used for temporary access by someone who is physically near the device, or for remote out-of-band access provided via a networked console server.</p> <p>Tip</p> <p>Like most device components, console ports are instantiated automatically from console port templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/consoleport/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/consoleport/#device",
      "title": "Device",
      "text": "<p>The device to which this console port belongs.</p>"
    },
    {
      "location": "models/dcim/consoleport/#module",
      "title": "Module",
      "text": "<p>The installed module within the assigned device to which this console port belongs (optional).</p>"
    },
    {
      "location": "models/dcim/consoleport/#name",
      "title": "Name",
      "text": "<p>The name of the console port. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/consoleport/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the console port.</p>"
    },
    {
      "location": "models/dcim/consoleport/#type",
      "title": "Type",
      "text": "<p>The type of console port.</p>"
    },
    {
      "location": "models/dcim/consoleport/#speed",
      "title": "Speed",
      "text": "<p>Operating speed, in bits per second (bps).</p>"
    },
    {
      "location": "models/dcim/consoleport/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, this component will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/consoleporttemplate/",
      "title": "Console Port Templates",
      "text": "<p>A template for a console port that will be created on all instantiations of the parent device type. See the console port documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/consoleserverport/",
      "title": "Console Server Ports",
      "text": "<p>A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices, and generally connect to console ports.</p> <p>Tip</p> <p>Like most device components, console server ports are instantiated automatically from console server port templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/consoleserverport/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/consoleserverport/#device",
      "title": "Device",
      "text": "<p>The device to which this console server port belongs.</p>"
    },
    {
      "location": "models/dcim/consoleserverport/#module",
      "title": "Module",
      "text": "<p>The installed module within the assigned device to which this console server port belongs (optional).</p>"
    },
    {
      "location": "models/dcim/consoleserverport/#name",
      "title": "Name",
      "text": "<p>The name of the console server port. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/consoleserverport/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the console server port.</p>"
    },
    {
      "location": "models/dcim/consoleserverport/#type",
      "title": "Type",
      "text": "<p>The type of console server port.</p>"
    },
    {
      "location": "models/dcim/consoleserverport/#speed",
      "title": "Speed",
      "text": "<p>Operating speed, in bits per second (bps).</p>"
    },
    {
      "location": "models/dcim/consoleserverport/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, this component will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/consoleserverporttemplate/",
      "title": "Console Server Port Templates",
      "text": "<p>A template for a console server port that will be created on all instantiations of the parent device type. See the console server port documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/device/",
      "title": "Devices",
      "text": "<p>Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.</p> <p>When assigning a multi-U device to a rack, it is considered to be mounted in the lowest-numbered rack unit which it occupies. For example, a 3U device which occupies U8 through U10 is said to be mounted in U8. This logic applies to racks with both ascending and descending unit numbering.</p> <p>A device is said to be full-depth if its installation on one rack face prevents the installation of any other device on the opposite face within the same rack unit(s). This could be either because the device is physically too deep to allow a device behind it, or because the installation of an opposing device would impede airflow.</p> <p>Each device must be instantiated from a pre-created device type, and its default components (console ports, power ports, interfaces, etc.) will be created automatically. (The device type associated with a device may be changed after its creation, however its components will not be updated retroactively.)</p> <p>Device names must be unique within a site, unless the device has been assigned to a tenant. Devices may also be unnamed.</p> <p>When a device has one or more interfaces with IP addresses assigned, a primary IP for the device can be designated, for both IPv4 and IPv6.</p>"
    },
    { "location": "models/dcim/device/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/dcim/device/#name",
      "title": "Name",
      "text": "<p>The device's configured name. This field is optional; devices can be unnamed. However, if set, the name must be unique to the assigned site and tenant.</p>"
    },
    {
      "location": "models/dcim/device/#role",
      "title": "Role",
      "text": "<p>The functional device role assigned to this device.</p>"
    },
    {
      "location": "models/dcim/device/#device-type",
      "title": "Device Type",
      "text": "<p>The hardware device type which defines the device's make &amp; model. Upon creating, all templated components assigned to the device type will be replicated on the new device.</p>"
    },
    {
      "location": "models/dcim/device/#airflow",
      "title": "Airflow",
      "text": "<p>The direction in which air circulates through the device chassis for cooling.</p>"
    },
    {
      "location": "models/dcim/device/#serial-number",
      "title": "Serial Number",
      "text": "<p>The unique physical serial number assigned to this device by its manufacturer.</p>"
    },
    {
      "location": "models/dcim/device/#asset-tag",
      "title": "Asset Tag",
      "text": "<p>A unique, locally-administered label used to identify hardware resources.</p>"
    },
    {
      "location": "models/dcim/device/#site",
      "title": "Site",
      "text": "<p>The site in which this device is located.</p>"
    },
    {
      "location": "models/dcim/device/#location",
      "title": "Location",
      "text": "<p>A specific location where this device resides within the assigned site (optional).</p>"
    },
    {
      "location": "models/dcim/device/#rack",
      "title": "Rack",
      "text": "<p>The rack within which this device is installed (optional).</p>"
    },
    {
      "location": "models/dcim/device/#rack-face",
      "title": "Rack Face",
      "text": "<p>If installed in a rack, this field denotes the primary face on which the device is mounted.</p>"
    },
    {
      "location": "models/dcim/device/#position",
      "title": "Position",
      "text": "<p>If installed in a rack, this field indicates the base rack unit in which the device is mounted.</p> <p>Tip</p> <p>Devices with a height of more than one rack unit should be set to the lowest-numbered rack unit that they occupy.</p>"
    },
    {
      "location": "models/dcim/device/#latitude-longitude",
      "title": "Latitude &amp; Longitude",
      "text": "<p>GPS coordinates of the device for geolocation.</p>"
    },
    {
      "location": "models/dcim/device/#status",
      "title": "Status",
      "text": "<p>The device's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Device.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/dcim/device/#platform",
      "title": "Platform",
      "text": "<p>A device may be associated with a particular platform to indicate its operating system. Note that only platforms assigned to the associated manufacturer (or to no manufacturer) will be available for selection.</p>"
    },
    {
      "location": "models/dcim/device/#configuration-template",
      "title": "Configuration Template",
      "text": "<p>The configuration template from which the configuration for this device can be rendered. If set, this will override any config template referenced by the device's role or platform.</p>"
    },
    {
      "location": "models/dcim/device/#primary-ipv4-ipv6-addresses",
      "title": "Primary IPv4 &amp; IPv6 Addresses",
      "text": "<p>Each device may designate one primary IPv4 address and/or one primary IPv6 address for management purposes.</p> <p>Tip</p> <p>NetBox will prefer IPv6 addresses over IPv4 addresses by default. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"
    },
    {
      "location": "models/dcim/device/#out-of-band-oob-ip-address",
      "title": "Out-of-band (OOB) IP Address",
      "text": "<p>Each device may designate its out-of-band IP address. Out-of-band IPs are typically used to access network infrastructure via a physically separate management network.</p>"
    },
    {
      "location": "models/dcim/device/#cluster",
      "title": "Cluster",
      "text": "<p>If this device will serve as a host for a virtualization cluster, it can be assigned here. (Host devices can also be assigned by editing the cluster.)</p>"
    },
    {
      "location": "models/dcim/device/#virtual-chassis",
      "title": "Virtual Chassis",
      "text": "<p>The virtual chassis of which this device is a member, if any.</p>"
    },
    {
      "location": "models/dcim/device/#vc-position",
      "title": "VC Position",
      "text": "<p>If assigned to a virtual chassis, this field indicates the device's member position.</p>"
    },
    {
      "location": "models/dcim/device/#vc-priority",
      "title": "VC Priority",
      "text": "<p>If assigned to a virtual chassis, this field indicates the device's priority for master election.</p>"
    },
    {
      "location": "models/dcim/device/#local-config-context-data",
      "title": "Local Config Context Data",
      "text": "<p>Any unique context data to be associated with the device.</p>"
    },
    {
      "location": "models/dcim/devicebay/",
      "title": "Device Bays",
      "text": "<p>Device bays represent a space or slot within a parent device in which a child device may be installed. For example, a 2U parent chassis might house four individual blade servers. The chassis would appear in the rack elevation as a 2U device with four device bays, and each server within it would be defined as a 0U device installed in one of the device bays. Child devices do not appear within rack elevations or count as consuming rack units.</p> <p>Child devices are first-class Devices in their own right: That is, they are fully independent managed entities which don't share any control plane with the parent.  Just like normal devices, child devices have their own platform (OS), role, tags, and components.  LAG interfaces may not group interfaces belonging to different child devices.</p> <p>Note</p> <p>Device bays are not suitable for modeling line cards (such as those commonly found in chassis-based routers and switches), as these components depend on the control plane of the parent device to operate. Instead, these should be modeled as modules installed within module bays.</p> <p>Tip</p> <p>Like most device components, device bays are instantiated automatically from device bay templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/devicebay/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/devicebay/#device",
      "title": "Device",
      "text": "<p>The device to which this device bay belongs.</p>"
    },
    {
      "location": "models/dcim/devicebay/#name",
      "title": "Name",
      "text": "<p>The device bay's name. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/devicebay/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the device bay.</p>"
    },
    {
      "location": "models/dcim/devicebaytemplate/",
      "title": "Device Bay Templates",
      "text": "<p>A template for a device bay that will be created on all instantiations of the parent device type. See the device bay documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/devicerole/",
      "title": "Device Roles",
      "text": "<p>Devices can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for core switches, distribution switches, and access switches within your network.</p>"
    },
    {
      "location": "models/dcim/devicerole/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/devicerole/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/dcim/devicerole/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/devicerole/#color",
      "title": "Color",
      "text": "<p>The color used when displaying the role in the NetBox UI.</p>"
    },
    {
      "location": "models/dcim/devicerole/#vm-role",
      "title": "VM Role",
      "text": "<p>If selected, this role may be assigned to virtual machines</p>"
    },
    {
      "location": "models/dcim/devicerole/#configuration-template",
      "title": "Configuration Template",
      "text": "<p>The default configuration template for devices assigned to this role.</p>"
    },
    {
      "location": "models/dcim/devicetype/",
      "title": "Device Types",
      "text": "<p>A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).</p> <p>Device types are instantiated as devices installed within sites and/or equipment racks. For example, you might define a device type to represent a Juniper EX4300-48T network switch with 48 Ethernet interfaces. You can then create multiple instances of this type named \"switch1,\" \"switch2,\" and so on. Each device will automatically inherit the components (such as interfaces) of its device type at the time of creation. However, changes made to a device type will not apply to instances of that device type retroactively.</p> <p>Note</p> <p>This parent/child relationship is not suitable for modeling chassis-based devices, wherein child members share a common control plane. Instead, line cards and similarly non-autonomous hardware should be modeled as modules or inventory items within a device.</p>"
    },
    {
      "location": "models/dcim/devicetype/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/devicetype/#manufacturer",
      "title": "Manufacturer",
      "text": "<p>The manufacturer which produces this type of device.</p>"
    },
    {
      "location": "models/dcim/devicetype/#model",
      "title": "Model",
      "text": "<p>The model number assigned to this device type by its manufacturer. Must be unique to the manufacturer.</p>"
    },
    {
      "location": "models/dcim/devicetype/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly representation of the model identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/devicetype/#default-platform",
      "title": "Default Platform",
      "text": "<p>If defined, devices instantiated from this type will automatically inherit the selected platform. (This assignment can be changed after the device has been created.)</p>"
    },
    {
      "location": "models/dcim/devicetype/#part-number",
      "title": "Part Number",
      "text": "<p>An alternative part number to uniquely identify the device type.</p>"
    },
    {
      "location": "models/dcim/devicetype/#height",
      "title": "Height",
      "text": "<p>The height of the physical device in rack units. (For device types that are not rack-mountable, this should be <code>0</code>.)</p>"
    },
    {
      "location": "models/dcim/devicetype/#is-full-depth",
      "title": "Is Full Depth",
      "text": "<p>If selected, this device type is considered to occupy both the front and rear faces of a rack, regardless of which face it is assigned.</p>"
    },
    {
      "location": "models/dcim/devicetype/#parentchild-status",
      "title": "Parent/Child Status",
      "text": "<p>Indicates whether this is a parent type (capable of housing child devices), a child type (which must be installed within a device bay), or neither.</p>"
    },
    {
      "location": "models/dcim/devicetype/#airflow",
      "title": "Airflow",
      "text": "<p>The default direction in which airflow circulates within the device chassis. This may be configured differently for instantiated devices (e.g. because of different fan modules).</p>"
    },
    {
      "location": "models/dcim/devicetype/#weight",
      "title": "Weight",
      "text": "<p>The numeric weight of the device, including a unit designation (e.g. 10 kilograms or 20 pounds).</p>"
    },
    {
      "location": "models/dcim/devicetype/#front-rear-images",
      "title": "Front &amp; Rear Images",
      "text": "<p>Users can upload illustrations of the device's front and rear panels. If present, these will be used to render the device in rack elevation diagrams.</p>"
    },
    {
      "location": "models/dcim/frontport/",
      "title": "Front Ports",
      "text": "<p>Front ports are pass-through ports which represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in NetBox as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple front ports, using numeric positions to annotate the specific alignment of each.</p> <p>Tip</p> <p>Like most device components, front ports are instantiated automatically from front port templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/frontport/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/frontport/#device",
      "title": "Device",
      "text": "<p>The device to which this port belongs.</p>"
    },
    {
      "location": "models/dcim/frontport/#module",
      "title": "Module",
      "text": "<p>The installed module within the assigned device to which this port belongs (optional).</p>"
    },
    {
      "location": "models/dcim/frontport/#name",
      "title": "Name",
      "text": "<p>The port's name. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/frontport/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the port.</p>"
    },
    {
      "location": "models/dcim/frontport/#type",
      "title": "Type",
      "text": "<p>The port's termination type.</p>"
    },
    {
      "location": "models/dcim/frontport/#rear-ports",
      "title": "Rear Ports",
      "text": "<p>The rear port and position to which this front port maps.</p> <p>Tip</p> <p>When creating multiple front ports using a patterned name (e.g. <code>Port [1-12]</code>), you may select the equivalent number of rear port-position mappings from the list.</p>"
    },
    {
      "location": "models/dcim/frontport/#color",
      "title": "Color",
      "text": "<p>The port's color (optional).</p>"
    },
    {
      "location": "models/dcim/frontport/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, this component will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/frontporttemplate/",
      "title": "Front Port Templates",
      "text": "<p>A template for a front-facing pass-through port that will be created on all instantiations of the parent device type. See the front port documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/interface/",
      "title": "Interfaces",
      "text": "<p>Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.</p> <p>Tip</p> <p>Like most device components, interfaces are instantiated automatically from interface templates assigned to the selected device type when a device is created.</p> <p>Note</p> <p>Although both devices and virtual machines both can have interfaces assigned, a separate model is used for each. Thus, device interfaces have some properties that are not present on virtual machine interfaces and vice versa.</p>"
    },
    {
      "location": "models/dcim/interface/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/interface/#device",
      "title": "Device",
      "text": "<p>The device to which this interface belongs.</p>"
    },
    {
      "location": "models/dcim/interface/#module",
      "title": "Module",
      "text": "<p>The installed module within the assigned device to which this interface belongs (optional).</p>"
    },
    {
      "location": "models/dcim/interface/#name",
      "title": "Name",
      "text": "<p>The name of the interface, as reported by the device's operating system. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/interface/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the interface.</p>"
    },
    {
      "location": "models/dcim/interface/#type",
      "title": "Type",
      "text": "<p>The type of interface. Interfaces may be physical or virtual in nature, but only physical interfaces may be connected via cables.</p> <p>Note</p> <p>The interface type refers to the physical termination or port on the device. Interfaces which employ a removable optic or similar transceiver should be defined to represent the type of transceiver in use, irrespective of the physical termination to that transceiver.</p>"
    },
    {
      "location": "models/dcim/interface/#speed",
      "title": "Speed",
      "text": "<p>The operating speed, in kilobits per second (kbps).</p>"
    },
    {
      "location": "models/dcim/interface/#duplex",
      "title": "Duplex",
      "text": "<p>The operation duplex (full, half, or auto).</p>"
    },
    {
      "location": "models/dcim/interface/#vrf",
      "title": "VRF",
      "text": "<p>The virtual routing and forwarding instance to which this interface is assigned.</p>"
    },
    {
      "location": "models/dcim/interface/#primary-mac-address",
      "title": "Primary MAC Address",
      "text": "<p>The MAC address assigned to this interface which is designated as its primary.</p> <p>Changed in NetBox v4.2</p> <p>The MAC address of an interface (formerly a concrete database field) is available as a property, <code>mac_address</code>, which reflects the value of the primary linked MAC address object.</p>"
    },
    {
      "location": "models/dcim/interface/#wwn",
      "title": "WWN",
      "text": "<p>The 64-bit world-wide name (for Fibre Channel interfaces).</p>"
    },
    {
      "location": "models/dcim/interface/#mtu",
      "title": "MTU",
      "text": "<p>The interface's configured maximum transmissible unit (MTU).</p>"
    },
    {
      "location": "models/dcim/interface/#transmit-power",
      "title": "Transmit Power",
      "text": "<p>The interface's configured output power, in dBm (for optical interfaces).</p>"
    },
    {
      "location": "models/dcim/interface/#enabled",
      "title": "Enabled",
      "text": "<p>If not selected, this interface will be treated as disabled/inoperative.</p>"
    },
    {
      "location": "models/dcim/interface/#management-only",
      "title": "Management Only",
      "text": "<p>Designates the interface as handling management traffic only (e.g. for out-of-band management connections).</p>"
    },
    {
      "location": "models/dcim/interface/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, this component will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/interface/#parent-interface",
      "title": "Parent Interface",
      "text": "<p>Virtual interfaces can be bound to a physical parent interface. This is helpful for modeling virtual interfaces which employ encapsulation on a physical interface, such as an 802.1Q VLAN-tagged subinterface.</p> <p>Note</p> <p>An interface with one or more child interfaces assigned cannot be deleted until all its child interfaces have been deleted or reassigned.</p>"
    },
    {
      "location": "models/dcim/interface/#bridged-interface",
      "title": "Bridged Interface",
      "text": "<p>Interfaces can be bridged to other interfaces on a device in two manners: symmetric or grouped.</p> <ul> <li>Symmetric: For example, eth0 is bridged to eth1, and eth1 is bridged to eth0. This effects a point-to-point bridge between the two interfaces, which NetBox will follow when tracing cable paths.</li> <li>Grouped: Multiple interfaces are each bridged to a common virtual bridge interface, effecting a multiaccess bridged segment. NetBox cannot follow these relationships when tracing cable paths, because no forwarding information is available.</li> </ul>"
    },
    {
      "location": "models/dcim/interface/#lag-interface",
      "title": "LAG Interface",
      "text": "<p>Physical interfaces may be arranged into link aggregation groups (LAGs, also known as \"trunks\") and associated with a parent LAG (virtual) interface. LAG interfaces can be recursively nested to model bonding of trunk groups. Like all virtual interfaces, LAG interfaces cannot be connected physically.</p>"
    },
    {
      "location": "models/dcim/interface/#poe-mode",
      "title": "PoE Mode",
      "text": "<p>The power over Ethernet (PoE) mode for this interface. (This field must be left empty for interfaces which do not support PoE.) Choices include:</p> <ul> <li>Powered device (PD)</li> <li>Power-supplying equipment (PSE)</li> </ul>"
    },
    {
      "location": "models/dcim/interface/#poe-type",
      "title": "PoE Type",
      "text": "<p>The classification of PoE transmission supported, for PoE-enabled interfaces. This can be one of the listed IEEE 802.3 standards, or a passive setting (24 or 48 volts across two or four pairs).</p>"
    },
    {
      "location": "models/dcim/interface/#8021q-mode",
      "title": "802.1Q Mode",
      "text": "<p>For switched Ethernet interfaces, this identifies the 802.1Q encapsulation strategy in effect. Options include:</p> <ul> <li>Access: All traffic is assigned to a single VLAN, with no tagging.</li> <li>Tagged: One untagged \"native\" VLAN is allowed, as well as any number of tagged VLANs.</li> <li>Tagged (all): Implies that all VLANs are carried by the interface. One untagged VLAN may be designated.</li> <li>Q-in-Q: Q-in-Q (IEEE 802.1ad) encapsulation is performed using the assigned SVLAN.</li> </ul> <p>This field must be left blank for routed interfaces which do employ 802.1Q encapsulation.</p>"
    },
    {
      "location": "models/dcim/interface/#untagged-vlan",
      "title": "Untagged VLAN",
      "text": "<p>The \"native\" (untagged) VLAN for the interface. Valid only when one of the above 802.1Q mode is selected.</p>"
    },
    {
      "location": "models/dcim/interface/#tagged-vlans",
      "title": "Tagged VLANs",
      "text": "<p>The tagged VLANs which are configured to be carried by this interface. Valid only for the \"tagged\" 802.1Q mode above.</p>"
    },
    {
      "location": "models/dcim/interface/#q-in-q-svlan",
      "title": "Q-in-Q SVLAN",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The assigned service VLAN (for Q-in-Q/802.1ad interfaces).</p>"
    },
    {
      "location": "models/dcim/interface/#wireless-role",
      "title": "Wireless Role",
      "text": "<p>Indicates the configured role for wireless interfaces (access point or station).</p>"
    },
    {
      "location": "models/dcim/interface/#wireless-channel",
      "title": "Wireless Channel",
      "text": "<p>The configured channel for wireless interfaces.</p> <p>Tip</p> <p>Selecting one of the pre-defined wireless channels will automatically populate the channel frequency and width upon saving the interface.</p>"
    },
    {
      "location": "models/dcim/interface/#channel-frequency",
      "title": "Channel Frequency",
      "text": "<p>The configured operation frequency of a wireless interface, in MHz. This is typically inferred by the configured channel above, but may be set manually e.g. to identify a licensed channel not available for general use.</p>"
    },
    {
      "location": "models/dcim/interface/#channel-width",
      "title": "Channel Width",
      "text": "<p>The configured channel width of a wireless interface, in MHz. This is typically inferred by the configured channel above, but may be set manually e.g. to identify a licensed channel not available for general use.</p>"
    },
    {
      "location": "models/dcim/interface/#wireless-lans",
      "title": "Wireless LANs",
      "text": "<p>The wireless LANs for which this interface carries traffic. (Valid for wireless interfaces only.)</p>"
    },
    {
      "location": "models/dcim/interface/#vlan-translation-policy",
      "title": "VLAN Translation Policy",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The VLAN translation policy that applies to this interface (optional).</p>"
    },
    {
      "location": "models/dcim/interfacetemplate/",
      "title": "Interface Templates",
      "text": "<p>A template for a network interface that will be created on all instantiations of the parent device type. See the interface documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/",
      "title": "Inventory Items",
      "text": "<p>Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card. They are intended to be used primarily for inventory purposes.</p> <p>Inventory items are hierarchical in nature, such that any individual item may be designated as the parent for other items. For example, an inventory item might be created to represent a line card which houses several SFP optics, each of which exists as a child item within the device. An inventory item may also be associated with a specific component within the same device. For example, you may wish to associate a transceiver with an interface.</p> <p>Tip</p> <p>Like most device components, inventory items can be instantiated automatically from templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/inventoryitem/#device",
      "title": "Device",
      "text": "<p>The device in which the inventory item is installed.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#parent",
      "title": "Parent",
      "text": "<p>The parent inventory item to which this item is assigned (optional).</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#name",
      "title": "Name",
      "text": "<p>The inventory item's name. If the inventory item is assigned to a parent item, its name must be unique among its siblings (all items belonging to the same parent item).</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the inventory item.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#status",
      "title": "Status",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The inventory item's operational status.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#role",
      "title": "Role",
      "text": "<p>The functional role assigned to this inventory item.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#manufacturer",
      "title": "Manufacturer",
      "text": "<p>The manufacturer that produced the item.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#part-id",
      "title": "Part ID",
      "text": "<p>The part identification or model number assigned by the manufacturer.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#serial-number",
      "title": "Serial Number",
      "text": "<p>The serial number assigned by the manufacturer.</p>"
    },
    {
      "location": "models/dcim/inventoryitem/#asset-tag",
      "title": "Asset Tag",
      "text": "<p>A unique, locally-administered label used to identify hardware resources.</p>"
    },
    {
      "location": "models/dcim/inventoryitemrole/",
      "title": "Inventory Item Roles",
      "text": "<p>Inventory items can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for power supplies, fans, interface optics, etc.</p>"
    },
    {
      "location": "models/dcim/inventoryitemrole/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/inventoryitemrole/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/dcim/inventoryitemrole/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/inventoryitemrole/#color",
      "title": "Color",
      "text": "<p>The color used when displaying the role in the NetBox UI.</p>"
    },
    {
      "location": "models/dcim/inventoryitemtemplate/",
      "title": "Inventory Item Templates",
      "text": "<p>A template for an inventory item that will be automatically created when instantiating a new device. All attributes of this object will be copied to the new inventory item, including the associations with a parent item and assigned component, if any. See the inventory item documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/location/",
      "title": "Locations",
      "text": "<p>Racks and devices can be grouped by location within a site. A location may represent a floor, room, cage, or similar organizational unit. Locations can be nested to form a hierarchy. For example, you may have floors within a site, and rooms within a floor.</p>"
    },
    {
      "location": "models/dcim/location/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/location/#site",
      "title": "Site",
      "text": "<p>The parent site to which this location belongs.</p>"
    },
    {
      "location": "models/dcim/location/#parent",
      "title": "Parent",
      "text": "<p>The parent location of which this location is a child (optional).</p>"
    },
    {
      "location": "models/dcim/location/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/dcim/location/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/location/#status",
      "title": "Status",
      "text": "<p>The location's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Location.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/dcim/location/#facility",
      "title": "Facility",
      "text": "<p>Data center or facility designation for identifying the location.</p>"
    },
    {
      "location": "models/dcim/macaddress/",
      "title": "MAC Addresses",
      "text": "<p>This feature was introduced in NetBox v4.2.</p> <p>A MAC address object in NetBox comprises a single Ethernet link layer address, and represents a MAC address as reported by or assigned to a network interface. MAC addresses can be assigned to device and virtual machine interfaces. A MAC address can be specified as the primary MAC address for a given device or VM interface.</p> <p>Most interfaces have only a single MAC address, hard-coded at the factory. However, on some devices (particularly virtual interfaces) it is possible to assign additional MAC addresses or change existing ones. For this reason NetBox allows multiple MACAddress objects to be assigned to a single interface.</p>"
    },
    {
      "location": "models/dcim/macaddress/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/macaddress/#mac-address",
      "title": "MAC Address",
      "text": "<p>The 48-bit MAC address, in colon-hexadecimal notation (e.g. <code>aa:bb:cc:11:22:33</code>).</p>"
    },
    {
      "location": "models/dcim/manufacturer/",
      "title": "Manufacturers",
      "text": "<p>A manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer. (Inventory items and platforms may also be associated with manufacturers.)</p>"
    },
    {
      "location": "models/dcim/manufacturer/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/manufacturer/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/dcim/manufacturer/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/module/",
      "title": "Modules",
      "text": "<p>A module is a field-replaceable hardware component installed within a device which houses its own child components. The most common example is a chassis-based router or switch.</p> <p>Similar to devices, modules are instantiated from module types, and any components associated with the module type are automatically instantiated on the new model. Each module must be installed within a module bay on a device, and each module bay may have only one module installed in it.</p>"
    },
    { "location": "models/dcim/module/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/dcim/module/#device",
      "title": "Device",
      "text": "<p>The parent device into which the module is installed.</p>"
    },
    {
      "location": "models/dcim/module/#module-bay",
      "title": "Module Bay",
      "text": "<p>The module bay into which the module is installed.</p>"
    },
    {
      "location": "models/dcim/module/#module-type",
      "title": "Module Type",
      "text": "<p>The module type which represents the physical make &amp; model of hardware. By default, module components will be instantiated automatically from the module type when creating a new module.</p>"
    },
    {
      "location": "models/dcim/module/#status",
      "title": "Status",
      "text": "<p>The module's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Module.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/dcim/module/#serial-number",
      "title": "Serial Number",
      "text": "<p>The unique physical serial number assigned to this module by its manufacturer.</p>"
    },
    {
      "location": "models/dcim/module/#asset-tag",
      "title": "Asset Tag",
      "text": "<p>A unique, locally-administered label used to identify hardware resources.</p>"
    },
    {
      "location": "models/dcim/module/#replicate-components",
      "title": "Replicate Components",
      "text": "<p>Controls whether templates module type components are automatically added when creating a new module.</p>"
    },
    {
      "location": "models/dcim/module/#adopt-components",
      "title": "Adopt Components",
      "text": "<p>Controls whether pre-existing components assigned to the device with the same names as components that would be created automatically will be assigned to the new module.</p>"
    },
    {
      "location": "models/dcim/modulebay/",
      "title": "Module Bays",
      "text": "<p>Module bays represent a space or slot within a device in which a field-replaceable module may be installed. A common example is that of a chassis-based switch such as the Cisco Nexus 9000 or Juniper EX9200. Modules in turn hold additional components that become available to the parent device.</p> <p>Note</p> <p>If you need to model child devices rather than modules, use a device bay instead.</p> <p>Tip</p> <p>Like most device components, module bays are instantiated automatically from module bay templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/modulebay/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/modulebay/#device",
      "title": "Device",
      "text": "<p>The device to which this module bay belongs.</p>"
    },
    {
      "location": "models/dcim/modulebay/#module",
      "title": "Module",
      "text": "<p>The module to which this bay belongs (optional).</p>"
    },
    {
      "location": "models/dcim/modulebay/#name",
      "title": "Name",
      "text": "<p>The module bay's name. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/modulebay/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the module bay.</p>"
    },
    {
      "location": "models/dcim/modulebay/#position",
      "title": "Position",
      "text": "<p>The numeric position in which this module bay is situated. For example, this would be the number assigned to a slot within a chassis-based switch.</p>"
    },
    {
      "location": "models/dcim/modulebaytemplate/",
      "title": "Module Bay Templates",
      "text": "<p>A template for a module bay that will be created on all instantiations of the parent device type. See the module bay documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/moduletype/",
      "title": "Module Types",
      "text": "<p>A module type represents a specific make and model of hardware component which is installable within a device's module bay and has its own child components. For example, consider a chassis-based switch or router with a number of field-replaceable line cards. Each line card has its own model number and includes a certain set of components such as interfaces. Each module type may have a manufacturer, model number, and part number assigned to it.</p> <p>Similar to device types, each module type can have any of the following component templates associated with it:</p> <ul> <li>Interfaces</li> <li>Console ports</li> <li>Console server ports</li> <li>Power ports</li> <li>Power Outlets</li> <li>Front pass-through ports</li> <li>Rear pass-through ports</li> </ul> <p>Note that device bays and module bays may not be added to modules.</p>"
    },
    {
      "location": "models/dcim/moduletype/#automatic-component-renaming",
      "title": "Automatic Component Renaming",
      "text": "<p>When adding component templates to a module type, the string <code>{module}</code> can be used to reference the <code>position</code> field of the module bay into which an instance of the module type is being installed.</p> <p>For example, you can create a module type with interface templates named <code>Gi{module}/0/[1-48]</code>. When a new module of this type is \"installed\" to a module bay with a position of \"3\", NetBox will automatically name these interfaces <code>Gi3/0/[1-48]</code>.</p> <p>Automatic renaming is supported for all modular component types (those listed above).</p>"
    },
    {
      "location": "models/dcim/moduletype/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/moduletype/#manufacturer",
      "title": "Manufacturer",
      "text": "<p>The manufacturer which produces this type of module.</p>"
    },
    {
      "location": "models/dcim/moduletype/#model",
      "title": "Model",
      "text": "<p>The model number assigned to this module type by its manufacturer. Must be unique to the manufacturer.</p>"
    },
    {
      "location": "models/dcim/moduletype/#part-number",
      "title": "Part Number",
      "text": "<p>An alternative part number to uniquely identify the module type.</p>"
    },
    {
      "location": "models/dcim/moduletype/#weight",
      "title": "Weight",
      "text": "<p>The numeric weight of the module, including a unit designation (e.g. 3 kilograms or 1 pound).</p>"
    },
    {
      "location": "models/dcim/moduletype/#airflow",
      "title": "Airflow",
      "text": "<p>The direction in which air circulates through the device chassis for cooling.</p>"
    },
    {
      "location": "models/dcim/platform/",
      "title": "Platforms",
      "text": "<p>A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.</p> <p>Platforms may optionally be limited by manufacturer: If a platform is assigned to a particular manufacturer, it can only be assigned to devices with a type belonging to that manufacturer.</p> <p>The assignment of platforms to devices is an optional feature, and may be disregarded if not desired.</p>"
    },
    {
      "location": "models/dcim/platform/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/platform/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/dcim/platform/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/platform/#manufacturer",
      "title": "Manufacturer",
      "text": "<p>If designated, this platform will be available for use only to devices assigned to this manufacturer. This can be handy e.g. for limiting network operating systems to use on hardware produced by the relevant vendor. However, it should not be used when defining general-purpose software platforms.</p>"
    },
    {
      "location": "models/dcim/platform/#configuration-template",
      "title": "Configuration Template",
      "text": "<p>The default configuration template for devices assigned to this platform.</p>"
    },
    {
      "location": "models/dcim/powerfeed/",
      "title": "Power Feed",
      "text": "<p>A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/powerfeed/#power-panel",
      "title": "Power Panel",
      "text": "<p>The power panel which supplies upstream power to this feed.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#rack",
      "title": "Rack",
      "text": "<p>The rack within which this feed delivers power (optional).</p>"
    },
    {
      "location": "models/dcim/powerfeed/#name",
      "title": "Name",
      "text": "<p>The feed's name or other identifier. Must be unique to the assigned power panel.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#status",
      "title": "Status",
      "text": "<p>The feed's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>PowerFeed.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#type",
      "title": "Type",
      "text": "<p>In redundant environments, each power feed can be designated as providing either primary or redundant power. (In environment with only one power source, all power feeds should be designated as primary.)</p>"
    },
    {
      "location": "models/dcim/powerfeed/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, the power feed will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#supply",
      "title": "Supply",
      "text": "<p>Electrical current type (AC or DC).</p>"
    },
    {
      "location": "models/dcim/powerfeed/#voltage",
      "title": "Voltage",
      "text": "<p>Operating circuit voltage, in volts.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#amperage",
      "title": "Amperage",
      "text": "<p>Operation circuit amperage, in amperes.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#phase",
      "title": "Phase",
      "text": "<p>Indicates whether the circuit provides single- or three-phase power.</p>"
    },
    {
      "location": "models/dcim/powerfeed/#max-utilization",
      "title": "Max Utilization",
      "text": "<p>The maximum safe utilization of the feed, expressed as a percentage of the total available power. (Typically this will be set to around 80%, to avoid tripping a breaker during heaving spikes in current draw.)</p> <p>Info</p> <p>The power utilization of a rack is calculated when one or more power feeds are assigned to the rack and connected to devices that draw power.</p>"
    },
    {
      "location": "models/dcim/poweroutlet/",
      "title": "Power Outlets",
      "text": "<p>Power outlets represent the outlets on a power distribution unit (PDU) or other device that supplies power to dependent devices. Each power port may be assigned a physical type, and may be associated with a specific feed leg (where three-phase power is used) and/or a specific upstream power port. This association can be used to model the distribution of power within a device.</p> <p>For example, imagine a PDU with one power port which draws from a three-phase feed and 48 power outlets arranged into three banks of 16 outlets each. Outlets 1-16 would be associated with leg A on the port, and outlets 17-32 and 33-48 would be associated with legs B and C, respectively.</p> <p>Tip</p> <p>Like most device components, power outlets are instantiated automatically from power outlet templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/poweroutlet/#device",
      "title": "Device",
      "text": "<p>The device to which this power outlet belongs.</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#module",
      "title": "Module",
      "text": "<p>The installed module within the assigned device to which this power outlet belongs (optional).</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#name",
      "title": "Name",
      "text": "<p>The name of the power outlet. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the power outlet.</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#type",
      "title": "Type",
      "text": "<p>The type of power outlet.</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#color",
      "title": "Color",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The power outlet's color (optional).</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#power-port",
      "title": "Power Port",
      "text": "<p>When modeling a device which redistributes power from an upstream supply, such as a power distribution unit (PDU), each power outlet should be mapped to the respective power port on the device which supplies power. For example, a 24-outlet PDU may two power ports, each distributing power to 12 of its outlets.</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#feed-leg",
      "title": "Feed Leg",
      "text": "<p>This field is used to indicate to which leg of three-phase power circuit the outlet is bound. (This should be left blank for single-phase applications.)</p>"
    },
    {
      "location": "models/dcim/poweroutlet/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, this component will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/poweroutlettemplate/",
      "title": "Power Outlet Templates",
      "text": "<p>A template for a power outlet that will be created on all instantiations of the parent device type. See the power outlet documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/powerpanel/",
      "title": "Power Panel",
      "text": "<p>A power panel represents the origin point in NetBox for electrical power being disseminated by one or more power feeds. In a data center environment, one power panel often serves a group of racks, with an individual power feed extending to each rack, though this is not always the case. It is common to have two sets of panels and feeds arranged in parallel to provide redundant power to each rack.</p> <p>Note</p> <p>NetBox does not model the mechanism by which power is delivered to a power panel. Power panels define the root level of the power distribution hierarchy in NetBox.</p>"
    },
    {
      "location": "models/dcim/powerpanel/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/powerpanel/#site",
      "title": "Site",
      "text": "<p>The site in which the power panel resides.</p>"
    },
    {
      "location": "models/dcim/powerpanel/#location",
      "title": "Location",
      "text": "<p>A specific location within the assigned site where the power panel is installed.</p>"
    },
    {
      "location": "models/dcim/powerpanel/#name",
      "title": "Name",
      "text": "<p>The power panel's name. Must be unique to the assigned site.</p>"
    },
    {
      "location": "models/dcim/powerport/",
      "title": "Power Ports",
      "text": "<p>A power port is a device component which draws power from some external source (e.g. an upstream power outlet), and generally represents a power supply internal to a device.</p> <p>Tip</p> <p>Like most device components, power ports are instantiated automatically from power port templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/powerport/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/powerport/#device",
      "title": "Device",
      "text": "<p>The device to which this power port belongs.</p>"
    },
    {
      "location": "models/dcim/powerport/#module",
      "title": "Module",
      "text": "<p>The installed module within the assigned device to which this power port belongs (optional).</p>"
    },
    {
      "location": "models/dcim/powerport/#name",
      "title": "Name",
      "text": "<p>The name of the power port. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/powerport/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the power port.</p>"
    },
    {
      "location": "models/dcim/powerport/#type",
      "title": "Type",
      "text": "<p>The type of power port.</p>"
    },
    {
      "location": "models/dcim/powerport/#maximum-draw",
      "title": "Maximum Draw",
      "text": "<p>The maximum amount of power this port consumes (in watts).</p> <p>Info</p> <p>When creating a power port on a device which is mapped to outlets and supplies power to downstream devices, the maximum and allocated draw numbers should be left blank. Utilization will be calculated by taking the sum of all power ports of devices connected downstream.</p>"
    },
    {
      "location": "models/dcim/powerport/#allocated-draw",
      "title": "Allocated Draw",
      "text": "<p>The budgeted amount of power this port consumes (in watts).</p>"
    },
    {
      "location": "models/dcim/powerport/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, this component will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/powerporttemplate/",
      "title": "Power Port Templates",
      "text": "<p>A template for a power port that will be created on all instantiations of the parent device type. See the power port documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/rack/",
      "title": "Racks",
      "text": "<p>The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a site, and may optionally be assigned to a location within that site. Racks can also be organized by user-defined functional roles. The name and facility ID of each rack within a location must be unique.</p> <p>Rack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but NetBox allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.</p> <p>Each rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, \"M204.313\") whereas internally you refer to is simply as \"R113.\" A unique serial number and asset tag may also be associated with each rack.</p>"
    },
    { "location": "models/dcim/rack/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/dcim/rack/#site",
      "title": "Site",
      "text": "<p>The site to which the rack is assigned.</p>"
    },
    {
      "location": "models/dcim/rack/#location",
      "title": "Location",
      "text": "<p>The location within a site where the rack has been installed (optional).</p>"
    },
    {
      "location": "models/dcim/rack/#name",
      "title": "Name",
      "text": "<p>The rack's name or identifier. Must be unique to the rack's location, if assigned.</p>"
    },
    {
      "location": "models/dcim/rack/#rack-type",
      "title": "Rack Type",
      "text": "<p>The physical type of this rack. The rack type defines physical attributes such as height and weight.</p>"
    },
    {
      "location": "models/dcim/rack/#status",
      "title": "Status",
      "text": "<p>Operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Rack.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/dcim/rack/#role",
      "title": "Role",
      "text": "<p>The functional role fulfilled by the rack.</p>"
    },
    {
      "location": "models/dcim/rack/#facility-id",
      "title": "Facility ID",
      "text": "<p>An alternative identifier assigned to the rack e.g. by the facility operator. This is helpful for tracking datacenter rack designations in a colocation facility.</p>"
    },
    {
      "location": "models/dcim/rack/#serial-number",
      "title": "Serial Number",
      "text": "<p>The unique physical serial number assigned to this rack.</p>"
    },
    {
      "location": "models/dcim/rack/#asset-tag",
      "title": "Asset Tag",
      "text": "<p>A unique, locally-administered label used to identify hardware resources.</p> <p>Note</p> <p>Some additional fields pertaining to physical attributes such as height and weight can also be defined on each rack, but should generally be defined instead on the rack type.</p>"
    },
    {
      "location": "models/dcim/rackreservation/",
      "title": "Rack Reservations",
      "text": "<p>Users can reserve specific units within a rack for future use. An arbitrary set of units within a rack can be associated with a single reservation, but reservations cannot span multiple racks. A description is required for each reservation, reservations may optionally be associated with a specific tenant.</p>"
    },
    {
      "location": "models/dcim/rackreservation/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/rackreservation/#rack",
      "title": "Rack",
      "text": "<p>The rack being reserved.</p>"
    },
    {
      "location": "models/dcim/rackreservation/#units",
      "title": "Units",
      "text": "<p>The rack unit or units being reserved. Multiple units can be expressed using commas and/or hyphens. For example, <code>1,3,5-7</code> specifies units 1, 3, 5, 6, and 7.</p>"
    },
    {
      "location": "models/dcim/rackreservation/#user",
      "title": "User",
      "text": "<p>The NetBox user account associated with the reservation. Note that users with sufficient permission can make rack reservations for other users.</p>"
    },
    {
      "location": "models/dcim/rackreservation/#description",
      "title": "Description",
      "text": "<p>Every rack reservation must include a description of its purpose.</p>"
    },
    {
      "location": "models/dcim/rackrole/",
      "title": "Rack Roles",
      "text": "<p>Each rack can optionally be assigned a user-defined functional role. For example, you might designate a rack for compute or storage resources, or to house colocated customer devices.</p>"
    },
    {
      "location": "models/dcim/rackrole/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/rackrole/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/dcim/rackrole/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/rackrole/#color",
      "title": "Color",
      "text": "<p>The color used when displaying the role in the NetBox UI.</p>"
    },
    {
      "location": "models/dcim/racktype/",
      "title": "Rack Types",
      "text": "<p>A rack type defines the physical characteristics of a particular model of rack.</p>"
    },
    {
      "location": "models/dcim/racktype/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/racktype/#manufacturer",
      "title": "Manufacturer",
      "text": "<p>The manufacturer which produces this type of rack.</p>"
    },
    {
      "location": "models/dcim/racktype/#model",
      "title": "Model",
      "text": "<p>The model number assigned to this rack type by its manufacturer. Must be unique to the manufacturer.</p>"
    },
    {
      "location": "models/dcim/racktype/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly representation of the model identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/racktype/#form-factor",
      "title": "Form Factor",
      "text": "<p>A rack can be designated as one of the following form factors:</p> <ul> <li>2-post frame</li> <li>4-post frame</li> <li>4-post cabinet</li> <li>Wall-mounted frame</li> <li>Wall-mounted cabinet</li> </ul>"
    },
    {
      "location": "models/dcim/racktype/#width",
      "title": "Width",
      "text": "<p>The canonical distance between the two vertical rails on a face. (This is typically 19 inches, however other standard widths exist.)</p>"
    },
    {
      "location": "models/dcim/racktype/#height",
      "title": "Height",
      "text": "<p>The height of the rack, measured in units.</p>"
    },
    {
      "location": "models/dcim/racktype/#starting-unit",
      "title": "Starting Unit",
      "text": "<p>The number of the numerically lowest unit in the rack. This value defaults to one, but may be higher in certain situations. For example, you may want to model only a select range of units within a shared physical rack (e.g. U13 through U24).</p>"
    },
    {
      "location": "models/dcim/racktype/#outer-dimensions",
      "title": "Outer Dimensions",
      "text": "<p>The external width and depth of the rack can be tracked to aid in floorplan calculations. These measurements must be designated in either millimeters or inches.</p>"
    },
    {
      "location": "models/dcim/racktype/#mounting-depth",
      "title": "Mounting Depth",
      "text": "<p>The maximum depth of a mounted device that the rack can accommodate, in millimeters. For four-post frames or cabinets, this is the horizontal distance between the front and rear vertical rails. (Note that this measurement does not include space between the rails and the cabinet doors.)</p>"
    },
    {
      "location": "models/dcim/racktype/#weight",
      "title": "Weight",
      "text": "<p>The numeric weight of the rack, including a unit designation (e.g. 10 kilograms or 20 pounds).</p>"
    },
    {
      "location": "models/dcim/racktype/#maximum-weight",
      "title": "Maximum Weight",
      "text": "<p>The maximum total weight capacity for all installed devices, inclusive of the rack itself.</p>"
    },
    {
      "location": "models/dcim/racktype/#descending-units",
      "title": "Descending Units",
      "text": "<p>If selected, the rack's elevation will display unit 1 at the top of the rack. (Most racks use ascending numbering, with unit 1 assigned to the bottommost position.)</p>"
    },
    {
      "location": "models/dcim/rearport/",
      "title": "Rear Ports",
      "text": "<p>Like front ports, rear ports are pass-through ports which represent the continuation of a path from one cable to the next. Each rear port is defined with its physical type and a number of positions: Rear ports with more than one position can be mapped to multiple front ports. This can be useful for modeling instances where multiple paths share a common cable (for example, six discrete two-strand fiber connections sharing a 12-strand MPO cable).</p> <p>Note</p> <p>Front and rear ports need not necessarily reside on the actual front or rear device face. This terminology is used primarily to distinguish between the two components in a pass-through port pairing.</p> <p>Tip</p> <p>Like most device components, rear ports are instantiated automatically from rear port templates assigned to the selected device type when a device is created.</p>"
    },
    {
      "location": "models/dcim/rearport/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/rearport/#device",
      "title": "Device",
      "text": "<p>The device to which this port belongs.</p>"
    },
    {
      "location": "models/dcim/rearport/#module",
      "title": "Module",
      "text": "<p>The installed module within the assigned device to which this port belongs (optional).</p>"
    },
    {
      "location": "models/dcim/rearport/#name",
      "title": "Name",
      "text": "<p>The port's name. Must be unique to the parent device.</p>"
    },
    {
      "location": "models/dcim/rearport/#label",
      "title": "Label",
      "text": "<p>An alternative physical label identifying the port.</p>"
    },
    {
      "location": "models/dcim/rearport/#type",
      "title": "Type",
      "text": "<p>The port's termination type.</p>"
    },
    {
      "location": "models/dcim/rearport/#color",
      "title": "Color",
      "text": "<p>The port's color (optional).</p>"
    },
    {
      "location": "models/dcim/rearport/#positions",
      "title": "Positions",
      "text": "<p>The number of front ports to which this rear port can be mapped. For example, an MPO fiber termination cassette might have a single 12-strand rear port mapped to 12 discrete front ports, each terminating a single fiber strand. (For rear ports which map directly to a single front port, set this to <code>1</code>.)</p>"
    },
    {
      "location": "models/dcim/rearport/#mark-connected",
      "title": "Mark Connected",
      "text": "<p>If selected, this component will be treated as if a cable has been connected.</p>"
    },
    {
      "location": "models/dcim/rearporttemplate/",
      "title": "Rear Port Templates",
      "text": "<p>A template for a rear-facing pass-through port that will be created on all instantiations of the parent device type. See the rear port documentation for more detail.</p>"
    },
    {
      "location": "models/dcim/region/",
      "title": "Regions",
      "text": "<p>Sites can be arranged geographically using regions. A region might represent a continent, country, city, campus, or other area depending on your use case. Regions can be nested recursively to construct a hierarchy. For example, you might define several country regions, and within each of those several state or city regions to which sites are assigned.</p>"
    },
    { "location": "models/dcim/region/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/dcim/region/#parent",
      "title": "Parent",
      "text": "<p>The parent region, if any.</p>"
    },
    {
      "location": "models/dcim/region/#name",
      "title": "Name",
      "text": "<p>The region's name. Must be unique to the parent region, if one is assigned.</p>"
    },
    {
      "location": "models/dcim/region/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/site/",
      "title": "Sites",
      "text": "<p>How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two colocation facilities.</p>"
    },
    { "location": "models/dcim/site/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/dcim/site/#name",
      "title": "Name",
      "text": "<p>The site's unique name.</p>"
    },
    {
      "location": "models/dcim/site/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/site/#status",
      "title": "Status",
      "text": "<p>The site's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Site.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/dcim/site/#region",
      "title": "Region",
      "text": "<p>The parent region to which the site belongs, if any.</p>"
    },
    {
      "location": "models/dcim/site/#facility",
      "title": "Facility",
      "text": "<p>Data center or facility designation for identifying the site.</p>"
    },
    {
      "location": "models/dcim/site/#asns",
      "title": "ASNs",
      "text": "<p>Each site can have multiple AS numbers assigned to it.</p>"
    },
    {
      "location": "models/dcim/site/#time-zone",
      "title": "Time Zone",
      "text": "<p>The site's local time zone. (Time zones are provided by the zoneinfo library.)</p>"
    },
    {
      "location": "models/dcim/site/#physical-address",
      "title": "Physical Address",
      "text": "<p>The site's physical address, used for mapping.</p>"
    },
    {
      "location": "models/dcim/site/#shipping-address",
      "title": "Shipping Address",
      "text": "<p>The address to use for deliveries destined for the site.</p> <p>Tip</p> <p>You can also designate points of contact for each site to provide additional contact details.</p>"
    },
    {
      "location": "models/dcim/site/#latitude-longitude",
      "title": "Latitude &amp; Longitude",
      "text": "<p>GPS coordinates of the site for geolocation.</p>"
    },
    {
      "location": "models/dcim/sitegroup/",
      "title": "Site Groups",
      "text": "<p>Like regions, site groups can be used to organize sites. Whereas regions are intended to provide geographic organization, site groups can be used to classify sites by role or function. Also like regions, site groups can be nested to form a hierarchy. Sites which belong to a child group are also considered to be members of all its parent groups.</p>"
    },
    {
      "location": "models/dcim/sitegroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/sitegroup/#parent",
      "title": "Parent",
      "text": "<p>The parent site group, if any.</p>"
    },
    {
      "location": "models/dcim/sitegroup/#name",
      "title": "Name",
      "text": "<p>The site group's name. Must be unique to the parent group, if one is assigned.</p>"
    },
    {
      "location": "models/dcim/sitegroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/dcim/virtualchassis/",
      "title": "Virtual Chassis",
      "text": "<p>A virtual chassis represents a set of devices which share a common control plane. A common example of this is a stack of switches which are connected and configured to operate as a single managed device. Each device in the virtual chassis is referred to as a VC member, and assigned a position and (optionally) a priority. VC member devices commonly reside within the same rack, though this is not a requirement.</p> <p>One of the member devices may be designated as the VC master: This device will typically be assigned a name, services, virtual interfaces, and other attributes related to managing the VC.  If a VC master is defined, interfaces from all VC members are displayed when navigating to its device interfaces view. This does not include management-only interfaces belonging to other members.</p> <p>Note</p> <p>It's important to recognize the distinction between a virtual chassis and a chassis-based device. A virtual chassis is not suitable for modeling a chassis-based switch with removable line cards (such as the Juniper EX9208), as its line cards are not physically autonomous devices. Instead, use modules for these.</p>"
    },
    {
      "location": "models/dcim/virtualchassis/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/virtualchassis/#name",
      "title": "Name",
      "text": "<p>The virtual chassis' name.</p>"
    },
    {
      "location": "models/dcim/virtualchassis/#domain",
      "title": "Domain",
      "text": "<p>The domain assigned for VC member devices.</p>"
    },
    {
      "location": "models/dcim/virtualchassis/#master",
      "title": "Master",
      "text": "<p>The member device which has been designated as the chassis master (optional).</p>"
    },
    {
      "location": "models/dcim/virtualdevicecontext/",
      "title": "Virtual Device Context",
      "text": "<p>A virtual device context (VDC) represents a logical partition within a physical device, to which interfaces from the parent device can be allocated. Each VDC effectively provides an isolated control plane, but relies on shared resources of the parent device. A VDC is somewhat similar to a virtual machine in that it effects isolation between various components, but stops short of delivering a fully virtualized environment.</p> <p>Each VDC must be assigned to a device upon creation, after which interfaces belonging to that device can be assigned to one or more of its VDCs. A VDC can have any number of interfaces assigned to it, and an interface can belong to any number of VDCs.</p> <p>A VDC by Any Other Name</p> <p>Network vendors use differing names for this concept. Cisco uses the term VDC, whereas Juniper refers to it as a Virtual Routing Instance, and Fortinet uses Virtual Domain, for instance. While there may be some nuance among the vendors' unique implementations, the general concept remains the same for each.</p>"
    },
    {
      "location": "models/dcim/virtualdevicecontext/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/dcim/virtualdevicecontext/#device",
      "title": "Device",
      "text": "<p>The device to which this VDC belongs.</p>"
    },
    {
      "location": "models/dcim/virtualdevicecontext/#name",
      "title": "Name",
      "text": "<p>The VDC's configured name. Must be unique to the assigned device.</p>"
    },
    {
      "location": "models/dcim/virtualdevicecontext/#status",
      "title": "Status",
      "text": "<p>The operational status of the VDC.</p>"
    },
    {
      "location": "models/dcim/virtualdevicecontext/#identifier",
      "title": "Identifier",
      "text": "<p>A vendor-prescribed unique identifier for the VDC (optional). Must be unique to the assigned device if defined.</p>"
    },
    {
      "location": "models/dcim/virtualdevicecontext/#primary-ipv4-ipv6-addresses",
      "title": "Primary IPv4 &amp; IPv6 Addresses",
      "text": "<p>Each VDC may designate one primary IPv4 address and/or one primary IPv6 address for management purposes.</p> <p>Tip</p> <p>NetBox will prefer IPv6 addresses over IPv4 addresses by default. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"
    },
    {
      "location": "models/extras/bookmark/",
      "title": "Bookmarks",
      "text": "<p>A user can bookmark individual objects for convenient access. Bookmarks are listed under a user's profile and can be displayed using a dashboard widget.</p>"
    },
    {
      "location": "models/extras/bookmark/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/bookmark/#user",
      "title": "User",
      "text": "<p>The user to whom the bookmark belongs.</p>"
    },
    {
      "location": "models/extras/bookmark/#object",
      "title": "Object",
      "text": "<p>The bookmarked object.</p>"
    },
    {
      "location": "models/extras/branch/",
      "title": "Branches",
      "text": "<p>Deprecated Feature</p> <p>This feature has been deprecated in NetBox v4.2 and will be removed in a future release. Please consider using the netbox-branching plugin, which provides much more robust functionality.</p> <p>A branch is a collection of related staged changes that have been prepared for merging into the active database. A branch can be merged by executing its <code>commit()</code> method. Deleting a branch will delete all its related changes.</p>"
    },
    {
      "location": "models/extras/branch/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/branch/#name",
      "title": "Name",
      "text": "<p>The branch's name.</p>"
    },
    {
      "location": "models/extras/branch/#user",
      "title": "User",
      "text": "<p>The user to which the branch belongs (optional).</p>"
    },
    {
      "location": "models/extras/configcontext/",
      "title": "Configuration Contexts",
      "text": "<p>Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.</p> <p>See the context data documentation for more information.</p>"
    },
    {
      "location": "models/extras/configcontext/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/configcontext/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/extras/configcontext/#weight",
      "title": "Weight",
      "text": "<p>A numeric value which influences the order in which context data is merged. Contexts with a lower weight are merged before those with a higher weight.</p>"
    },
    {
      "location": "models/extras/configcontext/#data",
      "title": "Data",
      "text": "<p>The context data expressed in JSON format.</p>"
    },
    {
      "location": "models/extras/configcontext/#data-file",
      "title": "Data File",
      "text": "<p>Config context data may optionally be sourced from a remote data file, which is synchronized from a remote data source. When designating a data file, there is no need to specify local data for the config context: It will be populated automatically from the data file.</p>"
    },
    {
      "location": "models/extras/configcontext/#is-active",
      "title": "Is Active",
      "text": "<p>If not selected, this config context will be excluded from rendering. This can be convenient to temporarily disable a config context.</p>"
    },
    {
      "location": "models/extras/configcontext/#object-assignment",
      "title": "Object Assignment",
      "text": "<p>Each configuration context may be assigned with any number of objects of the supported types. If no related objects are selected, it will be considered a \"global\" config context and apply to all devices and virtual machines.</p>"
    },
    {
      "location": "models/extras/configtemplate/",
      "title": "Configuration Templates",
      "text": "<p>Configuration templates can be used to render device configurations from context data. Templates are written in the Jinja2 language and can be associated with devices roles, platforms, and/or individual devices.</p> <p>Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.</p> <p>See the configuration rendering documentation for more information.</p>"
    },
    {
      "location": "models/extras/configtemplate/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/configtemplate/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/extras/configtemplate/#weight",
      "title": "Weight",
      "text": "<p>A numeric value which influences the order in which context data is merged. Contexts with a lower weight are merged before those with a higher weight.</p>"
    },
    {
      "location": "models/extras/configtemplate/#data-file",
      "title": "Data File",
      "text": "<p>Template code may optionally be sourced from a remote data file, which is synchronized from a remote data source. When designating a data file, there is no need to specify template code: It will be populated automatically from the data file.</p>"
    },
    {
      "location": "models/extras/configtemplate/#template-code",
      "title": "Template Code",
      "text": "<p>Jinja2 template code, if being defined locally rather than replicated from a data file.</p>"
    },
    {
      "location": "models/extras/configtemplate/#environment-parameters",
      "title": "Environment Parameters",
      "text": "<p>A dictionary of any additional parameters to pass when instantiating the Jinja2 environment. Jinja2 supports various optional parameters which can be used to modify its default behavior.</p>"
    },
    {
      "location": "models/extras/customfield/",
      "title": "Custom Fields",
      "text": "<p>NetBox administrators can extend NetBox's built-in data model by adding custom fields to most object types. See the custom fields documentation for more information.</p>"
    },
    {
      "location": "models/extras/customfield/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/customfield/#models",
      "title": "Model(s)",
      "text": "<p>Select the NetBox object type or types to which this custom field applies.</p>"
    },
    {
      "location": "models/extras/customfield/#name",
      "title": "Name",
      "text": "<p>The raw field name. This will be used in the database and API, and should consist only of alphanumeric characters and underscores. (Use the <code>label</code> field to designate a human-friendly name for the custom field.)</p>"
    },
    {
      "location": "models/extras/customfield/#label",
      "title": "Label",
      "text": "<p>An optional human-friendly name for the custom field. If not defined, the field's <code>name</code> attribute will be used.</p>"
    },
    {
      "location": "models/extras/customfield/#group-name",
      "title": "Group Name",
      "text": "<p>If this custom field should be grouped with others, specify the name of the group here. Custom fields with no group defined will be ordered only by weight and name.</p>"
    },
    {
      "location": "models/extras/customfield/#type",
      "title": "Type",
      "text": "<p>The type of data this field holds. This must be one of the following:</p> Type Description Text Free-form text (intended for single-line use) Long text Free-form of any length; supports Markdown rendering Integer A whole number (positive or negative) Boolean True or false Date A date in ISO 8601 format (YYYY-MM-DD) URL This will be presented as a link in the web UI JSON Arbitrary data stored in JSON format Selection A selection of one of several pre-defined custom choices Multiple selection A selection field which supports the assignment of multiple values Object A single NetBox object of the type defined by <code>object_type</code> Multiple object One or more NetBox objects of the type defined by <code>object_type</code>"
    },
    {
      "location": "models/extras/customfield/#related-object-type",
      "title": "Related Object Type",
      "text": "<p>For object and multiple-object fields only. Designates the type of NetBox object being referenced.</p>"
    },
    {
      "location": "models/extras/customfield/#related-object-filter",
      "title": "Related Object Filter",
      "text": "<p>For object and multi-object custom fields, a filter may be defined to limit the available objects when populating a field value. This filter maps object attributes to values. For example, <code>{\"status\": \"active\"}</code> will include only objects with a status of \"active.\"</p> <p>Warning</p> <p>This setting is employed for convenience only, and should not be relied upon to enforce data integrity.</p>"
    },
    {
      "location": "models/extras/customfield/#weight",
      "title": "Weight",
      "text": "<p>A numeric weight used to override alphabetic ordering of fields by name. Custom fields with a lower weight will be listed before those with a higher weight. (Note that weight applies within the context of a custom field group, if defined.)</p>"
    },
    {
      "location": "models/extras/customfield/#required",
      "title": "Required",
      "text": "<p>If enabled, this custom field must be populated with a valid value for the object to pass validation.</p>"
    },
    {
      "location": "models/extras/customfield/#unique",
      "title": "Unique",
      "text": "<p>If enabled, each object must have a unique value set for this custom field (per object type).</p>"
    },
    {
      "location": "models/extras/customfield/#description",
      "title": "Description",
      "text": "<p>A brief description of the field's purpose (optional).</p>"
    },
    {
      "location": "models/extras/customfield/#filter-logic",
      "title": "Filter Logic",
      "text": "<p>Defines how filters are evaluated against custom field values.</p> Option Description Disabled Filtering disabled Loose Match any occurrence of the value Exact Match only the complete field value"
    },
    {
      "location": "models/extras/customfield/#ui-visible",
      "title": "UI Visible",
      "text": "<p>Controls whether the custom field is displayed for objects within the NetBox user interface.</p> Option Description Always The field is always displayed when viewing an object (default) If set The field is displayed only if a value has been defined Hidden The field is not displayed when viewing an object"
    },
    {
      "location": "models/extras/customfield/#ui-editable",
      "title": "UI Editable",
      "text": "<p>Controls whether the custom field is editable on objects within the NetBox user interface.</p> Option Description Yes The field's value may be changed when editing an object (default) No The field's value is displayed when editing an object but may not be altered Hidden The field is not displayed when editing an object"
    },
    {
      "location": "models/extras/customfield/#default",
      "title": "Default",
      "text": "<p>The default value to populate for the custom field when creating new objects (optional). This value must be expressed as JSON. If this is a choice or multi-choice field, this must be one of the available choices.</p>"
    },
    {
      "location": "models/extras/customfield/#choice-set",
      "title": "Choice Set",
      "text": "<p>For selection and multi-select custom fields only, this is the set of choices which are valid for the field.</p>"
    },
    {
      "location": "models/extras/customfield/#cloneable",
      "title": "Cloneable",
      "text": "<p>If enabled, values from this field will be automatically pre-populated when cloning existing objects.</p>"
    },
    {
      "location": "models/extras/customfield/#minimum-value",
      "title": "Minimum Value",
      "text": "<p>For numeric custom fields only. The minimum valid value (optional).</p>"
    },
    {
      "location": "models/extras/customfield/#maximum-value",
      "title": "Maximum Value",
      "text": "<p>For numeric custom fields only. The maximum valid value (optional).</p>"
    },
    {
      "location": "models/extras/customfield/#validation-regex",
      "title": "Validation Regex",
      "text": "<p>For string-based custom fields only. A regular expression used to validate the field's value (optional).</p>"
    },
    {
      "location": "models/extras/customfieldchoiceset/",
      "title": "Custom Field Choice Sets",
      "text": "<p>Single- and multi-selection custom fields must define a set of valid choices from which the user may choose when defining the field value. These choices are defined as sets that may be reused among multiple custom fields.</p> <p>A choice set must define a base choice set and/or a set of arbitrary extra choices.</p>"
    },
    {
      "location": "models/extras/customfieldchoiceset/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/customfieldchoiceset/#name",
      "title": "Name",
      "text": "<p>The human-friendly name of the choice set.</p>"
    },
    {
      "location": "models/extras/customfieldchoiceset/#base-choices",
      "title": "Base Choices",
      "text": "<p>The set of pre-defined choices to include. Available sets are listed below. This is an optional setting.</p> <ul> <li>IATA airport codes</li> <li>ISO 3166 - Two-letter country codes</li> <li>UN/LOCODE - Five-character location identifiers</li> </ul>"
    },
    {
      "location": "models/extras/customfieldchoiceset/#extra-choices",
      "title": "Extra Choices",
      "text": "<p>A set of custom choices that will be appended to the base choice set (if any).</p>"
    },
    {
      "location": "models/extras/customfieldchoiceset/#order-alphabetically",
      "title": "Order Alphabetically",
      "text": "<p>If enabled, the choices list will be automatically ordered alphabetically. If disabled, choices will appear in the order in which they were defined.</p>"
    },
    {
      "location": "models/extras/customlink/",
      "title": "Custom Links",
      "text": "<p>Users can add custom links to object views in NetBox to reference external resources. For example, you might create a custom link for devices pointing to a monitoring system. See the custom links documentation for more information.</p>"
    },
    {
      "location": "models/extras/customlink/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/customlink/#name",
      "title": "Name",
      "text": "<p>The name of the custom link. This is used primarily for administrative purposes only, although custom links of the same weight are ordered alphabetically by name when being rendered in the UI.</p>"
    },
    {
      "location": "models/extras/customlink/#content-type",
      "title": "Content Type",
      "text": "<p>The type of NetBox object to which this custom link applies.</p>"
    },
    {
      "location": "models/extras/customlink/#weight",
      "title": "Weight",
      "text": "<p>A numeric weight used to override alphabetic ordering of links by name. Custom fields with a lower weight will be listed before those with a higher weight. (Note that weight applies within the context of a custom link group, if defined.)</p>"
    },
    {
      "location": "models/extras/customlink/#group-name",
      "title": "Group Name",
      "text": "<p>If this custom link should be grouped with others, specify the name of the group here. Grouped custom links will be listed in a dropdown menu attached to a single button bearing the group name.</p>"
    },
    {
      "location": "models/extras/customlink/#button-class",
      "title": "Button Class",
      "text": "<p>The color of the UI button.</p>"
    },
    {
      "location": "models/extras/customlink/#enabled",
      "title": "Enabled",
      "text": "<p>If not selected, the custom link will not be rendered. This can be useful for temporarily disabling a custom link.</p>"
    },
    {
      "location": "models/extras/customlink/#new-window",
      "title": "New Window",
      "text": "<p>If selected, this will force the link to open in a new browser tab or window.</p>"
    },
    {
      "location": "models/extras/customlink/#link-text",
      "title": "Link Text",
      "text": "<p>Jinja2 template code for rendering the button text. (Note that this does not need to contain any template variables.) See below for available context data.</p> <p>Note</p> <p>Custom links which render an empty text value will not be displayed in the UI. This can be used to toggle the inclusion of a link based on object attributes.</p>"
    },
    {
      "location": "models/extras/customlink/#link-url",
      "title": "Link URL",
      "text": "<p>Jinja2 template code for rendering the hyperlink. See below for available context data.</p>"
    },
    {
      "location": "models/extras/customlink/#context-data",
      "title": "Context Data",
      "text": "<p>The following context variables are available in to the text and link templates.</p> Variable Description <code>object</code> The NetBox object being displayed <code>debug</code> A boolean indicating whether debugging is enabled <code>request</code> The current WSGI request <code>user</code> The current user (if authenticated) <code>perms</code> The permissions assigned to the user"
    },
    {
      "location": "models/extras/eventrule/",
      "title": "EventRule",
      "text": "<p>An event rule is a mechanism for automatically taking an action (such as running a script or sending a webhook) in response to an event in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. This can be done by creating an event for device objects and designating a webhook to be transmitted. When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver.</p> <p>See the event rules documentation  for more information.</p>"
    },
    {
      "location": "models/extras/eventrule/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/eventrule/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/extras/eventrule/#object-types",
      "title": "Object Types",
      "text": "<p>The type(s) of object in NetBox that will trigger the rule.</p>"
    },
    {
      "location": "models/extras/eventrule/#enabled",
      "title": "Enabled",
      "text": "<p>If not selected, the event rule will not be processed.</p>"
    },
    {
      "location": "models/extras/eventrule/#events-types",
      "title": "Events Types",
      "text": "<p>The event types which will trigger the rule. At least one event type must be selected.</p> Name Description Object created A new object has been created Object updated An existing object has been modified Object deleted An object has been deleted Job started A background job is initiated Job completed A background job completes successfully Job failed A background job fails Job errored A background job is aborted due to an error <p>Custom Event Types</p> <p>The above list includes only built-in event types. NetBox plugins can also register their own custom event types.</p>"
    },
    {
      "location": "models/extras/eventrule/#conditions",
      "title": "Conditions",
      "text": "<p>A set of prescribed conditions against which the triggering object will be evaluated. If the conditions are defined but not met by the object, no action will be taken. An event rule that does not define any conditions will always trigger.</p>"
    },
    {
      "location": "models/extras/eventrule/#action-type",
      "title": "Action Type",
      "text": "<p>The type of action to take when the rule triggers. This must be one of the following choices:</p> <ul> <li>Webhook</li> <li>Custom script</li> <li>Notification</li> </ul>"
    },
    {
      "location": "models/extras/eventrule/#action-data",
      "title": "Action Data",
      "text": "<p>An optional dictionary of JSON data to pass when executing the rule. This can be useful to include additional context data, e.g. when transmitting a webhook.</p>"
    },
    {
      "location": "models/extras/exporttemplate/",
      "title": "Export Templates",
      "text": "<p>Export templates are used to render arbitrary data from a set of NetBox objects. For example, you might want to automatically generate a network monitoring service configuration from a list of device objects. See the export templates documentation for more information.</p>"
    },
    {
      "location": "models/extras/exporttemplate/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/exporttemplate/#name",
      "title": "Name",
      "text": "<p>The name of the export template. This will appear in the \"export\" dropdown list in the NetBox UI.</p>"
    },
    {
      "location": "models/extras/exporttemplate/#content-type",
      "title": "Content Type",
      "text": "<p>The type of NetBox object to which the export template applies.</p>"
    },
    {
      "location": "models/extras/exporttemplate/#data-file",
      "title": "Data File",
      "text": "<p>Template code may optionally be sourced from a remote data file, which is synchronized from a remote data source. When designating a data file, there is no need to specify local content for the template: It will be populated automatically from the data file.</p>"
    },
    {
      "location": "models/extras/exporttemplate/#template-code",
      "title": "Template Code",
      "text": "<p>Jinja2 template code for rendering the exported data.</p>"
    },
    {
      "location": "models/extras/exporttemplate/#mime-type",
      "title": "MIME Type",
      "text": "<p>The MIME type to indicate in the response when rendering the export template (optional). Defaults to <code>text/plain</code>.</p>"
    },
    {
      "location": "models/extras/exporttemplate/#file-extension",
      "title": "File Extension",
      "text": "<p>The file extension to append to the file name in the response (optional).</p>"
    },
    {
      "location": "models/extras/exporttemplate/#as-attachment",
      "title": "As Attachment",
      "text": "<p>If selected, the rendered content will be returned as a file attachment, rather than displayed directly in-browser (where supported).</p>"
    },
    {
      "location": "models/extras/imageattachment/",
      "title": "Image Attachments",
      "text": "<p>Certain objects in NetBox support the attachment of uploaded images. These will be saved to the NetBox server and made available whenever the object is viewed.</p>"
    },
    {
      "location": "models/extras/imageattachment/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/imageattachment/#name",
      "title": "Name",
      "text": "<p>The name of the image being attached. If not defined, this will be inferred from the name of the uploaded file.</p>"
    },
    {
      "location": "models/extras/imageattachment/#image",
      "title": "Image",
      "text": "<p>The image file to upload. Note that the uploaded file must be a supported image type, or validation will fail.</p>"
    },
    {
      "location": "models/extras/journalentry/",
      "title": "Journal Entries",
      "text": "<p>Most objects in NetBox support journaling. This is the ability of users to record chronological notes indicating changes to or work performed on resources in NetBox. For example, a data center technician might add a journal entry for a device when swapping out a failed power supply.</p>"
    },
    {
      "location": "models/extras/journalentry/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/journalentry/#kind",
      "title": "Kind",
      "text": "<p>A general classification for the entry type (info, success, warning, or danger.)</p> <p>Tip</p> <p>Additional kinds may be defined by setting <code>JournalEntry.kind</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/extras/journalentry/#comments",
      "title": "Comments",
      "text": "<p>The body of the journal entry. Markdown rendering is supported.</p>"
    },
    {
      "location": "models/extras/notification/",
      "title": "Notification",
      "text": "<p>A notification alerts a user that a specific action has taken place in NetBox, such as an object being modified or a background job completing. A notification may be generated via a user's subscription to a particular object, or by an event rule targeting a notification group of which the user is a member.</p>"
    },
    {
      "location": "models/extras/notification/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/notification/#user",
      "title": "User",
      "text": "<p>The recipient of the notification.</p>"
    },
    {
      "location": "models/extras/notification/#object",
      "title": "Object",
      "text": "<p>The object to which the notification relates.</p>"
    },
    {
      "location": "models/extras/notification/#event-type",
      "title": "Event Type",
      "text": "<p>The type of event indicated by the notification.</p>"
    },
    {
      "location": "models/extras/notificationgroup/",
      "title": "Notification Group",
      "text": "<p>A set of NetBox users and/or groups of users identified as recipients for certain notifications.</p>"
    },
    {
      "location": "models/extras/notificationgroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/notificationgroup/#name",
      "title": "Name",
      "text": "<p>The name of the notification group.</p>"
    },
    {
      "location": "models/extras/notificationgroup/#users",
      "title": "Users",
      "text": "<p>One or more users directly designated as members of the notification group.</p>"
    },
    {
      "location": "models/extras/notificationgroup/#groups",
      "title": "Groups",
      "text": "<p>All users of any selected groups are considered as members of the notification group.</p>"
    },
    {
      "location": "models/extras/savedfilter/",
      "title": "Saved Filters",
      "text": "<p>When filtering lists of objects in NetBox, users can save applied filters for future use. This is handy for complex filter strategies involving multiple discrete filters. For example, you might want to find all planned devices within a region that have a specific platform. Once you've applied the desired filters to the object list, simply create a saved filter with name and optional description. This filter can then be applied directly for future queries via both the UI and REST API.</p>"
    },
    {
      "location": "models/extras/savedfilter/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/savedfilter/#name",
      "title": "Name",
      "text": "<p>The filter's human-friendly name.</p>"
    },
    {
      "location": "models/extras/savedfilter/#slug",
      "title": "Slug",
      "text": "<p>The unique identifier by which this filter will be referenced during application (e.g. <code>?filter=my-slug</code>).</p>"
    },
    {
      "location": "models/extras/savedfilter/#user",
      "title": "User",
      "text": "<p>The user to which this filter belongs. The current user will be assigned automatically when creating saved filters via the UI, and cannot be changed.</p>"
    },
    {
      "location": "models/extras/savedfilter/#weight",
      "title": "Weight",
      "text": "<p>A numeric weight used to override alphabetic ordering of filters by name. Saved filters with a lower weight will be listed before those with a higher weight.</p>"
    },
    {
      "location": "models/extras/savedfilter/#enabled",
      "title": "Enabled",
      "text": "<p>Determines whether this filter can be used. Disabled filters will not appear as options in the UI, however they will be included in API results.</p>"
    },
    {
      "location": "models/extras/savedfilter/#shared",
      "title": "Shared",
      "text": "<p>Determines whether this filter is intended for use by all users or only its owner. Note that disabling this field does not hide the filter from other users; it is merely excluded from the list of available filters in UI object list views.</p>"
    },
    {
      "location": "models/extras/savedfilter/#parameters",
      "title": "Parameters",
      "text": "<p>The query parameters to apply when the filter is active. These must be specified as JSON data. For example, the URL query string</p> <pre><code>?status=active&amp;region_id=51&amp;tag=alpha&amp;tag=bravo\n</code></pre> <p>is represented in JSON as</p> <pre><code>{\n  \"tag\": [\"alpha\", \"bravo\"],\n  \"status\": \"active\",\n  \"region_id\": 51\n}\n</code></pre>"
    },
    {
      "location": "models/extras/stagedchange/",
      "title": "Staged Changes",
      "text": "<p>Deprecated Feature</p> <p>This feature has been deprecated in NetBox v4.2 and will be removed in a future release. Please consider using the netbox-branching plugin, which provides much more robust functionality.</p> <p>A staged change represents the creation of a new object or the modification or deletion of an existing object to be performed at some future point. Each change must be assigned to a branch.</p> <p>Changes can be applied individually via the <code>apply()</code> method, however it is recommended to apply changes in bulk using the parent branch's <code>commit()</code> method.</p>"
    },
    {
      "location": "models/extras/stagedchange/#fields",
      "title": "Fields",
      "text": "<p>Warning</p> <p>Staged changes are not typically created or manipulated directly, but rather effected through the use of the <code>checkout()</code> context manager.</p>"
    },
    {
      "location": "models/extras/stagedchange/#branch",
      "title": "Branch",
      "text": "<p>The branch to which this change belongs.</p>"
    },
    {
      "location": "models/extras/stagedchange/#action",
      "title": "Action",
      "text": "<p>The type of action this change represents: <code>create</code>, <code>update</code>, or <code>delete</code>.</p>"
    },
    {
      "location": "models/extras/stagedchange/#object",
      "title": "Object",
      "text": "<p>A generic foreign key referencing the existing object to which this change applies.</p>"
    },
    {
      "location": "models/extras/stagedchange/#data",
      "title": "Data",
      "text": "<p>JSON representation of the changes being made to the object (not applicable for deletions).</p>"
    },
    {
      "location": "models/extras/subscription/",
      "title": "Subscription",
      "text": "<p>A record indicating that a user is to be notified of any changes to a particular NetBox object. A notification maps exactly one user to exactly one object.</p> <p>When an object to which a user is subscribed changes, a notification is generated for the user.</p>"
    },
    {
      "location": "models/extras/subscription/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/subscription/#user",
      "title": "User",
      "text": "<p>The subscribed user.</p>"
    },
    {
      "location": "models/extras/subscription/#object",
      "title": "Object",
      "text": "<p>The object to which the user is subscribed.</p>"
    },
    {
      "location": "models/extras/tag/",
      "title": "Tags",
      "text": "<p>Tags are user-defined labels which can be applied to a variety of objects within NetBox. They can be used to establish dimensions of organization beyond the relationships built into NetBox. For example, you might create a tag to identify a particular ownership or condition across several types of objects.</p>"
    },
    { "location": "models/extras/tag/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/extras/tag/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly label for the tag.</p>"
    },
    {
      "location": "models/extras/tag/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value will be used for filtering.) This is automatically generated from the tag's name, but can be altered as needed.</p>"
    },
    {
      "location": "models/extras/tag/#color",
      "title": "Color",
      "text": "<p>The color to use when displaying the tag in the NetBox UI.</p>"
    },
    {
      "location": "models/extras/tag/#object-types",
      "title": "Object Types",
      "text": "<p>The assignment of a tag may be limited to a prescribed set of objects. For example, it may be desirable to limit the application of a specific tag to only devices and virtual machines.</p> <p>If no object types are specified, the tag will be assignable to any type of object.</p>"
    },
    {
      "location": "models/extras/webhook/",
      "title": "Webhooks",
      "text": "<p>A webhook is a mechanism for conveying to some external system a change that took place in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. This can be done by creating a webhook for the device model in NetBox and identifying the webhook receiver. When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver.</p> <p>See the webhooks documentation for more information.</p>"
    },
    {
      "location": "models/extras/webhook/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/extras/webhook/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/extras/webhook/#content-types",
      "title": "Content Types",
      "text": "<p>The type(s) of object in NetBox that will trigger the webhook.</p>"
    },
    {
      "location": "models/extras/webhook/#enabled",
      "title": "Enabled",
      "text": "<p>If not selected, the webhook will be inactive.</p>"
    },
    {
      "location": "models/extras/webhook/#events",
      "title": "Events",
      "text": "<p>The events which will trigger the webhook. At least one event type must be selected.</p> Name Description Creations A new object has been created Updates An existing object has been modified Deletions An object has been deleted Job starts A job for an object starts Job ends A job for an object terminates"
    },
    {
      "location": "models/extras/webhook/#url",
      "title": "URL",
      "text": "<p>The URL to which the webhook HTTP request will be made.</p>"
    },
    {
      "location": "models/extras/webhook/#http-method",
      "title": "HTTP Method",
      "text": "<p>The type of HTTP request to send. Options are:</p> <ul> <li><code>GET</code></li> <li><code>POST</code></li> <li><code>PUT</code></li> <li><code>PATCH</code></li> <li><code>DELETE</code></li> </ul>"
    },
    {
      "location": "models/extras/webhook/#http-content-type",
      "title": "HTTP Content Type",
      "text": "<p>The content type to indicate in the outgoing HTTP request header. See this list of known types for reference.</p>"
    },
    {
      "location": "models/extras/webhook/#additional-headers",
      "title": "Additional Headers",
      "text": "<p>Any additional header to include with the outgoing HTTP request. These should be defined in the format <code>Name: Value</code>, with each header on a separate line. Jinja2 templating is supported for this field.</p>"
    },
    {
      "location": "models/extras/webhook/#body-template",
      "title": "Body Template",
      "text": "<p>Jinja2 template for a custom request body, if desired. If not defined, NetBox will populate the request body with a raw dump of the webhook context.</p>"
    },
    {
      "location": "models/extras/webhook/#secret",
      "title": "Secret",
      "text": "<p>A secret string used to prove authenticity of the request (optional). This will append a <code>X-Hook-Signature</code> header to the request, consisting of a HMAC (SHA-512) hex digest of the request body using the secret as the key.</p>"
    },
    {
      "location": "models/extras/webhook/#conditions",
      "title": "Conditions",
      "text": "<p>A set of prescribed conditions against which the triggering object will be evaluated. If the conditions are defined but not met by the object, the webhook will not be sent. A webhook that does not define any conditions will always trigger.</p>"
    },
    {
      "location": "models/extras/webhook/#ssl-verification",
      "title": "SSL Verification",
      "text": "<p>Controls whether validation of the receiver's SSL certificate is enforced when HTTPS is used.</p> <p>Warning</p> <p>Disabling this can expose your webhooks to man-in-the-middle attacks.</p>"
    },
    {
      "location": "models/extras/webhook/#ca-file-path",
      "title": "CA File Path",
      "text": "<p>The file path to a particular certificate authority (CA) file to use when validating the receiver's SSL certificate (if not using the system defaults).</p>"
    },
    {
      "location": "models/extras/webhook/#context-data",
      "title": "Context Data",
      "text": "<p>The following context variables are available in to the text and link templates.</p> Variable Description <code>event</code> The event type (<code>create</code>, <code>update</code>, or <code>delete</code>) <code>timestamp</code> The time at which the event occured <code>model</code> The type of object impacted <code>username</code> The name of the user associated with the change <code>request_id</code> The unique request ID <code>data</code> A complete serialized representation of the object <code>snapshots</code> Pre- and post-change snapshots of the object"
    },
    {
      "location": "models/ipam/aggregate/",
      "title": "Aggregates",
      "text": "<p>IP addressing is by nature hierarchical. The first few levels of the IPv4 hierarchy, for example, look like this:</p> <ul> <li>0.0.0.0/0<ul> <li>0.0.0.0/1<ul> <li>0.0.0.0/2</li> <li>64.0.0.0/2</li> </ul> </li> <li>128.0.0.0/1<ul> <li>128.0.0.0/2</li> <li>192.0.0.0/2</li> </ul> </li> </ul> </li> </ul> <p>This hierarchy comprises 33 tiers of addressing, from /0 all the way down to individual /32 address (and much, much further to /128 for IPv6). Of course, most organizations are concerned with only relatively small portions of the total IP space, so tracking the uppermost of these tiers isn't necessary.</p> <p>NetBox allows us to specify the portions of IP space that are interesting to us by defining aggregates. Typically, an aggregate will correspond to either an allocation of public (globally routable) IP space granted by a regional authority, or a private (internally-routable) designation. Common private designations include:</p> <ul> <li>10.0.0.0/8 (RFC 1918)</li> <li>100.64.0.0/10 (RFC 6598)</li> <li>172.16.0.0/12 (RFC 1918)</li> <li>192.168.0.0/16 (RFC 1918)</li> <li>One or more /48s within fd00::/8 (IPv6 unique local addressing)</li> </ul> <p>Each aggregate is assigned to a RIR. For \"public\" aggregates, this will be the real-world authority which has granted your organization permission to use the specified IP space on the public Internet. For \"private\" aggregates, this will be a statutory authority, such as RFC 1918. Each aggregate can also annotate that date on which it was allocated, where applicable.</p> <p>Prefixes are automatically arranged beneath their parent aggregates in NetBox. Typically, you'll want to create aggregates only for the prefixes and IP addresses that your organization actually manages: There is no need to define aggregates for provider-assigned space which is only used on Internet circuits, for example.</p> <p>Note</p> <p>Because aggregates represent segments of the global IP space, they cannot overlap with one another: They can only exist side-by-side. For instance, you cannot define both 10.0.0.0/8 and 10.16.0.0/16 as aggregates, because they overlap. 10.16.0.0/16 in this example would be created as a container prefix and automatically grouped under the 10.0.0.0/8 aggregate. Remember, the purpose of aggregates is to establish the root of your IP addressing hierarchy.</p>"
    },
    {
      "location": "models/ipam/aggregate/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/aggregate/#prefix",
      "title": "Prefix",
      "text": "<p>The IPv4 or IPv6 network this aggregate represents.</p>"
    },
    {
      "location": "models/ipam/aggregate/#rir",
      "title": "RIR",
      "text": "<p>The Regional Internet Registry or similar authority which governs allocations of this address space from the global pool.</p>"
    },
    {
      "location": "models/ipam/aggregate/#date-added",
      "title": "Date Added",
      "text": "<p>The date on which the address space was allocated or deployed.</p>"
    },
    {
      "location": "models/ipam/asn/",
      "title": "ASNs",
      "text": "<p>An Autonomous System Number (ASN) is a numeric identifier used in the Border Gateway Protocol (BGP) to identify which autonomous system a particular prefix is originating from or transiting through. NetBox supports both 16- and 32-bit ASNs.</p> <p>ASNs must be globally unique within NetBox, and may be allocated from within a defined range. Each ASN may be assigned to multiple sites.</p>"
    },
    { "location": "models/ipam/asn/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/ipam/asn/#as-number",
      "title": "AS Number",
      "text": "<p>The 16- or 32-bit AS number.</p>"
    },
    {
      "location": "models/ipam/asn/#rir",
      "title": "RIR",
      "text": "<p>The Regional Internet Registry or similar authority responsible for the allocation of this particular ASN.</p>"
    },
    {
      "location": "models/ipam/asn/#sites",
      "title": "Sites",
      "text": "<p>The site(s) to which this ASN is assigned.</p>"
    },
    {
      "location": "models/ipam/asnrange/",
      "title": "ASN Ranges",
      "text": "<p>Ranges can be defined to group AS numbers numerically and to facilitate their automatic provisioning. Each range must be assigned to a RIR.</p>"
    },
    {
      "location": "models/ipam/asnrange/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/asnrange/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name for the range.</p>"
    },
    {
      "location": "models/ipam/asnrange/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/ipam/asnrange/#rir",
      "title": "RIR",
      "text": "<p>The Regional Internet Registry or similar authority responsible for the allocation of AS numbers within this range.</p>"
    },
    {
      "location": "models/ipam/asnrange/#start-end",
      "title": "Start &amp; End",
      "text": "<p>The starting and ending numeric boundaries of the range (inclusive).</p>"
    },
    {
      "location": "models/ipam/fhrpgroup/",
      "title": "FHRP Group",
      "text": "<p>A first-hop redundancy protocol (FHRP) enables multiple physical interfaces to present a virtual IP address (VIP) in a redundant manner. Examples of such protocols include:</p> <ul> <li>Hot Standby Router Protocol (HSRP)</li> <li>Virtual Router Redundancy Protocol (VRRP)</li> <li>Common Address Redundancy Protocol (CARP)</li> <li>Gateway Load Balancing Protocol (GLBP)</li> </ul> <p>When creating a new FHRP group, the user may optionally create a VIP as well. This IP address will be automatically assigned to the new group. (Virtual IP addresses can also be assigned after the group has been created.)</p>"
    },
    {
      "location": "models/ipam/fhrpgroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/fhrpgroup/#protocol",
      "title": "Protocol",
      "text": "<p>The wire protocol employed by cooperating servers to maintain the virtual IP address(es) for the group.</p>"
    },
    {
      "location": "models/ipam/fhrpgroup/#group-id",
      "title": "Group ID",
      "text": "<p>The group's numeric identifier.</p>"
    },
    {
      "location": "models/ipam/fhrpgroup/#name",
      "title": "Name",
      "text": "<p>An optional name for the FHRP group.</p>"
    },
    {
      "location": "models/ipam/fhrpgroup/#authentication-type",
      "title": "Authentication Type",
      "text": "<p>The type of authentication employed by group nodes, if any.</p>"
    },
    {
      "location": "models/ipam/fhrpgroup/#authentication-key",
      "title": "Authentication Key",
      "text": "<p>The shared key used for group authentication, if any.</p> <p>Warning</p> <p>The authentication key value is stored in plaintext in NetBox's database. Do not utilize this field if you require encryption at rest for shared keys.</p>"
    },
    {
      "location": "models/ipam/fhrpgroupassignment/",
      "title": "FHRP Group Assignments",
      "text": "<p>Member device and VM interfaces can be assigned to FHRP groups to indicate their participation in maintaining a common virtual IP address (VIP). For instance, three interfaces, each belonging to a different router, may each be assigned to the same FHRP group to serve a shared VIP. Each of these assignments would typically receive a different priority.</p> <p>Interfaces are assigned to FHRP groups under the interface detail view.</p>"
    },
    {
      "location": "models/ipam/fhrpgroupassignment/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/fhrpgroupassignment/#group",
      "title": "Group",
      "text": "<p>The FHRP group being assigned.</p>"
    },
    {
      "location": "models/ipam/fhrpgroupassignment/#interface",
      "title": "Interface",
      "text": "<p>The device or VM interface to which the group is being assigned.</p>"
    },
    {
      "location": "models/ipam/fhrpgroupassignment/#priority",
      "title": "Priority",
      "text": "<p>A value between 0 and 255 indicating the interface's priority for being elected as the master/primary node in the group.</p>"
    },
    {
      "location": "models/ipam/ipaddress/",
      "title": "IP Addresses",
      "text": "<p>An IP address object in NetBox comprises a single host address (either IPv4 or IPv6) and its subnet mask, and represents an IP address as configured on a network interface. IP addresses can be assigned to device and virtual machine interfaces, as well as to FHRP groups. Further, each device and virtual machine may have one of its interface IPs designated as its primary IP per address family (one for IPv4 and one for IPv6).</p> <p>Tip</p> <p>When primary IPs are set for both IPv4 and IPv6, NetBox will prefer IPv6. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"
    },
    {
      "location": "models/ipam/ipaddress/#network-address-translation-nat",
      "title": "Network Address Translation (NAT)",
      "text": "<p>An IP address can be designated as the network address translation (NAT) inside IP address for exactly one other IP address. This is useful primarily to denote a translation between public and private IP addresses. This relationship is followed in both directions: For example, if 10.0.0.1 is assigned as the inside IP for 192.0.2.1, 192.0.2.1 will be displayed as the outside IP for 10.0.0.1.</p> <p>Note</p> <p>NetBox does not currently support tracking application-level NAT relationships (also called port address translation or PAT). This type of policy requires additional logic to model and cannot be fully represented by IP address alone.</p>"
    },
    {
      "location": "models/ipam/ipaddress/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/ipaddress/#address",
      "title": "Address",
      "text": "<p>The IPv4 or IPv6 address and mask, in CIDR notation (e.g. <code>192.0.2.0/24</code>).</p>"
    },
    {
      "location": "models/ipam/ipaddress/#status",
      "title": "Status",
      "text": "<p>The operational status of the IP address.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>ipam.IPAddress.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/ipam/ipaddress/#role",
      "title": "Role",
      "text": "<p>The functional role fulfilled by this IP address. Options include:</p> <ul> <li>Loopback: Configured on a loopback interface</li> <li>Secondary: One of multiple IP addresses configured on an interface</li> <li>Anycast: Employed for anycast services</li> <li>VIP: A general-purpose virtual IP address</li> <li>VRRP: A virtual IP address managed with the VRRP protocol</li> <li>HSRP: A virtual IP address managed with the HSRP protocol</li> <li>GLBP: A virtual IP address managed with the GLBP protocol</li> <li>CARP: A virtual IP address managed with the CARP protocol</li> </ul> <p>Tip</p> <p>Virtual IP addresses should be assigned to FHRP groups rather than to actual interfaces to accurately model their shared nature.</p>"
    },
    {
      "location": "models/ipam/ipaddress/#vrf",
      "title": "VRF",
      "text": "<p>The Virtual Routing and Forwarding instance in which this IP address exists.</p> <p>Note</p> <p>VRF assignment is optional. IP addresses with no VRF assigned are considered to exist in the \"global\" table.</p>"
    },
    {
      "location": "models/ipam/ipaddress/#dns-name",
      "title": "DNS Name",
      "text": "<p>A DNS A/AAAA record value associated with this IP address.</p>"
    },
    {
      "location": "models/ipam/iprange/",
      "title": "IP Ranges",
      "text": "<p>This model represents an arbitrary range of individual IPv4 or IPv6 addresses, inclusive of its starting and ending addresses. For instance, the range 192.0.2.10 to 192.0.2.20 has eleven members. (The total member count is available as the <code>size</code> property on an IPRange instance.) Like prefixes and IP addresses, each IP range may optionally be assigned to a VRF.</p>"
    },
    {
      "location": "models/ipam/iprange/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/iprange/#vrf",
      "title": "VRF",
      "text": "<p>The Virtual Routing and Forwarding instance in which this IP range exists.</p> <p>Note</p> <p>VRF assignment is optional. IP ranges with no VRF assigned are considered to exist in the \"global\" table.</p>"
    },
    {
      "location": "models/ipam/iprange/#start-end-address",
      "title": "Start &amp; End Address",
      "text": "<p>The beginning and ending IP addresses (inclusive) which define the boundaries of the range. Both IP addresses must specify the correct mask.</p> <p>Note</p> <p>The maximum supported size of an IP range is 2^32 - 1.</p>"
    },
    {
      "location": "models/ipam/iprange/#role",
      "title": "Role",
      "text": "<p>The user-defined functional role assigned to the IP range.</p>"
    },
    {
      "location": "models/ipam/iprange/#status",
      "title": "Status",
      "text": "<p>The IP range's operational status. Note that the status of a range does not have any impact on its member IP addresses, which may have their statuses defined independently.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>IPRange.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/ipam/iprange/#mark-utilized",
      "title": "Mark Utilized",
      "text": "<p>If enabled, the IP range will be considered 100% utilized regardless of how many IP addresses are defined within it. This is useful for documenting DHCP ranges, for example.</p>"
    },
    {
      "location": "models/ipam/prefix/",
      "title": "Prefixes",
      "text": "<p>A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the \"network portion\" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address.) Prefixes are automatically organized by their parent aggregate and assigned VRF.</p>"
    },
    { "location": "models/ipam/prefix/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/ipam/prefix/#prefix",
      "title": "Prefix",
      "text": "<p>The IPv4 or IPv6 network this prefix represents.</p>"
    },
    {
      "location": "models/ipam/prefix/#status",
      "title": "Status",
      "text": "<p>The prefix's operational status. Note that the status of a prefix does not have any impact on its member IP addresses, which may have their statuses defined independently. The \"container\" status indicates that the prefix exists merely as a container for organizing child prefixes.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Prefix.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/ipam/prefix/#vrf",
      "title": "VRF",
      "text": "<p>The Virtual Routing and Forwarding instance in which this prefix exists.</p> <p>Note</p> <p>VRF assignment is optional. Prefixes with no VRF assigned are considered to exist in the \"global\" table.</p>"
    },
    {
      "location": "models/ipam/prefix/#role",
      "title": "Role",
      "text": "<p>The user-defined functional role assigned to the prefix.</p>"
    },
    {
      "location": "models/ipam/prefix/#is-a-pool",
      "title": "Is a Pool",
      "text": "<p>Designates whether the prefix should be treated as a pool. If selected, the first and last IP addresses within the prefix (normally reserved as the network and broadcast addresses, respectively) will be considered usable. This option is ideal for documenting NAT pools.</p>"
    },
    {
      "location": "models/ipam/prefix/#mark-utilized",
      "title": "Mark Utilized",
      "text": "<p>If selected, this prefix will report 100% utilization regardless of how many child objects have been defined within it.</p>"
    },
    {
      "location": "models/ipam/prefix/#scope",
      "title": "Scope",
      "text": "<p>This field replaced the <code>site</code> field in NetBox v4.2.</p> <p>The region, site, site group or location to which the prefix is assigned (optional).</p>"
    },
    {
      "location": "models/ipam/prefix/#vlan",
      "title": "VLAN",
      "text": "<p>The VLAN to which this prefix is assigned (optional). This mapping is helpful for associating IP space with layer two domains. A VLAN may have multiple prefixes assigned to it.</p>"
    },
    {
      "location": "models/ipam/rir/",
      "title": "Regional Internet Registries (RIRs)",
      "text": "<p>Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. However, some address space has been set aside for internal use, such as defined in RFCs 1918 and 6598. NetBox considers these RFCs as a sort of RIR as well; that is, an authority which \"owns\" certain address space. There also exist lower-tier registries which serve particular geographic areas.</p> <p>Users can create whatever RIRs they like, but each aggregate must be assigned to one RIR. For example, suppose your organization has been allocated 104.131.0.0/16 by ARIN. It also makes use of RFC 1918 addressing internally. You would first create RIRs named \"ARIN\" and \"RFC 1918,\" then create an aggregate for each of these top-level prefixes, assigning it to its respective RIR.</p>"
    },
    { "location": "models/ipam/rir/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/ipam/rir/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/ipam/rir/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/ipam/rir/#private",
      "title": "Private",
      "text": "<p>Designates this RIR as an authority for private/local IP space only (e.g. an RFC).</p>"
    },
    {
      "location": "models/ipam/role/",
      "title": "Prefix/VLAN Roles",
      "text": "<p>A role indicates the function of a prefix or VLAN. For example, you might define Data, Voice, and Security roles. Generally, a prefix will be assigned the same functional role as the VLAN to which it is assigned (if any).</p>"
    },
    { "location": "models/ipam/role/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/ipam/role/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/ipam/role/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/ipam/role/#weight",
      "title": "Weight",
      "text": "<p>A numeric weight employed to influence the ordering of roles. Roles with a lower weight will be listed before those with higher weights.</p>"
    },
    {
      "location": "models/ipam/routetarget/",
      "title": "Route Targets",
      "text": "<p>A route target is a particular type of extended BGP community used to control the redistribution of routes among VRF tables in a network. Route targets can be assigned to individual VRFs in NetBox as import or export targets (or both) to model this exchange in an L3VPN. Each route target must be given a unique name, which should be in a format prescribed by RFC 4364, similar to a VR route distinguisher.</p>"
    },
    {
      "location": "models/ipam/routetarget/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/routetarget/#name",
      "title": "Name",
      "text": "<p>The route target identifier formatted in accordance with RFC 4360.</p>"
    },
    {
      "location": "models/ipam/service/",
      "title": "Services",
      "text": "<p>A service represents a layer seven application available on a device or virtual machine. For example, a service might be created in NetBox to represent an HTTP server running on TCP/8000. Each service may optionally be further bound to one or more specific interfaces assigned to the selected device or virtual machine.</p> <p>To aid in the efficient creation of services, users may opt to first create a service template from which service definitions can be quickly replicated.</p>"
    },
    {
      "location": "models/ipam/service/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/service/#name",
      "title": "Name",
      "text": "<p>A service or protocol name.</p>"
    },
    {
      "location": "models/ipam/service/#protocol",
      "title": "Protocol",
      "text": "<p>The wire protocol on which the service runs. Choices include UDP, TCP, and SCTP.</p>"
    },
    {
      "location": "models/ipam/service/#ports",
      "title": "Ports",
      "text": "<p>One or more numeric ports to which the service is bound. Multiple ports can be expressed using commas and/or hyphens. For example, <code>80,8001-8003</code> specifies ports 80, 8001, 8002, and 8003.</p>"
    },
    {
      "location": "models/ipam/service/#ip-addresses",
      "title": "IP Addresses",
      "text": "<p>The IP address(es) to which this service is bound. If no IP addresses are bound, the service is assumed to be reachable via any assigned IP address.</p>"
    },
    {
      "location": "models/ipam/servicetemplate/",
      "title": "Service Templates",
      "text": "<p>Service templates can be used to instantiate services on devices and virtual machines.</p>"
    },
    {
      "location": "models/ipam/servicetemplate/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/servicetemplate/#name",
      "title": "Name",
      "text": "<p>A service or protocol name.</p>"
    },
    {
      "location": "models/ipam/servicetemplate/#protocol",
      "title": "Protocol",
      "text": "<p>The wire protocol on which the service runs. Choices include UDP, TCP, and SCTP.</p>"
    },
    {
      "location": "models/ipam/servicetemplate/#ports",
      "title": "Ports",
      "text": "<p>One or more numeric ports to which the service is bound. Multiple ports can be expressed using commas and/or hyphens. For example, <code>80,8001-8003</code> specifies ports 80, 8001, 8002, and 8003.</p>"
    },
    {
      "location": "models/ipam/vlan/",
      "title": "VLANs",
      "text": "<p>A Virtual LAN (VLAN) represents an isolated layer two domain, identified by a name and a numeric ID (1-4094) as defined in IEEE 802.1Q. VLANs are arranged into VLAN groups to define scope and to enforce uniqueness.</p>"
    },
    { "location": "models/ipam/vlan/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/ipam/vlan/#id",
      "title": "ID",
      "text": "<p>A 12-bit numeric ID for the VLAN, 1-4094 (inclusive).</p>"
    },
    {
      "location": "models/ipam/vlan/#name",
      "title": "Name",
      "text": "<p>The configured VLAN name.</p>"
    },
    {
      "location": "models/ipam/vlan/#status",
      "title": "Status",
      "text": "<p>The VLAN's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>VLAN.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/ipam/vlan/#role",
      "title": "Role",
      "text": "<p>The user-defined functional role assigned to the VLAN.</p>"
    },
    {
      "location": "models/ipam/vlan/#vlan-group-or-site",
      "title": "VLAN Group or Site",
      "text": "<p>The VLAN group or site to which the VLAN is assigned.</p>"
    },
    {
      "location": "models/ipam/vlan/#q-in-q-role",
      "title": "Q-in-Q Role",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>For VLANs which comprise a Q-in-Q/IEEE 802.1ad topology, this field indicates whether the VLAN is treated as a service or customer VLAN.</p>"
    },
    {
      "location": "models/ipam/vlan/#q-in-q-service-vlan",
      "title": "Q-in-Q Service VLAN",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The designated parent service VLAN for a Q-in-Q customer VLAN. This may be set only for Q-in-Q custom VLANs.</p>"
    },
    {
      "location": "models/ipam/vlangroup/",
      "title": "VLAN Groups",
      "text": "<p>VLAN groups can be used to organize VLANs within NetBox. Each VLAN group can be scoped to a particular region, site group, site, location, rack, cluster group, or cluster. Member VLANs will be available for assignment to devices and/or virtual machines within the specified scope.</p> <p>Groups can also be used to enforce uniqueness: Each VLAN within a group must have a unique ID and name. VLANs which are not assigned to a group may have overlapping names and IDs (including VLANs which belong to a common site). For example, two VLANs with ID 123 may be created, but they cannot both be assigned to the same group.</p>"
    },
    {
      "location": "models/ipam/vlangroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/vlangroup/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/ipam/vlangroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/ipam/vlangroup/#vlan-id-ranges",
      "title": "VLAN ID Ranges",
      "text": "<p>The set of VLAN IDs which are encompassed by the group. By default, this will be the entire range of valid IEEE 802.1Q VLAN IDs (1 to 4094, inclusive). VLANs created within a group must have a VID that falls within one of these ranges. Ranges may not overlap.</p>"
    },
    {
      "location": "models/ipam/vlangroup/#scope",
      "title": "Scope",
      "text": "<p>The domain covered by a VLAN group, defined as one of the supported object types. This conveys the context in which a VLAN group applies.</p>"
    },
    {
      "location": "models/ipam/vlantranslationpolicy/",
      "title": "VLAN Translation Policies",
      "text": "<p>This feature was introduced in NetBox v4.2.</p> <p>VLAN translation is a feature that consists of VLAN translation policies and VLAN translation rules. Many rules can belong to a policy, and each rule defines a mapping of a local to remote VLAN ID (VID). A policy can then be assigned to an Interface or VMInterface, and all VLAN translation rules associated with that policy will be visible in the interface details.</p> <p>There are uniqueness constraints on <code>(policy, local_vid)</code> and on <code>(policy, remote_vid)</code> in the <code>VLANTranslationRule</code> model. Thus, you cannot have multiple rules linked to the same policy that have the same local VID or the same remote VID. A set of policies and rules might look like this:</p> <p>Policy 1: - Rule: 100 -&gt; 200 - Rule: 101 -&gt; 201</p> <p>Policy 2: - Rule: 100 -&gt; 300 - Rule: 101 -&gt; 301</p> <p>However this is not allowed:</p> <p>Policy 3: - Rule: 100 -&gt; 200 - Rule: 100 -&gt; 300</p>"
    },
    {
      "location": "models/ipam/vlantranslationpolicy/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/vlantranslationpolicy/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/ipam/vlantranslationrule/",
      "title": "VLAN Translation Rules",
      "text": "<p>This feature was introduced in NetBox v4.2.</p> <p>A VLAN translation rule represents a one-to-one mapping of a local VLAN ID (VID) to a remote VID. Many rules can belong to a single policy.</p> <p>See VLAN translation policies for an overview of the VLAN Translation feature.</p>"
    },
    {
      "location": "models/ipam/vlantranslationrule/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/ipam/vlantranslationrule/#policy",
      "title": "Policy",
      "text": "<p>The VLAN Translation Policy to which this rule belongs.</p>"
    },
    {
      "location": "models/ipam/vlantranslationrule/#local-vid",
      "title": "Local VID",
      "text": "<p>VLAN ID (1-4094) in the local network which is to be translated to a remote VID.</p>"
    },
    {
      "location": "models/ipam/vlantranslationrule/#remote-vid",
      "title": "Remote VID",
      "text": "<p>VLAN ID (1-4094) in the remote network to which the local VID will be translated.</p>"
    },
    {
      "location": "models/ipam/vrf/",
      "title": "Virtual Routing and Forwarding (VRF)",
      "text": "<p>A VRF object in NetBox represents a Virtual Routing and Forwarding (VRF) domain. Each VRF is essentially an independent routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.</p> <p>Each prefix, IP range, and IP address may be assigned to one (and only one) VRF. If you have a prefix or IP address which exists in multiple VRFs, you will need to create a separate instance of it in NetBox for each VRF. Any such object not assigned to a VRF is said to belong to the \"global\" table.</p>"
    },
    { "location": "models/ipam/vrf/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/ipam/vrf/#name",
      "title": "Name",
      "text": "<p>The configured or administrative name for the VRF instance.</p>"
    },
    {
      "location": "models/ipam/vrf/#route-distinguisher",
      "title": "Route Distinguisher",
      "text": "<p>A route distinguisher is used to map routes to VRFs within a device's routing table e.g. for MPLS/VPN. The assignment of a route distinguisher is optional. If defined, the RD is expected to take one of the forms prescribed in RFC 4364, however its formatting is not strictly enforced.</p>"
    },
    {
      "location": "models/ipam/vrf/#enforce-unique-space",
      "title": "Enforce Unique Space",
      "text": "<p>By default, NetBox will permit duplicate prefixes to be assigned to a VRF. This behavior can be toggled by setting the \"enforce unique\" flag on the VRF model.</p> <p>Note</p> <p>Enforcement of unique IP space can be toggled for global table (non-VRF prefixes) using the <code>ENFORCE_GLOBAL_UNIQUE</code> configuration setting.</p>"
    },
    {
      "location": "models/ipam/vrf/#import-export-targets",
      "title": "Import &amp; Export Targets",
      "text": "<p>Each VRF may have one or more import and/or export route targets applied to it. Route targets are used to control the exchange of routes (prefixes) among VRFs in L3VPNs.</p>"
    },
    {
      "location": "models/tenancy/contact/",
      "title": "Contacts",
      "text": "<p>A contact represents an individual or group that has been associated with an object in NetBox for administrative reasons. For example, you might assign one or more operational contacts to each site.</p>"
    },
    {
      "location": "models/tenancy/contact/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/tenancy/contact/#group",
      "title": "Group",
      "text": "<p>The contact group to which this contact is assigned (if any).</p>"
    },
    {
      "location": "models/tenancy/contact/#name",
      "title": "Name",
      "text": "<p>The name of the contact. This may be an individual or a team/department. (This is the only required contact detail; all others are optional.)</p>"
    },
    {
      "location": "models/tenancy/contact/#title",
      "title": "Title",
      "text": "<p>The contact's title or role.</p>"
    },
    {
      "location": "models/tenancy/contact/#phone",
      "title": "Phone",
      "text": "<p>The contact's phone number. (Note that NetBox does not enforce a particular numbering format.)</p>"
    },
    {
      "location": "models/tenancy/contact/#email",
      "title": "Email",
      "text": "<p>The contact's email address.</p>"
    },
    {
      "location": "models/tenancy/contact/#address",
      "title": "Address",
      "text": "<p>The contact's physical or mailing address.</p>"
    },
    {
      "location": "models/tenancy/contact/#link",
      "title": "Link",
      "text": "<p>A URL to reach the contact via some other means.</p>"
    },
    {
      "location": "models/tenancy/contactgroup/",
      "title": "Contact Groups",
      "text": "<p>Contacts can be organized into arbitrary groups. These groups can be recursively nested for convenience. Each contact within a group must have a unique name, but other attributes can be repeated.</p>"
    },
    {
      "location": "models/tenancy/contactgroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/tenancy/contactgroup/#parent",
      "title": "Parent",
      "text": "<p>The parent contact group (if any).</p>"
    },
    {
      "location": "models/tenancy/contactgroup/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/tenancy/contactgroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/tenancy/contactrole/",
      "title": "Contact Roles",
      "text": "<p>Contacts can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for administrative, operational, or emergency contacts.</p>"
    },
    {
      "location": "models/tenancy/contactrole/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/tenancy/contactrole/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/tenancy/contactrole/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/tenancy/tenant/",
      "title": "Tenants",
      "text": "<p>A tenant represents a discrete grouping of resources used for administrative purposes. Typically, tenants are used to represent individual customers or internal departments within an organization. </p>"
    },
    {
      "location": "models/tenancy/tenant/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/tenancy/tenant/#name",
      "title": "Name",
      "text": "<p>A human-friendly name, unique to the assigned group.</p>"
    },
    {
      "location": "models/tenancy/tenant/#slug",
      "title": "Slug",
      "text": "<p>A URL-friendly identifier, unique to the assigned group. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/tenancy/tenant/#group",
      "title": "Group",
      "text": "<p>The tenant group to which this tenant belongs (if any).</p>"
    },
    {
      "location": "models/tenancy/tenantgroup/",
      "title": "Tenant Groups",
      "text": "<p>Tenants can be organized by custom groups. For instance, you might create one group called \"Customers\" and one called \"Departments.\" The assignment of a tenant to a group is optional.</p> <p>Tenant groups may be nested recursively to achieve a multi-level hierarchy. For example, you might have a group called \"Customers\" containing subgroups of individual tenants grouped by product or account team.</p>"
    },
    {
      "location": "models/tenancy/tenantgroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/tenancy/tenantgroup/#parent",
      "title": "Parent",
      "text": "<p>The parent tenant group (if any).</p>"
    },
    {
      "location": "models/tenancy/tenantgroup/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/tenancy/tenantgroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/virtualization/cluster/",
      "title": "Clusters",
      "text": "<p>A cluster is a logical grouping of physical resources within which virtual machines run. Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside.</p>"
    },
    {
      "location": "models/virtualization/cluster/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/virtualization/cluster/#name",
      "title": "Name",
      "text": "<p>A human-friendly name for the cluster. Must be unique within the assigned group and site.</p>"
    },
    {
      "location": "models/virtualization/cluster/#type",
      "title": "Type",
      "text": "<p>The cluster type assigned for this cluster.</p>"
    },
    {
      "location": "models/virtualization/cluster/#group",
      "title": "Group",
      "text": "<p>The cluster group to which this cluster belongs.</p>"
    },
    {
      "location": "models/virtualization/cluster/#status",
      "title": "Status",
      "text": "<p>The cluster's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Cluster.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/virtualization/cluster/#scope",
      "title": "Scope",
      "text": "<p>This field replaced the <code>site</code> field in NetBox v4.2.</p> <p>The region, site, site group or location with which this cluster is associated.</p>"
    },
    {
      "location": "models/virtualization/clustergroup/",
      "title": "Cluster Groups",
      "text": "<p>Cluster groups may be created for the purpose of organizing clusters. The arrangement of clusters into groups is optional.</p>"
    },
    {
      "location": "models/virtualization/clustergroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/virtualization/clustergroup/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/virtualization/clustergroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/virtualization/clustertype/",
      "title": "Cluster Types",
      "text": "<p>A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.</p>"
    },
    {
      "location": "models/virtualization/clustertype/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/virtualization/clustertype/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/virtualization/clustertype/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/virtualization/virtualdisk/",
      "title": "Virtual Disks",
      "text": "<p>A virtual disk is used to model discrete virtual hard disks assigned to virtual machines.</p>"
    },
    {
      "location": "models/virtualization/virtualdisk/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/virtualization/virtualdisk/#name",
      "title": "Name",
      "text": "<p>A human-friendly name that is unique to the assigned virtual machine.</p>"
    },
    {
      "location": "models/virtualization/virtualdisk/#size",
      "title": "Size",
      "text": "<p>The allocated disk size, in megabytes.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/",
      "title": "Virtual Machines",
      "text": "<p>A virtual machine (VM) represents a virtual compute instance hosted within a cluster. Each VM must be assigned to a site and/or cluster, and may optionally be assigned to a particular host device within a cluster.</p> <p>Virtual machines may have virtual interfaces assigned to them, but do not support any physical component. When a VM has one or more interfaces with IP addresses assigned, a primary IP for the device can be designated, for both IPv4 and IPv6.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/virtualization/virtualmachine/#name",
      "title": "Name",
      "text": "<p>The virtual machine's configured name. Must be unique to the assigned cluster and tenant.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#role",
      "title": "Role",
      "text": "<p>The functional role assigned to the VM.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#status",
      "title": "Status",
      "text": "<p>The VM's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>VirtualMachine.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#site-cluster",
      "title": "Site &amp; Cluster",
      "text": "<p>The site and/or cluster to which the VM is assigned.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#device",
      "title": "Device",
      "text": "<p>The physical host device within the assigned site/cluster on which this VM resides.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#platform",
      "title": "Platform",
      "text": "<p>A VM may be associated with a particular platform to indicate its operating system.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#primary-ipv4-ipv6-addresses",
      "title": "Primary IPv4 &amp; IPv6 Addresses",
      "text": "<p>Each VM may designate one primary IPv4 address and/or one primary IPv6 address for management purposes.</p> <p>Tip</p> <p>NetBox will prefer IPv6 addresses over IPv4 addresses by default. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#vcpus",
      "title": "vCPUs",
      "text": "<p>The number of virtual CPUs provisioned. A VM may be allocated a partial vCPU count (e.g. 1.5 vCPU).</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#memory",
      "title": "Memory",
      "text": "<p>The amount of running memory provisioned, in megabytes.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#disk",
      "title": "Disk",
      "text": "<p>The amount of disk storage provisioned, in megabytes.</p> <p>Warning</p> <p>This field may be directly modified only on virtual machines which do not define discrete virtual disks. Otherwise, it will report the sum of all attached disks.</p>"
    },
    {
      "location": "models/virtualization/virtualmachine/#serial-number",
      "title": "Serial Number",
      "text": "<p>Optional serial number assigned to this virtual machine. Unlike devices, uniqueness is not enforced for virtual machine serial numbers.</p>"
    },
    {
      "location": "models/virtualization/vminterface/",
      "title": "VMInterface",
      "text": ""
    },
    {
      "location": "models/virtualization/vminterface/#interfaces",
      "title": "Interfaces",
      "text": "<p>Virtual machine interfaces behave similarly to device interfaces: They can be assigned to VRFs, may have IP addresses, VLANs, and services attached to them, and so on. However, given their virtual nature, they lack properties pertaining to physical attributes. For example, VM interfaces do not have a physical type and cannot have cables attached to them.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/virtualization/vminterface/#virtual-machine",
      "title": "Virtual Machine",
      "text": "<p>The virtual machine to which this interface is assigned.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#name",
      "title": "Name",
      "text": "<p>The interface's name. Must be unique to the assigned VM.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#parent-interface",
      "title": "Parent Interface",
      "text": "<p>Identifies the parent interface of a subinterface (e.g. used to employ encapsulation).</p> <p>Note</p> <p>An interface with one or more child interfaces assigned cannot be deleted until all its child interfaces have been deleted or reassigned.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#bridged-interface",
      "title": "Bridged Interface",
      "text": "<p>An interface on the same VM with which this interface is bridged.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#enabled",
      "title": "Enabled",
      "text": "<p>If not selected, this interface will be treated as disabled/inoperative.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#primary-mac-address",
      "title": "Primary MAC Address",
      "text": "<p>The MAC address assigned to this interface which is designated as its primary.</p> <p>Changed in NetBox v4.2</p> <p>The MAC address of an interface (formerly a concrete database field) is available as a property, <code>mac_address</code>, which reflects the value of the primary linked MAC address object.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#mtu",
      "title": "MTU",
      "text": "<p>The interface's configured maximum transmissible unit (MTU).</p>"
    },
    {
      "location": "models/virtualization/vminterface/#8021q-mode",
      "title": "802.1Q Mode",
      "text": "<p>For switched Ethernet interfaces, this identifies the 802.1Q encapsulation strategy in effect. Options include:</p> <ul> <li>Access: All traffic is assigned to a single VLAN, with no tagging.</li> <li>Tagged: One untagged \"native\" VLAN is allowed, as well as any number of tagged VLANs.</li> <li>Tagged (all): Implies that all VLANs are carried by the interface. One untagged VLAN may be designated.</li> <li>Q-in-Q: Q-in-Q (IEEE 802.1ad) encapsulation is performed using the assigned SVLAN.</li> </ul> <p>This field must be left blank for routed interfaces which do employ 802.1Q encapsulation.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#untagged-vlan",
      "title": "Untagged VLAN",
      "text": "<p>The \"native\" (untagged) VLAN for the interface. Valid only when one of the above 802.1Q mode is selected.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#tagged-vlans",
      "title": "Tagged VLANs",
      "text": "<p>The tagged VLANs which are configured to be carried by this interface. Valid only for the \"tagged\" 802.1Q mode above.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#q-in-q-svlan",
      "title": "Q-in-Q SVLAN",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The assigned service VLAN (for Q-in-Q/802.1ad interfaces).</p>"
    },
    {
      "location": "models/virtualization/vminterface/#vrf",
      "title": "VRF",
      "text": "<p>The virtual routing and forwarding instance to which this interface is assigned.</p>"
    },
    {
      "location": "models/virtualization/vminterface/#vlan-translation-policy",
      "title": "VLAN Translation Policy",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The VLAN translation policy that applies to this interface (optional).</p>"
    },
    {
      "location": "models/vpn/ikepolicy/",
      "title": "IKE Policies",
      "text": "<p>An Internet Key Exchange (IKE) policy defines an IKE version, mode, and set of proposals to be used in IKE negotiation. These policies are referenced by IPSec profiles.</p>"
    },
    {
      "location": "models/vpn/ikepolicy/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/ikepolicy/#name",
      "title": "Name",
      "text": "<p>The unique user-assigned name for the policy.</p>"
    },
    {
      "location": "models/vpn/ikepolicy/#version",
      "title": "Version",
      "text": "<p>The IKE version employed (v1 or v2).</p>"
    },
    {
      "location": "models/vpn/ikepolicy/#mode",
      "title": "Mode",
      "text": "<p>The mode employed (main or aggressive) when IKEv1 is in use. This setting is not supported for IKEv2.</p>"
    },
    {
      "location": "models/vpn/ikepolicy/#proposals",
      "title": "Proposals",
      "text": "<p>One or more IKE proposals supported for use by this policy.</p>"
    },
    {
      "location": "models/vpn/ikepolicy/#pre-shared-key",
      "title": "Pre-shared Key",
      "text": "<p>A pre-shared secret key associated with this policy (optional).</p>"
    },
    {
      "location": "models/vpn/ikeproposal/",
      "title": "IKE Proposals",
      "text": "<p>An Internet Key Exhcnage (IKE) proposal defines a set of parameters used to establish a secure bidirectional connection across an untrusted medium, such as the Internet. IKE proposals defined in NetBox can be referenced by IKE policies, which are in turn employed by IPSec profiles.</p> <p>Note</p> <p>Some platforms refer to IKE proposals as ISAKMP, which is a framework for authentication and key exchange which employs IKE.</p>"
    },
    {
      "location": "models/vpn/ikeproposal/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/ikeproposal/#name",
      "title": "Name",
      "text": "<p>The unique user-assigned name for the proposal.</p>"
    },
    {
      "location": "models/vpn/ikeproposal/#authentication-method",
      "title": "Authentication Method",
      "text": "<p>The strategy employed for authenticating the IKE peer. Available options are listed below.</p> Name Pre-shared key Certificate RSA signature DSA signature"
    },
    {
      "location": "models/vpn/ikeproposal/#encryption-algorithm",
      "title": "Encryption Algorithm",
      "text": "<p>The protocol employed for data encryption. Options include DES, 3DES, and various flavors of AES.</p>"
    },
    {
      "location": "models/vpn/ikeproposal/#authentication-algorithm",
      "title": "Authentication Algorithm",
      "text": "<p>The mechanism employed to ensure data integrity. Options include MD5 and SHA HMAC implementations. Specifying an authentication algorithm is optional, as some encryption algorithms (e.g. AES-GCM) provide authentication natively.</p>"
    },
    {
      "location": "models/vpn/ikeproposal/#group",
      "title": "Group",
      "text": "<p>The Diffie-Hellman group supported by the proposal. Group IDs are managed by IANA.</p>"
    },
    {
      "location": "models/vpn/ikeproposal/#sa-lifetime",
      "title": "SA Lifetime",
      "text": "<p>The maximum lifetime for the IKE security association (SA), in seconds.</p>"
    },
    {
      "location": "models/vpn/ipsecpolicy/",
      "title": "IPSec Policy",
      "text": "<p>An IPSec policy defines a set of proposals to be used in the formation of IPSec tunnels. A perfect forward secrecy (PFS) group may optionally also be defined. These policies are referenced by IPSec profiles.</p>"
    },
    {
      "location": "models/vpn/ipsecpolicy/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/ipsecpolicy/#name",
      "title": "Name",
      "text": "<p>The unique user-assigned name for the policy.</p>"
    },
    {
      "location": "models/vpn/ipsecpolicy/#proposals",
      "title": "Proposals",
      "text": "<p>One or more IPSec proposals supported for use by this policy.</p>"
    },
    {
      "location": "models/vpn/ipsecpolicy/#pfs-group",
      "title": "PFS Group",
      "text": "<p>The perfect forward secrecy (PFS) group supported by this policy (optional).</p>"
    },
    {
      "location": "models/vpn/ipsecprofile/",
      "title": "IPSec Profile",
      "text": "<p>An IPSec profile defines an IKE policy, IPSec policy, and IPSec mode used for establishing an IPSec tunnel.</p>"
    },
    {
      "location": "models/vpn/ipsecprofile/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/ipsecprofile/#name",
      "title": "Name",
      "text": "<p>The unique user-assigned name for the profile.</p>"
    },
    {
      "location": "models/vpn/ipsecprofile/#mode",
      "title": "Mode",
      "text": "<p>The IPSec mode employed by the profile: Encapsulating Security Payload (ESP) or Authentication Header (AH).</p>"
    },
    {
      "location": "models/vpn/ipsecprofile/#ike-policy",
      "title": "IKE Policy",
      "text": "<p>The IKE policy associated with the profile.</p>"
    },
    {
      "location": "models/vpn/ipsecprofile/#ipsec-policy",
      "title": "IPSec Policy",
      "text": "<p>The IPSec policy associated with the profile.</p>"
    },
    {
      "location": "models/vpn/ipsecproposal/",
      "title": "IPSec Proposal",
      "text": "<p>An IPSec proposal defines a set of parameters used in negotiating security associations for IPSec tunnels. IPSec proposals defined in NetBox can be referenced by IPSec policies, which are in turn employed by IPSec profiles.</p>"
    },
    {
      "location": "models/vpn/ipsecproposal/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/ipsecproposal/#name",
      "title": "Name",
      "text": "<p>The unique user-assigned name for the proposal.</p>"
    },
    {
      "location": "models/vpn/ipsecproposal/#encryption-algorithm",
      "title": "Encryption Algorithm",
      "text": "<p>The protocol employed for data encryption. Options include DES, 3DES, and various flavors of AES.</p> <p>Note</p> <p>If an encryption algorithm is not specified, an authentication algorithm must be specified.</p>"
    },
    {
      "location": "models/vpn/ipsecproposal/#authentication-algorithm",
      "title": "Authentication Algorithm",
      "text": "<p>The mechanism employed to ensure data integrity. Options include MD5 and SHA HMAC implementations.</p> <p>Note</p> <p>If an authentication algorithm is not specified, an encryption algorithm must be specified.</p>"
    },
    {
      "location": "models/vpn/ipsecproposal/#sa-lifetime-seconds",
      "title": "SA Lifetime (Seconds)",
      "text": "<p>The maximum amount of time for which the security association (SA) may be active, in seconds.</p>"
    },
    {
      "location": "models/vpn/ipsecproposal/#sa-lifetime-data",
      "title": "SA Lifetime (Data)",
      "text": "<p>The maximum amount of data which can be transferred within the security association (SA) before it must be rebuilt, in kilobytes.</p>"
    },
    {
      "location": "models/vpn/l2vpn/",
      "title": "L2VPN",
      "text": "<p>A L2VPN object is NetBox is a representation of a layer 2 bridge technology such as VXLAN, VPLS, or EPL. Each L2VPN can be identified by name as well as by an optional unique identifier (VNI would be an example). Once created, L2VPNs can be terminated to interfaces and VLANs.</p>"
    },
    { "location": "models/vpn/l2vpn/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/vpn/l2vpn/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/vpn/l2vpn/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/vpn/l2vpn/#type",
      "title": "Type",
      "text": "<p>The technology employed in forming and operating the L2VPN. Choices include:</p> <ul> <li>VPLS</li> <li>VPWS</li> <li>EPL</li> <li>EVPL</li> <li>EP-LAN</li> <li>EVP-LAN</li> <li>EP-TREE</li> <li>EVP-TREE</li> <li>VXLAN</li> <li>VXLAN-EVPN</li> <li>MPLS-EVPN</li> <li>PBB-EVPN</li> <li>EVPN-VPWS</li> </ul> <p>Note</p> <p>Designating the type as VPWS, EPL, EP-LAN, EP-TREE will limit the L2VPN instance to two terminations.</p>"
    },
    {
      "location": "models/vpn/l2vpn/#identifier",
      "title": "Identifier",
      "text": "<p>An optional numeric identifier. This can be used to track a pseudowire ID, for example.</p>"
    },
    {
      "location": "models/vpn/l2vpn/#import-export-targets",
      "title": "Import &amp; Export Targets",
      "text": "<p>The route targets associated with this L2VPN to control the import and export of forwarding information.</p>"
    },
    {
      "location": "models/vpn/l2vpntermination/",
      "title": "L2VPN Termination",
      "text": "<p>A L2VPN termination is the attachment of an L2VPN to an interface or VLAN. Note that the L2VPNs of the following types may have only two terminations assigned to them:</p> <ul> <li>VPWS</li> <li>EPL</li> <li>EP-LAN</li> <li>EP-TREE</li> </ul>"
    },
    {
      "location": "models/vpn/l2vpntermination/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/l2vpntermination/#l2vpn",
      "title": "L2VPN",
      "text": "<p>The L2VPN instance.</p>"
    },
    {
      "location": "models/vpn/l2vpntermination/#vlan-or-interface",
      "title": "VLAN or Interface",
      "text": "<p>The VLAN, device interface, or virtual machine interface attached to the L2VPN.</p>"
    },
    {
      "location": "models/vpn/tunnel/",
      "title": "Tunnels",
      "text": "<p>A tunnel represents a private virtual connection established among two or more endpoints across a shared infrastructure by employing protocol encapsulation. Common encapsulation techniques include Generic Routing Encapsulation (GRE), IP-in-IP, and IPSec. NetBox supports modeling both peer-to-peer and hub-and-spoke tunnel topologies.</p> <p>Device and virtual machine interfaces are associated to tunnels by creating tunnel terminations.</p>"
    },
    { "location": "models/vpn/tunnel/#fields", "title": "Fields", "text": "" },
    {
      "location": "models/vpn/tunnel/#name",
      "title": "Name",
      "text": "<p>A unique name assigned to the tunnel for identification.</p>"
    },
    {
      "location": "models/vpn/tunnel/#status",
      "title": "Status",
      "text": "<p>The operational status of the tunnel. By default, the following statuses are available:</p> <ul> <li>Planned</li> <li>Active</li> <li>Disabled</li> </ul> <p>Custom tunnel statuses</p> <p>Additional tunnel statuses may be defined by setting <code>Tunnel.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/vpn/tunnel/#group",
      "title": "Group",
      "text": "<p>The administrative group to which this tunnel is assigned (optional).</p>"
    },
    {
      "location": "models/vpn/tunnel/#encapsulation",
      "title": "Encapsulation",
      "text": "<p>The encapsulation protocol or technique employed to effect the tunnel. NetBox supports GRE, IP-in-IP, and IPSec encapsulations.</p>"
    },
    {
      "location": "models/vpn/tunnel/#tunnel-id",
      "title": "Tunnel ID",
      "text": "<p>An optional numeric identifier for the tunnel.</p>"
    },
    {
      "location": "models/vpn/tunnel/#ipsec-profile",
      "title": "IPSec Profile",
      "text": "<p>For IPSec tunnels, this is the IPSec Profile employed to negotiate security associations.</p>"
    },
    {
      "location": "models/vpn/tunnelgroup/",
      "title": "Tunnel Group",
      "text": "<p>Tunnels can be arranged into administrative groups for organization. For example, you might crete a group to manage all peer-to-peer tunnels inside a mesh network. The assignment of a tunnel to a group is optional.</p>"
    },
    {
      "location": "models/vpn/tunnelgroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/tunnelgroup/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/vpn/tunnelgroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/vpn/tunneltermination/",
      "title": "Tunnel Terminations",
      "text": "<p>A tunnel termination connects a device or virtual machine interface to a tunnel. The tunnel must be created before any terminations may be added.</p>"
    },
    {
      "location": "models/vpn/tunneltermination/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/vpn/tunneltermination/#tunnel",
      "title": "Tunnel",
      "text": "<p>The tunnel to which this termination is made.</p>"
    },
    {
      "location": "models/vpn/tunneltermination/#role",
      "title": "Role",
      "text": "<p>The functional role of the attached interface. The following options are available:</p> Name Description Peer An endpoint in a point-to-point or mesh topology Hub A central point in a hub-and-spoke topology Spoke An edge point in a hub-and-spoke topology <p>Note</p> <p>Multiple hub terminations may be attached to a tunnel.</p>"
    },
    {
      "location": "models/vpn/tunneltermination/#termination",
      "title": "Termination",
      "text": "<p>The device or virtual machine interface terminated to the tunnel.</p>"
    },
    {
      "location": "models/vpn/tunneltermination/#outside-ip",
      "title": "Outside IP",
      "text": "<p>The public or underlay IP address with which this termination is associated. This is the IP to which peers will route tunneled traffic.</p>"
    },
    {
      "location": "models/wireless/wirelesslan/",
      "title": "Wireless LANs",
      "text": "<p>A wireless LAN is a set of interfaces connected via a common wireless channel, identified by its SSID and authentication parameters. Wireless interfaces can be associated with wireless LANs to model multi-acess wireless segments.</p>"
    },
    {
      "location": "models/wireless/wirelesslan/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/wireless/wirelesslan/#ssid",
      "title": "SSID",
      "text": "<p>The service set identifier (SSID) for the wireless network.</p>"
    },
    {
      "location": "models/wireless/wirelesslan/#group",
      "title": "Group",
      "text": "<p>The wireless LAN group to which this wireless LAN is assigned (if any).</p>"
    },
    {
      "location": "models/wireless/wirelesslan/#status",
      "title": "Status",
      "text": "<p>The operational status of the wireless network.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>WirelessLAN.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"
    },
    {
      "location": "models/wireless/wirelesslan/#vlan",
      "title": "VLAN",
      "text": "<p>Each wireless LAN can optionally be mapped to a VLAN, to model a bridge between wired and wireless segments.</p>"
    },
    {
      "location": "models/wireless/wirelesslan/#authentication-type",
      "title": "Authentication Type",
      "text": "<p>The type of wireless authentication in use. Options include:</p> <ul> <li>Open</li> <li>WEP</li> <li>WPA Personal (PSK)</li> <li>WPA Enterprise</li> </ul>"
    },
    {
      "location": "models/wireless/wirelesslan/#authentication-cipher",
      "title": "Authentication Cipher",
      "text": "<p>The security cipher used to apply wireless authentication. Options include:</p> <ul> <li>Auto (automatic)</li> <li>TKIP</li> <li>AES</li> </ul>"
    },
    {
      "location": "models/wireless/wirelesslan/#pre-shared-key",
      "title": "Pre-Shared Key",
      "text": "<p>The security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.</p>"
    },
    {
      "location": "models/wireless/wirelesslan/#scope",
      "title": "Scope",
      "text": "<p>This field was introduced in NetBox v4.2.</p> <p>The region, site, site group or location with which this wireless LAN is associated.</p>"
    },
    {
      "location": "models/wireless/wirelesslangroup/",
      "title": "Wireless LAN Groups",
      "text": "<p>Wireless LAN groups can be used to organize and classify wireless LANs. These groups are hierarchical: groups can be nested within parent groups. However, each wireless LAN may be assigned only to one group.</p>"
    },
    {
      "location": "models/wireless/wirelesslangroup/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/wireless/wirelesslangroup/#parent",
      "title": "Parent",
      "text": "<p>The parent wireless LAN group (if any).</p>"
    },
    {
      "location": "models/wireless/wirelesslangroup/#name",
      "title": "Name",
      "text": "<p>A unique human-friendly name.</p>"
    },
    {
      "location": "models/wireless/wirelesslangroup/#slug",
      "title": "Slug",
      "text": "<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"
    },
    {
      "location": "models/wireless/wirelesslink/",
      "title": "Wireless Links",
      "text": "<p>A wireless link represents a connection between exactly two wireless interfaces. Unlike a wireless LAN, which permit an arbitrary number of client associations, wireless links are used to model point-to-point wireless connections.</p>"
    },
    {
      "location": "models/wireless/wirelesslink/#fields",
      "title": "Fields",
      "text": ""
    },
    {
      "location": "models/wireless/wirelesslink/#interfaces",
      "title": "Interfaces",
      "text": "<p>Select two interfaces: One for side A and one for side B. (Both must be wireless interfaces.)</p>"
    },
    {
      "location": "models/wireless/wirelesslink/#status",
      "title": "Status",
      "text": "<p>The operational status of the link. Options include:</p> <ul> <li>Connected</li> <li>Planned</li> <li>Decommissioning</li> </ul>"
    },
    {
      "location": "models/wireless/wirelesslink/#ssid",
      "title": "SSID",
      "text": "<p>The service set identifier (SSID) for the wireless link (optional).</p>"
    },
    {
      "location": "models/wireless/wirelesslink/#distance",
      "title": "Distance",
      "text": "<p>The distance between the link's two endpoints, including a unit designation (e.g. 100 meters or 25 feet).</p>"
    },
    {
      "location": "models/wireless/wirelesslink/#authentication-type",
      "title": "Authentication Type",
      "text": "<p>The type of wireless authentication in use. Options include:</p> <ul> <li>Open</li> <li>WEP</li> <li>WPA Personal (PSK)</li> <li>WPA Enterprise</li> </ul>"
    },
    {
      "location": "models/wireless/wirelesslink/#authentication-cipher",
      "title": "Authentication Cipher",
      "text": "<p>The security cipher used to apply wireless authentication. Options include:</p> <ul> <li>Auto (automatic)</li> <li>TKIP</li> <li>AES</li> </ul>"
    },
    {
      "location": "models/wireless/wirelesslink/#pre-shared-key",
      "title": "Pre-Shared Key",
      "text": "<p>The security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.</p>"
    },
    {
      "location": "plugins/",
      "title": "Plugins",
      "text": "<p>Plugins are packaged Django apps that can be installed alongside NetBox to provide custom functionality not present in the core application. Plugins can introduce their own models and views, but cannot interfere with existing components. A NetBox user may opt to install plugins provided by the community or build his or her own.</p> <p>Please see the documented instructions for installing a plugin to get started.</p>"
    },
    {
      "location": "plugins/#capabilities",
      "title": "Capabilities",
      "text": "<p>The NetBox plugin architecture allows for the following:</p> <ul> <li>Add new data models. A plugin can introduce one or more models to hold data. (A model is essentially a table in the SQL database.)</li> <li>Add new URLs and views. Plugins can register URLs under the <code>/plugins</code> root path to provide browsable views for users.</li> <li>Add content to existing model templates. A template content class can be used to inject custom HTML content within the view of a core NetBox model. This content can appear in the left side, right side, or bottom of the page.</li> <li>Add navigation menu items. Each plugin can register new links in the navigation menu. Each link may have a set of buttons for specific actions, similar to the built-in navigation items.</li> <li>Add custom middleware. Custom Django middleware can be registered by each plugin.</li> <li>Declare configuration parameters. Each plugin can define required, optional, and default configuration parameters within its unique namespace. Plug configuration parameter are defined by the user under <code>PLUGINS_CONFIG</code> in <code>configuration.py</code>.</li> <li>Limit installation by NetBox version. A plugin can specify a minimum and/or maximum NetBox version with which it is compatible.</li> </ul>"
    },
    {
      "location": "plugins/#limitations",
      "title": "Limitations",
      "text": "<p>Either by policy or by technical limitation, the interaction of plugins with NetBox core is restricted in certain ways. A plugin may not:</p> <ul> <li>Modify core models. Plugins may not alter, remove, or override core NetBox models in any way. This rule is in place to ensure the integrity of the core data model.</li> <li>Register URLs outside the <code>/plugins</code> root. All plugin URLs are restricted to this path to prevent path collisions with core or other plugins.</li> <li>Override core templates. Plugins can inject additional content where supported, but may not manipulate or remove core content.</li> <li>Modify core settings. A configuration registry is provided for plugins, however they cannot alter or delete the core configuration.</li> <li>Disable core components. Plugins are not permitted to disable or hide core NetBox components.</li> </ul>"
    },
    {
      "location": "plugins/installation/",
      "title": "Installing a Plugin",
      "text": "<p>Warning</p> <p>The instructions below detail the general process for installing and configuring a NetBox plugin. However, each plugin is different and may require additional tasks or modifications to the steps below. Always consult the documentation for a specific plugin before attempting to install it.</p>"
    },
    {
      "location": "plugins/installation/#install-the-python-package",
      "title": "Install the Python Package",
      "text": "<p>Download and install the plugin's Python package per its installation instructions. Plugins published via PyPI are typically installed using the <code>pip</code> command line utility. Be sure to install the plugin within NetBox's virtual environment.</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n(venv) $ pip install &lt;package&gt;\n</code></pre> <p>Alternatively, you may wish to install the plugin manually by running <code>python setup.py install</code>. If you are developing a plugin and want to install it only temporarily, run <code>python setup.py develop</code> instead.</p>"
    },
    {
      "location": "plugins/installation/#enable-the-plugin",
      "title": "Enable the Plugin",
      "text": "<p>In <code>configuration.py</code>, add the plugin's name to the <code>PLUGINS</code> list:</p> <pre><code>PLUGINS = [\n    # ...\n    'plugin_name',\n]\n</code></pre>"
    },
    {
      "location": "plugins/installation/#configure-the-plugin",
      "title": "Configure the Plugin",
      "text": "<p>If the plugin requires any configuration, define it in <code>configuration.py</code> under the <code>PLUGINS_CONFIG</code> parameter. The available configuration parameters should be detailed in the plugin's <code>README</code> file or other documentation.</p> <pre><code>PLUGINS_CONFIG = {\n    'plugin_name': {\n        'foo': 'bar',\n        'buzz': 'bazz'\n    }\n}\n</code></pre>"
    },
    {
      "location": "plugins/installation/#run-database-migrations",
      "title": "Run Database Migrations",
      "text": "<p>If the plugin introduces new database models, run the provided schema migrations:</p> <pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py migrate\n</code></pre> <p>Tip</p> <p>It's okay to run the <code>migrate</code> management command even if the plugin does not include any migration files.</p>"
    },
    {
      "location": "plugins/installation/#collect-static-files",
      "title": "Collect Static Files",
      "text": "<p>Plugins may package static resources like images or scripts to be served directly by the HTTP front end. Ensure that these are copied to the static root directory with the <code>collectstatic</code> management command:</p> <pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py collectstatic\n</code></pre>"
    },
    {
      "location": "plugins/installation/#restart-wsgi-service",
      "title": "Restart WSGI Service",
      "text": "<p>Finally, restart the WSGI service and RQ workers to load the new plugin:</p> <pre><code># sudo systemctl restart netbox netbox-rq\n</code></pre>"
    },
    {
      "location": "plugins/removal/",
      "title": "Removing a Plugin",
      "text": "<p>Warning</p> <p>The instructions below detail the general process for removing a NetBox plugin. However, each plugin is different and may require additional tasks or modifications to the steps below. Always consult the documentation for a specific plugin before attempting to remove it.</p>"
    },
    {
      "location": "plugins/removal/#disable-the-plugin",
      "title": "Disable the Plugin",
      "text": "<p>Disable the plugin by removing it from the <code>PLUGINS</code> list in <code>configuration.py</code>.</p>"
    },
    {
      "location": "plugins/removal/#remove-its-configuration",
      "title": "Remove its Configuration",
      "text": "<p>Delete the plugin's entry (if any) in the <code>PLUGINS_CONFIG</code> dictionary in <code>configuration.py</code>.</p> <p>Tip</p> <p>If there's a chance you may reinstall the plugin, consider commenting out any configuration parameters instead of deleting them.</p>"
    },
    {
      "location": "plugins/removal/#re-index-search-entries",
      "title": "Re-index Search Entries",
      "text": "<p>Run the <code>reindex</code> management command to reindex the global search engine. This will remove any stale entries pertaining to objects provided by the plugin.</p> <pre><code>$ cd /opt/netbox/netbox/\n$ source /opt/netbox/venv/bin/activate\n(venv) $ python3 manage.py reindex\n</code></pre>"
    },
    {
      "location": "plugins/removal/#uninstall-its-python-package",
      "title": "Uninstall its Python Package",
      "text": "<p>Use <code>pip</code> to remove the installed plugin:</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n(venv) $ pip uninstall &lt;package&gt;\n</code></pre>"
    },
    {
      "location": "plugins/removal/#restart-wsgi-service",
      "title": "Restart WSGI Service",
      "text": "<p>Restart the WSGI service:</p> <pre><code># sudo systemctl restart netbox\n</code></pre>"
    },
    {
      "location": "plugins/removal/#drop-database-tables",
      "title": "Drop Database Tables",
      "text": "<p>Note</p> <p>This step is necessary only for plugins which have created one or more database tables (generally through the introduction of new models). Check your plugin's documentation if unsure.</p> <p>Enter the PostgreSQL database shell (<code>manage.py dbshell</code>) to determine if the plugin has created any SQL tables. Substitute <code>pluginname</code> in the example below for the name of the plugin being removed. (You can also run the <code>\\dt</code> command without a pattern to list all tables.)</p> <pre><code>netbox=&gt; \\dt pluginname_*\n                   List of relations\n                   List of relations\n Schema |       Name     | Type  | Owner\n--------+----------------+-------+--------\n public | pluginname_foo | table | netbox\n public | pluginname_bar | table | netbox\n(2 rows)\n</code></pre> <p>Warning</p> <p>Exercise extreme caution when removing tables. Users are strongly encouraged to perform a backup of their database immediately before taking these actions.</p> <p>Drop each of the listed tables to remove it from the database:</p> <pre><code>netbox=&gt; DROP TABLE pluginname_foo;\nDROP TABLE\nnetbox=&gt; DROP TABLE pluginname_bar;\nDROP TABLE\n</code></pre>"
    },
    {
      "location": "plugins/removal/#remove-the-django-migration-records",
      "title": "Remove the Django Migration Records",
      "text": "<p>After removing the tables created by a plugin, the migrations that created the tables need to be removed from Django's migration history as well. This is necessary to make it possible to reinstall the plugin at a later time. If the migration history were left in place, Django would skip all migrations that were executed in the course of a previous installation, which would cause the plugin to fail after reinstallation.</p> <pre><code>netbox=&gt; SELECT * FROM django_migrations WHERE app='pluginname';\n id  |    app     |          name          |            applied\n-----+------------+------------------------+-------------------------------\n 492 | pluginname | 0001_initial           | 2023-12-21 11:59:59.325995+00\n 493 | pluginname | 0002_add_foo           | 2023-12-21 11:59:59.330026+00\nnetbox=&gt; DELETE FROM django_migrations WHERE app='pluginname';\n</code></pre> <p>Warning</p> <p>Exercise extreme caution when altering Django system tables. Users are strongly encouraged to perform a backup of their database immediately before taking these actions.</p>"
    },
    {
      "location": "plugins/development/",
      "title": "Plugins Development",
      "text": "<p>Plugins Development Tutorial</p> <p>Just getting started with plugins? Check out our NetBox Plugin Tutorial on GitHub! This in-depth guide will walk you through the process of creating an entire plugin from scratch. It even includes a companion demo plugin repo to ensure you can jump in at any step along the way. This will get you up and running with plugins in no time!</p> <p>Plugin Certification Program</p> <p>NetBox Labs offers a Plugin Certification Program for plugin developers interested in establishing a co-maintainer relationship. The program aims to assure ongoing compatibility, maintainability, and commercial supportability of key plugins.</p> <p>NetBox can be extended to support additional data models and functionality through the use of plugins. A plugin is essentially a self-contained Django app which gets installed alongside NetBox to provide custom functionality. Multiple plugins can be installed in a single NetBox instance, and each plugin can be enabled and configured independently.</p> <p>Django Development</p> <p>Django is the Python framework on which NetBox is built. As Django itself is very well-documented, this documentation covers only the aspects of plugin development which are unique to NetBox.</p> <p>Plugins can do a lot, including:</p> <ul> <li>Create Django models to store data in the database</li> <li>Provide their own \"pages\" (views) in the web user interface</li> <li>Inject template content and navigation links</li> <li>Extend NetBox's REST and GraphQL APIs</li> <li>Load additional Django apps</li> <li>Add custom request/response middleware</li> </ul> <p>However, keep in mind that each piece of functionality is entirely optional. For example, if your plugin merely adds a piece of middleware or an API endpoint for existing data, there's no need to define any new models.</p> <p>Warning</p> <p>While very powerful, the NetBox plugins API is necessarily limited in its scope. The plugins API is discussed here in its entirety: Any part of the NetBox code base not documented here is not part of the supported plugins API, and should not be employed by a plugin. Internal elements of NetBox are subject to change at any time and without warning. Plugin authors are strongly encouraged to develop plugins using only the officially supported components discussed here and those provided by the underlying Django framework to avoid breaking changes in future releases.</p>"
    },
    {
      "location": "plugins/development/#plugin-structure",
      "title": "Plugin Structure",
      "text": "<p>Although the specific structure of a plugin is largely left to the discretion of its authors, a typical NetBox plugin might look something like this:</p> <pre><code>project-name/\n  - plugin_name/\n    - api/\n      - __init__.py\n      - serializers.py\n      - urls.py\n      - views.py\n    - migrations/\n      - __init__.py\n      - 0001_initial.py\n      - ...\n    - templates/\n      - plugin_name/\n        - *.html\n    - __init__.py\n    - filtersets.py\n    - graphql.py\n    - jobs.py\n    - models.py\n    - middleware.py\n    - navigation.py\n    - signals.py\n    - tables.py\n    - template_content.py\n    - urls.py\n    - views.py\n  - pyproject.toml\n  - README.md\n</code></pre> <p>The top level is the project root, which can have any name that you like. Immediately within the root should exist several items:</p> <ul> <li><code>pyproject.toml</code> - is a standard configuration file used to install the plugin package within the Python environment.</li> <li><code>README.md</code> - A brief introduction to your plugin, how to install and configure it, where to find help, and any other pertinent information. It is recommended to write <code>README</code> files using a markup language such as Markdown to enable human-friendly display.</li> <li>The plugin source directory. This must be a valid Python package name, typically comprising only lowercase letters, numbers, and underscores.</li> </ul> <p>The plugin source directory contains all the actual Python code and other resources used by your plugin. Its structure is left to the author's discretion, however it is recommended to follow best practices as outlined in the Django documentation. At a minimum, this directory must contain an <code>__init__.py</code> file containing an instance of NetBox's <code>PluginConfig</code> class, discussed below.</p> <p>Note: The Cookiecutter NetBox Plugin can be used to auto-generate all the needed directories and files for a new plugin.</p>"
    },
    {
      "location": "plugins/development/#pluginconfig",
      "title": "PluginConfig",
      "text": "<p>The <code>PluginConfig</code> class is a NetBox-specific wrapper around Django's built-in <code>AppConfig</code> class. It is used to declare NetBox plugin functionality within a Python package. Each plugin should provide its own subclass, defining its name, metadata, and default and required configuration parameters. An example is below:</p> <pre><code>from netbox.plugins import PluginConfig\n\nclass FooBarConfig(PluginConfig):\n    name = 'foo_bar'\n    verbose_name = 'Foo Bar'\n    description = 'An example NetBox plugin'\n    version = '0.1'\n    author = 'Jeremy Stretch'\n    author_email = 'author@example.com'\n    base_url = 'foo-bar'\n    required_settings = []\n    default_settings = {\n        'baz': True\n    }\n    django_apps = [\"foo\", \"bar\", \"baz\"]\n\nconfig = FooBarConfig\n</code></pre> <p>NetBox looks for the <code>config</code> variable within a plugin's <code>__init__.py</code> to load its configuration. Typically, this will be set to the PluginConfig subclass, but you may wish to dynamically generate a PluginConfig class based on environment variables or other factors.</p>"
    },
    {
      "location": "plugins/development/#pluginconfig-attributes",
      "title": "PluginConfig Attributes",
      "text": "Name Description <code>name</code> Raw plugin name; same as the plugin's source directory <code>verbose_name</code> Human-friendly name for the plugin <code>version</code> Current release (semantic versioning is encouraged) <code>description</code> Brief description of the plugin's purpose <code>author</code> Name of plugin's author <code>author_email</code> Author's public email address <code>base_url</code> Base path to use for plugin URLs (optional). If not specified, the project's <code>name</code> will be used. <code>required_settings</code> A list of any configuration parameters that must be defined by the user <code>default_settings</code> A dictionary of configuration parameters and their default values <code>django_apps</code> A list of additional Django apps to load alongside the plugin <code>min_version</code> Minimum version of NetBox with which the plugin is compatible <code>max_version</code> Maximum version of NetBox with which the plugin is compatible <code>middleware</code> A list of middleware classes to append after NetBox's build-in middleware <code>queues</code> A list of custom background task queues to create <code>events_pipeline</code> A list of handlers to add to <code>EVENTS_PIPELINE</code>, identified by dotted paths <code>search_extensions</code> The dotted path to the list of search index classes (default: <code>search.indexes</code>) <code>data_backends</code> The dotted path to the list of data source backend classes (default: <code>data_backends.backends</code>) <code>template_extensions</code> The dotted path to the list of template extension classes (default: <code>template_content.template_extensions</code>) <code>menu_items</code> The dotted path to the list of menu items provided by the plugin (default: <code>navigation.menu_items</code>) <code>graphql_schema</code> The dotted path to the plugin's GraphQL schema class, if any (default: <code>graphql.schema</code>) <code>user_preferences</code> The dotted path to the dictionary mapping of user preferences defined by the plugin (default: <code>preferences.preferences</code>) <p>All required settings must be configured by the user. If a configuration parameter is listed in both <code>required_settings</code> and <code>default_settings</code>, the default setting will be ignored.</p> <p>Accessing Config Parameters</p> <p>Plugin configuration parameters can be accessed using the <code>get_plugin_config()</code> function. For example:</p> <pre><code>from netbox.plugins import get_plugin_config\nget_plugin_config('my_plugin', 'verbose_name')\n</code></pre>"
    },
    {
      "location": "plugins/development/#important-notes-about-django_apps",
      "title": "Important Notes About <code>django_apps</code>",
      "text": "<p>Loading additional apps may cause more harm than good and could make identifying problems within NetBox itself more difficult. The <code>django_apps</code> attribute is intended only for advanced use cases that require a deeper Django integration.</p> <p>Apps from this list are inserted before the plugin's <code>PluginConfig</code> in the order defined. Adding the plugin's <code>PluginConfig</code> module to this list changes this behavior and allows for apps to be loaded after the plugin.</p> <p>Any additional apps must be installed within the same Python environment as NetBox or <code>ImproperlyConfigured</code> exceptions will be raised when loading the plugin.</p>"
    },
    {
      "location": "plugins/development/#create-pyprojecttoml",
      "title": "Create pyproject.toml",
      "text": "<p><code>pyproject.toml</code> is the configuration file used to package and install our plugin once it's finished. It is used by packaging tools, as well as other tools. The primary function of this file is to call the build system to create a Python distribution package. We can pass a number of keyword arguments to control the package creation as well as to provide metadata about the plugin. There are three possible TOML tables in this file:</p> <ul> <li><code>[build-system]</code> allows you to declare which build backend you use and which other dependencies (if any) are needed to build your project.</li> <li><code>[project]</code> is the format that most build backends use to specify your project\u2019s basic metadata, such as the author's name, project URL, etc.</li> <li><code>[tool]</code> has tool-specific subtables, e.g., <code>[tool.black]</code>, <code>[tool.mypy]</code>. Consult the particular tool\u2019s documentation for reference.</li> </ul> <p>An example <code>pyproject.toml</code> is below:</p> <pre><code># See PEP 518 for the spec of this file\n# https://www.python.org/dev/peps/pep-0518/\n\n[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname =  \"my-example-plugin\"\nversion = \"0.1.0\"\nauthors = [\n    {name = \"John Doe\", email = \"test@netboxlabs.com\"},\n]\ndescription = \"An example NetBox plugin.\"\nreadme = \"README.md\"\n\nclassifiers=[\n    'Development Status :: 3 - Alpha',\n    'Intended Audience :: Developers',\n    'Natural Language :: English',\n    \"Programming Language :: Python :: 3 :: Only\",\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3.11',\n    'Programming Language :: Python :: 3.12',\n]\n\nrequires-python = \"&gt;=3.10.0\"\n</code></pre> <p>Many of these are self-explanatory, but for more information, see the pyproject.toml documentation.</p>"
    },
    {
      "location": "plugins/development/#create-a-virtual-environment",
      "title": "Create a Virtual Environment",
      "text": "<p>It is strongly recommended to create a Python virtual environment for the development of your plugin, as opposed to using system-wide packages. This will afford you complete control over the installed versions of all dependencies and avoid conflict with system packages. This environment can live wherever you'd like, however it should be excluded from revision control. (A popular convention is to keep all virtual environments in the user's home directory, e.g. <code>~/.virtualenvs/</code>.)</p> <pre><code>python3 -m venv ~/.virtualenvs/my_plugin\n</code></pre> <p>You can make NetBox available within this environment by creating a path file pointing to its location. This will add NetBox to the Python path upon activation. (Be sure to adjust the command below to specify your actual virtual environment path, Python version, and NetBox installation.)</p> <pre><code>echo /opt/netbox/netbox &gt; $VENV/lib/python3.10/site-packages/netbox.pth\n</code></pre>"
    },
    {
      "location": "plugins/development/#development-installation",
      "title": "Development Installation",
      "text": "<p>To ease development, it is recommended to go ahead and install the plugin at this point using setuptools' <code>develop</code> mode. This will create symbolic links within your Python environment to the plugin development directory. Call <code>pip</code> from the plugin's root directory with the <code>-e</code> flag:</p> <pre><code>$ pip install -e .\n</code></pre> <p>More information on editable builds can be found at Editable installs for pyproject.toml .</p>"
    },
    {
      "location": "plugins/development/#configure-netbox",
      "title": "Configure NetBox",
      "text": "<p>To enable the plugin in NetBox, add it to the <code>PLUGINS</code> parameter in <code>configuration.py</code>:</p> <pre><code>PLUGINS = [\n    'my_plugin',\n]\n</code></pre>"
    },
    {
      "location": "plugins/development/background-jobs/",
      "title": "Background Jobs",
      "text": "<p>NetBox plugins can defer certain operations by enqueuing background jobs, which are executed asynchronously by background workers. This is helpful for decoupling long-running processes from the user-facing request-response cycle.</p> <p>For example, your plugin might need to fetch data from a remote system. Depending on the amount of data and the responsiveness of the remote server, this could take a few minutes. Deferring this task to a queued job ensures that it can be completed in the background, without interrupting the user. The data it fetches can be made available once the job has completed.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#job-runners",
      "title": "Job Runners",
      "text": "<p>A background job implements a basic Job executor for all kinds of tasks. It has logic implemented to handle the management of the associated job object, rescheduling of periodic jobs in the given interval and error handling. Adding custom jobs is done by subclassing NetBox's <code>JobRunner</code> class.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#netbox.jobs.JobRunner",
      "title": "<code>JobRunner</code>",
      "text": "<p>               Bases: <code>ABC</code></p> <p>Background Job helper class.</p> <p>This class handles the execution of a background job. It is responsible for maintaining its state, reporting errors, and scheduling recurring jobs.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#netbox.jobs.JobRunner.__init__",
      "title": "<code>__init__(job)</code>",
      "text": "<p>Parameters:</p> Name Type Description Default <code>job</code> <p>The specific <code>Job</code> this <code>JobRunner</code> is executing.</p> required"
    },
    {
      "location": "plugins/development/background-jobs/#netbox.jobs.JobRunner.run",
      "title": "<code>run(*args, **kwargs)</code>  <code>abstractmethod</code>",
      "text": "<p>Run the job.</p> <p>A <code>JobRunner</code> class needs to implement this method to execute all commands of the job.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#netbox.jobs.JobRunner.handle",
      "title": "<code>handle(job, *args, **kwargs)</code>  <code>classmethod</code>",
      "text": "<p>Handle the execution of a <code>Job</code>.</p> <p>This method is called by the Job Scheduler to handle the execution of all job commands. It will maintain the job's metadata and handle errors. For periodic jobs, a new job is automatically scheduled using its <code>interval</code>.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#netbox.jobs.JobRunner.get_jobs",
      "title": "<code>get_jobs(instance=None)</code>  <code>classmethod</code>",
      "text": "<p>Get all jobs of this <code>JobRunner</code> related to a specific instance.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#netbox.jobs.JobRunner.enqueue",
      "title": "<code>enqueue(*args, **kwargs)</code>  <code>classmethod</code>",
      "text": "<p>Enqueue a new <code>Job</code>.</p> <p>This method is a wrapper of <code>Job.enqueue()</code> using <code>handle()</code> as function callback. See its documentation for parameters.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#netbox.jobs.JobRunner.enqueue_once",
      "title": "<code>enqueue_once(instance=None, schedule_at=None, interval=None, *args, **kwargs)</code>  <code>classmethod</code>",
      "text": "<p>Enqueue a new <code>Job</code> once, i.e. skip duplicate jobs.</p> <p>Like <code>enqueue()</code>, this method adds a new <code>Job</code> to the job queue. However, if there's already a job of this class scheduled for <code>instance</code>, the existing job will be updated if necessary. This ensures that a particular schedule is only set up once at any given time, i.e. multiple calls to this method are idempotent.</p> <p>Note that this does not forbid running additional jobs with the <code>enqueue()</code> method, e.g. to schedule an immediate synchronization job in addition to a periodic synchronization schedule.</p> <p>For additional parameters see <code>enqueue()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <p>The NetBox object to which this job pertains (optional)</p> <code>None</code> <code>schedule_at</code> <p>Schedule the job to be executed at the passed date and time</p> <code>None</code> <code>interval</code> <p>Recurrence interval (in minutes)</p> <code>None</code>"
    },
    {
      "location": "plugins/development/background-jobs/#example",
      "title": "Example",
      "text": "jobs.py<pre><code>from netbox.jobs import JobRunner\n\n\nclass MyTestJob(JobRunner):\n    class Meta:\n        name = \"My Test Job\"\n\n    def run(self, *args, **kwargs):\n        obj = self.job.object\n        # your logic goes here\n</code></pre> <p>You can schedule the background job from within your code (e.g. from a model's <code>save()</code> method or a view) by calling <code>MyTestJob.enqueue()</code>. This method passes through all arguments to <code>Job.enqueue()</code>. However, no <code>name</code> argument must be passed, as the background job name will be used instead.</p> <p>Tip</p> <p>A set of predefined intervals is available at <code>core.choices.JobIntervalChoices</code> for convenience.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#attributes",
      "title": "Attributes",
      "text": "<p><code>JobRunner</code> attributes are defined under a class named <code>Meta</code> within the job. These are optional, but encouraged.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#name",
      "title": "<code>name</code>",
      "text": "<p>This is the human-friendly names of your background job. If omitted, the class name will be used.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#scheduled-jobs",
      "title": "Scheduled Jobs",
      "text": "<p>As described above, jobs can be scheduled for immediate execution or at any later time using the <code>enqueue()</code> method. However, for management purposes, the <code>enqueue_once()</code> method allows a job to be scheduled exactly once avoiding duplicates. If a job is already scheduled for a particular instance, a second one won't be scheduled, respecting thread safety. An example use case would be to schedule a periodic task that is bound to an instance in general, but not to any event of that instance (such as updates). The parameters of the <code>enqueue_once()</code> method are identical to those of <code>enqueue()</code>.</p> <p>Tip</p> <p>It is not forbidden to <code>enqueue()</code> additional jobs while an interval schedule is active. An example use of this would be to schedule a periodic daily synchronization, but also trigger additional synchronizations on demand when the user presses a button.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#example_1",
      "title": "Example",
      "text": "models.py<pre><code>from django.db import models\nfrom core.choices import JobIntervalChoices\nfrom netbox.models import NetBoxModel\nfrom .jobs import MyTestJob\n\nclass MyModel(NetBoxModel):\n    foo = models.CharField()\n\n    def save(self, *args, **kwargs):\n        MyTestJob.enqueue_once(instance=self, interval=JobIntervalChoices.INTERVAL_HOURLY)\n        return super().save(*args, **kwargs)\n\n    def sync(self):\n        MyTestJob.enqueue(instance=self)\n</code></pre>"
    },
    {
      "location": "plugins/development/background-jobs/#system-jobs",
      "title": "System Jobs",
      "text": "<p>This feature was introduced in NetBox v4.2.</p> <p>Some plugins may implement background jobs that are decoupled from the request/response cycle. Typical use cases would be housekeeping tasks or synchronization jobs. These can be registered as system jobs using the <code>system_job()</code> decorator. The job interval must be passed as an integer (in minutes) when registering a system job. System jobs are scheduled automatically when the RQ worker (<code>manage.py rqworker</code>) is run.</p>"
    },
    {
      "location": "plugins/development/background-jobs/#example_2",
      "title": "Example",
      "text": "jobs.py<pre><code>from core.choices import JobIntervalChoices\nfrom netbox.jobs import JobRunner, system_job\nfrom .models import MyModel\n\n# Specify a predefined choice or an integer indicating\n# the number of minutes between job executions\n@system_job(interval=JobIntervalChoices.INTERVAL_HOURLY)\nclass MyHousekeepingJob(JobRunner):\n    class Meta:\n        name = \"My Housekeeping Job\"\n\n    def run(self, *args, **kwargs):\n        MyModel.objects.filter(foo='bar').delete()\n</code></pre> <p>Note</p> <p>Ensure that any system jobs are imported on initialization. Otherwise, they won't be registered. This can be achieved by extending the PluginConfig's <code>ready()</code> method. For example:</p> <pre><code>def ready(self):\n    super().ready()\n\n    from .jobs import MyHousekeepingJob\n</code></pre>"
    },
    {
      "location": "plugins/development/background-jobs/#task-queues",
      "title": "Task queues",
      "text": "<p>Three task queues of differing priority are defined by default:</p> <ul> <li>High</li> <li>Default</li> <li>Low</li> </ul> <p>Any tasks in the \"high\" queue are completed before the default queue is checked, and any tasks in the default queue are completed before those in the \"low\" queue.</p> <p>Plugins can also add custom queues for their own needs by setting the <code>queues</code> attribute under the PluginConfig class. An example is included below:</p> <pre><code>class MyPluginConfig(PluginConfig):\n    name = 'myplugin'\n    ...\n    queues = [\n        'foo',\n        'bar',\n    ]\n</code></pre> <p>The <code>PluginConfig</code> above creates two custom queues with the following names <code>my_plugin.foo</code> and <code>my_plugin.bar</code>. (The plugin's name is prepended to each queue to avoid conflicts between plugins.)</p> <p>Configuring the RQ worker process</p> <p>By default, NetBox's RQ worker process only services the high, default, and low queues. Plugins which introduce custom queues should advise users to either reconfigure the default worker, or run a dedicated worker specifying the necessary queues. For example:</p> <pre><code>python manage.py rqworker my_plugin.foo my_plugin.bar\n</code></pre>"
    },
    {
      "location": "plugins/development/dashboard-widgets/",
      "title": "Dashboard Widgets",
      "text": "<p>Each NetBox user can customize his or her personal dashboard by adding and removing widgets and by manipulating the size and position of each. Plugins can register their own dashboard widgets to complement those already available natively.</p>"
    },
    {
      "location": "plugins/development/dashboard-widgets/#the-dashboardwidget-class",
      "title": "The DashboardWidget Class",
      "text": "<p>All dashboard widgets must inherit from NetBox's <code>DashboardWidget</code> base class. Subclasses must provide a <code>render()</code> method, and may override the base class' default characteristics.</p> <p>Widgets which require configuration by a user must also include a <code>ConfigForm</code> child class which inherits from <code>WidgetConfigForm</code>. This form is used to render the user configuration options for the widget.</p>"
    },
    {
      "location": "plugins/development/dashboard-widgets/#extras.dashboard.widgets.DashboardWidget",
      "title": "<code>DashboardWidget</code>",
      "text": "<p>Base class for custom dashboard widgets.</p> <p>Attributes:</p> Name Type Description <code>description</code> <p>A brief, user-friendly description of the widget's function</p> <code>default_title</code> <p>The string to show for the widget's title when none has been specified.</p> <code>default_config</code> <p>Default configuration parameters, as a dictionary mapping</p> <code>width</code> <p>The widget's default width (1 to 12)</p> <code>height</code> <p>The widget's default height; the number of rows it consumes</p>"
    },
    {
      "location": "plugins/development/dashboard-widgets/#extras.dashboard.widgets.DashboardWidget.ConfigForm",
      "title": "<code>ConfigForm</code>",
      "text": "<p>               Bases: <code>WidgetConfigForm</code></p> <p>The widget's configuration form.</p>"
    },
    {
      "location": "plugins/development/dashboard-widgets/#extras.dashboard.widgets.DashboardWidget.render",
      "title": "<code>render(request)</code>",
      "text": "<p>This method is called to render the widget's content.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The current request</p> required"
    },
    {
      "location": "plugins/development/dashboard-widgets/#widget-registration",
      "title": "Widget Registration",
      "text": "<p>To register a dashboard widget for use in NetBox, import the <code>register_widget()</code> decorator and use it to wrap each <code>DashboardWidget</code> subclass:</p> <pre><code>from extras.dashboard.widgets import DashboardWidget, register_widget\n\n@register_widget\nclass MyWidget1(DashboardWidget):\n    ...\n\n@register_widget\nclass MyWidget2(DashboardWidget):\n    ...\n</code></pre>"
    },
    {
      "location": "plugins/development/dashboard-widgets/#example",
      "title": "Example",
      "text": "<pre><code>from django import forms\nfrom extras.dashboard.utils import register_widget\nfrom extras.dashboard.widgets import DashboardWidget, WidgetConfigForm\n\n\n@register_widget\nclass ReminderWidget(DashboardWidget):\n    default_title = 'Reminder'\n    description = 'Add a virtual sticky note'\n\n    class ConfigForm(WidgetConfigForm):\n        content = forms.CharField(\n            widget=forms.Textarea()\n        )\n\n    def render(self, request):\n        return self.config.get('content')\n</code></pre>"
    },
    {
      "location": "plugins/development/dashboard-widgets/#initialization",
      "title": "Initialization",
      "text": "<p>To register the widget, it becomes essential to import the widget module. The recommended approach is to accomplish this within the <code>ready</code> method situated in your <code>PluginConfig</code>:</p> <pre><code>class FooBarConfig(PluginConfig):\n    def ready(self):\n        super().ready()\n        from . import widgets  # point this to the above widget module you created\n</code></pre>"
    },
    {
      "location": "plugins/development/data-backends/",
      "title": "Data Backends",
      "text": "<p>Data sources can be defined to reference data which exists on systems of record outside NetBox, such as a git repository or Amazon S3 bucket. Plugins can register their own backend classes to introduce support for additional resource types. This is done by subclassing NetBox's <code>DataBackend</code> class.</p> data_backends.py<pre><code>from netbox.data_backends import DataBackend\n\nclass MyDataBackend(DataBackend):\n    name = 'mybackend'\n    label = 'My Backend'\n    ...\n</code></pre> <p>To register one or more data backends with NetBox, define a list named <code>backends</code> at the end of this file:</p> data_backends.py<pre><code>backends = [MyDataBackend]\n</code></pre> <p>Tip</p> <p>The path to the list of data backends can be modified by setting <code>data_backends</code> in the PluginConfig instance.</p>"
    },
    {
      "location": "plugins/development/data-backends/#netbox.data_backends.DataBackend",
      "title": "<code>DataBackend</code>",
      "text": "<p>A data backend represents a specific system of record for data, such as a git repository or Amazon S3 bucket.</p> <p>Attributes:</p> Name Type Description <code>name</code> <p>The identifier under which this backend will be registered in NetBox</p> <code>label</code> <p>The human-friendly name for this backend</p> <code>is_local</code> <p>A boolean indicating whether this backend accesses local data</p> <code>parameters</code> <p>A dictionary mapping configuration form field names to their classes</p> <code>sensitive_parameters</code> <p>An iterable of field names for which the values should not be displayed to the user</p>"
    },
    {
      "location": "plugins/development/data-backends/#netbox.data_backends.DataBackend.init_config",
      "title": "<code>init_config()</code>",
      "text": "<p>A hook to initialize the instance's configuration. The data returned by this method is assigned to the instance's <code>config</code> attribute upon initialization, which can be referenced by the <code>fetch()</code> method.</p>"
    },
    {
      "location": "plugins/development/data-backends/#netbox.data_backends.DataBackend.fetch",
      "title": "<code>fetch()</code>",
      "text": "<p>A context manager which performs the following:</p> <ol> <li>Handles all setup and synchronization</li> <li>Yields the local path at which data has been replicated</li> <li>Performs any necessary cleanup</li> </ol>"
    },
    {
      "location": "plugins/development/event-types/",
      "title": "Event Types",
      "text": "<p>Plugins can register their own custom event types for use with NetBox event rules. This is accomplished by calling the <code>register()</code> method on an instance of the <code>EventType</code> class. This can be done anywhere within the plugin. An example is provided below.</p> <pre><code>from django.utils.translation import gettext_lazy as _\nfrom netbox.events import EventType, EVENT_TYPE_KIND_SUCCESS\n\nEventType(\n    name='ticket_opened',\n    text=_('Ticket opened'),\n    kind=EVENT_TYPE_KIND_SUCCESS\n).register()\n</code></pre>"
    },
    {
      "location": "plugins/development/event-types/#netbox.events.EventType",
      "title": "<code>EventType</code>  <code>dataclass</code>",
      "text": "<p>A type of event which can occur in NetBox. Event rules can be defined to automatically perform some action in response to an event.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The unique name under which the event is registered.</p> required <code>text</code> <code>str</code> <p>The human-friendly event name. This should support translation.</p> required <code>kind</code> <code>str</code> <p>The event's classification (info, success, warning, or danger). The default type is info.</p> <code>EVENT_TYPE_KIND_INFO</code> <code>destructive</code> <code>bool</code> <p>Indicates that the associated object was destroyed as a result of the event (default: False).</p> <code>False</code>"
    },
    {
      "location": "plugins/development/exceptions/",
      "title": "Exceptions",
      "text": "<p>The exception classes listed here may be raised by a plugin to alter NetBox's default behavior in various scenarios.</p>"
    },
    {
      "location": "plugins/development/exceptions/#abortrequest",
      "title": "<code>AbortRequest</code>",
      "text": "<p>NetBox provides several generic views and REST API viewsets which facilitate the creation, modification, and deletion of objects, either individually or in bulk. Under certain conditions, it may be desirable for a plugin to interrupt these actions and cleanly abort the request, reporting an error message to the end user or API consumer.</p> <p>For example, a plugin may prohibit the creation of a site with a prohibited name by connecting a receiver to Django's <code>pre_save</code> signal for the Site model:</p> <pre><code>from django.db.models.signals import pre_save\nfrom django.dispatch import receiver\nfrom dcim.models import Site\nfrom utilities.exceptions import AbortRequest\n\nPROHIBITED_NAMES = ('foo', 'bar', 'baz')\n\n@receiver(pre_save, sender=Site)\ndef test_abort_request(instance, **kwargs):\n    if instance.name.lower() in PROHIBITED_NAMES:\n        raise AbortRequest(f\"Site name can't be {instance.name}!\")\n</code></pre> <p>An error message must be supplied when raising <code>AbortRequest</code>. This will be conveyed to the user and should clearly explain the reason for which the request was aborted, as well as any potential remedy.</p> <p>Consider custom validation rules</p> <p>This exception is intended to be used for handling complex evaluation logic and should be used sparingly. For simple object validation (such as the contrived example above), consider using custom validation rules instead.</p>"
    },
    {
      "location": "plugins/development/filtersets/",
      "title": "Filters &amp; Filter Sets",
      "text": "<p>Filter sets define the mechanisms available for filtering or searching through a set of objects in NetBox. For instance, sites can be filtered by their parent region or group, status, facility ID, and so on. The same filter set is used consistently for a model whether the request is made via the UI, REST API, or GraphQL API. NetBox employs the django-filters2 library to define filter sets.</p>"
    },
    {
      "location": "plugins/development/filtersets/#filterset-classes",
      "title": "FilterSet Classes",
      "text": "<p>To support additional functionality standard to NetBox models, such as tag assignment and custom field support, the <code>NetBoxModelFilterSet</code> class is available for use by plugins. This should be used as the base filter set class for plugin models which inherit from <code>NetBoxModel</code>. Within this class, individual filters can be declared as directed by the <code>django-filters</code> documentation. An example is provided below.</p> <pre><code># filtersets.py\nimport django_filters\nfrom netbox.filtersets import NetBoxModelFilterSet\nfrom .models import MyModel\n\nclass MyFilterSet(NetBoxModelFilterSet):\n    status = django_filters.MultipleChoiceFilter(\n        choices=(\n            ('foo', 'Foo'),\n            ('bar', 'Bar'),\n            ('baz', 'Baz'),\n        ),\n        null_value=None\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('some', 'other', 'fields')\n</code></pre>"
    },
    {
      "location": "plugins/development/filtersets/#declaring-filter-sets",
      "title": "Declaring Filter Sets",
      "text": "<p>To utilize a filter set in a subclass of one of NetBox's generic views (such as <code>ObjectListView</code> or <code>BulkEditView</code>), define the <code>filterset</code> attribute on the view class:</p> <pre><code># views.py\nfrom netbox.views.generic import ObjectListView\nfrom .filtersets import MyModelFilterSet\nfrom .models import MyModel\n\nclass MyModelListView(ObjectListView):\n    queryset = MyModel.objects.all()\n    filterset = MyModelFilterSet\n</code></pre> <p>To enable a filter set on a  REST API endpoint, set the <code>filterset_class</code> attribute on the API view:</p> <pre><code># api/views.py\nfrom myplugin import models, filtersets\nfrom . import serializers\n\nclass MyModelViewSet(...):\n    queryset = models.MyModel.objects.all()\n    serializer_class = serializers.MyModelSerializer\n    filterset_class = filtersets.MyModelFilterSet\n</code></pre>"
    },
    {
      "location": "plugins/development/filtersets/#filter-classes",
      "title": "Filter Classes",
      "text": ""
    },
    {
      "location": "plugins/development/filtersets/#tagfilter",
      "title": "TagFilter",
      "text": "<p>The <code>TagFilter</code> class is available for all models which support tag assignment (those which inherit from <code>NetBoxModel</code> or <code>TagsMixin</code>). This filter subclasses django-filter's <code>ModelMultipleChoiceFilter</code> to work with NetBox's <code>TaggedItem</code> class.</p> <pre><code>from django_filters import FilterSet\nfrom extras.filters import TagFilter\n\nclass MyModelFilterSet(FilterSet):\n    tag = TagFilter()\n</code></pre>"
    },
    { "location": "plugins/development/forms/", "title": "Forms", "text": "" },
    {
      "location": "plugins/development/forms/#form-classes",
      "title": "Form Classes",
      "text": "<p>NetBox provides several base form classes for use by plugins.</p> Form Class Purpose <code>NetBoxModelForm</code> Create/edit individual objects <code>NetBoxModelImportForm</code> Bulk import objects from CSV data <code>NetBoxModelBulkEditForm</code> Edit multiple objects simultaneously <code>NetBoxModelFilterSetForm</code> Filter objects within a list view"
    },
    {
      "location": "plugins/development/forms/#netboxmodelform",
      "title": "<code>NetBoxModelForm</code>",
      "text": "<p>This is the base form for creating and editing NetBox models. It extends Django's ModelForm to add support for tags and custom fields.</p> Attribute Description <code>fieldsets</code> A tuple of <code>FieldSet</code> instances which control how form fields are rendered (optional) <p>Example</p> <pre><code>from django.utils.translation import gettext_lazy as _\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelForm\nfrom utilities.forms.fields import CommentField, DynamicModelChoiceField\nfrom utilities.forms.rendering import FieldSet\nfrom .models import MyModel\n\nclass MyModelForm(NetBoxModelForm):\n    site = DynamicModelChoiceField(\n        queryset=Site.objects.all()\n    )\n    comments = CommentField()\n    fieldsets = (\n        FieldSet('name', 'status', 'site', 'tags', name=_('Model Stuff')),\n        FieldSet('tenant_group', 'tenant', name=_('Tenancy')),\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('name', 'status', 'site', 'comments', 'tags')\n</code></pre> <p>Comment fields</p> <p>If your form has a <code>comments</code> field, there's no need to list it; this will always appear last on the page.</p>"
    },
    {
      "location": "plugins/development/forms/#netboxmodelimportform",
      "title": "<code>NetBoxModelImportForm</code>",
      "text": "<p>This form facilitates the bulk import of new objects from CSV, JSON, or YAML data. As with model forms, you'll need to declare a <code>Meta</code> subclass specifying the associated <code>model</code> and <code>fields</code>. NetBox also provides several form fields suitable for import various types of CSV data, listed below.</p> <p>Example</p> <pre><code>from django.utils.translation import gettext_lazy as _\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelImportForm\nfrom utilities.forms import CSVModelChoiceField\nfrom .models import MyModel\n\n\nclass MyModelImportForm(NetBoxModelImportForm):\n    site = CSVModelChoiceField(\n        queryset=Site.objects.all(),\n        to_field_name='name',\n        help_text=_('Assigned site')\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('name', 'status', 'site', 'comments')\n</code></pre>"
    },
    {
      "location": "plugins/development/forms/#netboxmodelbulkeditform",
      "title": "<code>NetBoxModelBulkEditForm</code>",
      "text": "<p>This form facilitates editing multiple objects in bulk. Unlike a model form, this form does not have a child <code>Meta</code> class, and must explicitly define each field. All fields in a bulk edit form are generally declared with <code>required=False</code>.</p> Attribute Description <code>model</code> The model of object being edited <code>fieldsets</code> A tuple of <code>FieldSet</code> instances which control how form fields are rendered (optional) <code>nullable_fields</code> A tuple of fields which can be nullified (set to empty) using the bulk edit form (optional) <p>Example</p> <pre><code>from django import forms\nfrom django.utils.translation import gettext_lazy as _\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelBulkEditForm\nfrom utilities.forms import CommentField, DynamicModelChoiceField\nfrom utilities.forms.rendering import FieldSet\nfrom .models import MyModel, MyModelStatusChoices\n\n\nclass MyModelBulkEditForm(NetBoxModelBulkEditForm):\n    name = forms.CharField(\n        required=False\n    )\n    status = forms.ChoiceField(\n        choices=MyModelStatusChoices,\n        required=False\n    )\n    site = DynamicModelChoiceField(\n        queryset=Site.objects.all(),\n        required=False\n    )\n    comments = CommentField()\n\n    model = MyModel\n    fieldsets = (\n        FieldSet('name', 'status', 'site', name=_('Model Stuff')),\n    )\n    nullable_fields = ('site', 'comments')\n</code></pre>"
    },
    {
      "location": "plugins/development/forms/#netboxmodelfiltersetform",
      "title": "<code>NetBoxModelFilterSetForm</code>",
      "text": "<p>This form class is used to render a form expressly for filtering a list of objects. Its fields should correspond to filters defined on the model's filter set.</p> Attribute Description <code>model</code> The model of object being edited <code>fieldsets</code> A tuple of <code>FieldSet</code> instances which control how form fields are rendered (optional) <p>Example</p> <pre><code>from dcim.models import Site\nfrom netbox.forms import NetBoxModelFilterSetForm\nfrom utilities.forms import DynamicModelMultipleChoiceField, MultipleChoiceField\nfrom .models import MyModel, MyModelStatusChoices\n\nclass MyModelFilterForm(NetBoxModelFilterSetForm):\n    site_id = DynamicModelMultipleChoiceField(\n        queryset=Site.objects.all(),\n        required=False\n    )\n    status = MultipleChoiceField(\n        choices=MyModelStatusChoices,\n        required=False\n    )\n\n    model = MyModel\n</code></pre>"
    },
    {
      "location": "plugins/development/forms/#general-purpose-fields",
      "title": "General Purpose Fields",
      "text": "<p>In addition to the form fields provided by Django, NetBox provides several field classes for use within forms to handle specific types of data. These can be imported from <code>utilities.forms.fields</code> and are documented below.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.ColorField",
      "title": "<code>ColorField</code>",
      "text": "<p>               Bases: <code>CharField</code></p> <p>A field which represents a color value in hexadecimal <code>RRGGBB</code> format. Utilizes NetBox's <code>ColorSelect</code> widget to render choices.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.CommentField",
      "title": "<code>CommentField</code>",
      "text": "<p>               Bases: <code>CharField</code></p> <p>A textarea with support for Markdown rendering. Exists mostly just to add a standard <code>help_text</code>.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.JSONField",
      "title": "<code>JSONField</code>",
      "text": "<p>               Bases: <code>JSONField</code></p> <p>Custom wrapper around Django's built-in JSONField to avoid presenting \"null\" as the default text.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.MACAddressField",
      "title": "<code>MACAddressField</code>",
      "text": "<p>               Bases: <code>Field</code></p> <p>Validates a 48-bit MAC address.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.SlugField",
      "title": "<code>SlugField</code>",
      "text": "<p>               Bases: <code>SlugField</code></p> <p>Extend Django's built-in SlugField to automatically populate from a field called <code>name</code> unless otherwise specified.</p> <p>Parameters:</p> Name Type Description Default <code>slug_source</code> <p>Name of the form field from which the slug value will be derived</p> <code>'name'</code>"
    },
    {
      "location": "plugins/development/forms/#dynamic-object-fields",
      "title": "Dynamic Object Fields",
      "text": ""
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.DynamicModelChoiceField",
      "title": "<code>DynamicModelChoiceField</code>",
      "text": "<p>               Bases: <code>DynamicModelChoiceMixin</code>, <code>ModelChoiceField</code></p> <p>Dynamic selection field for a single object, backed by NetBox's REST API.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.DynamicModelMultipleChoiceField",
      "title": "<code>DynamicModelMultipleChoiceField</code>",
      "text": "<p>               Bases: <code>DynamicModelChoiceMixin</code>, <code>ModelMultipleChoiceField</code></p> <p>A multiple-choice version of <code>DynamicModelChoiceField</code>.</p>"
    },
    {
      "location": "plugins/development/forms/#content-type-fields",
      "title": "Content Type Fields",
      "text": ""
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.ContentTypeChoiceField",
      "title": "<code>ContentTypeChoiceField</code>",
      "text": "<p>               Bases: <code>ContentTypeChoiceMixin</code>, <code>ModelChoiceField</code></p> <p>Selection field for a single content type.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.ContentTypeMultipleChoiceField",
      "title": "<code>ContentTypeMultipleChoiceField</code>",
      "text": "<p>               Bases: <code>ContentTypeChoiceMixin</code>, <code>ModelMultipleChoiceField</code></p> <p>Selection field for one or more content types.</p>"
    },
    {
      "location": "plugins/development/forms/#csv-import-fields",
      "title": "CSV Import Fields",
      "text": ""
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.CSVChoiceField",
      "title": "<code>CSVChoiceField</code>",
      "text": "<p>               Bases: <code>CSVChoicesMixin</code>, <code>ChoiceField</code></p> <p>A CSV field which accepts a single selection value.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.CSVMultipleChoiceField",
      "title": "<code>CSVMultipleChoiceField</code>",
      "text": "<p>               Bases: <code>CSVChoicesMixin</code>, <code>MultipleChoiceField</code></p> <p>A CSV field which accepts multiple selection values.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.CSVModelChoiceField",
      "title": "<code>CSVModelChoiceField</code>",
      "text": "<p>               Bases: <code>ModelChoiceField</code></p> <p>Extends Django's <code>ModelChoiceField</code> to provide additional validation for CSV values.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.CSVContentTypeField",
      "title": "<code>CSVContentTypeField</code>",
      "text": "<p>               Bases: <code>CSVModelChoiceField</code></p> <p>CSV field for referencing a single content type, in the form <code>&lt;app&gt;.&lt;model&gt;</code>.</p>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.fields.CSVMultipleContentTypeField",
      "title": "<code>CSVMultipleContentTypeField</code>",
      "text": "<p>               Bases: <code>ModelMultipleChoiceField</code></p> <p>CSV field for referencing one or more content types, in the form <code>&lt;app&gt;.&lt;model&gt;</code>.</p>"
    },
    {
      "location": "plugins/development/forms/#form-rendering",
      "title": "Form Rendering",
      "text": ""
    },
    {
      "location": "plugins/development/forms/#utilities.forms.rendering.FieldSet",
      "title": "<code>FieldSet</code>",
      "text": "<p>A generic grouping of fields, with an optional name. Each item will be rendered on its own row under the provided heading (name), if any. The following types may be passed as items:</p> <ul> <li>Field name (string)</li> <li>InlineFields instance</li> <li>TabbedGroups instance</li> <li>ObjectAttribute instance</li> </ul> <p>Parameters:</p> Name Type Description Default <code>items</code> <p>An iterable of items to be rendered (one per row)</p> <code>()</code> <code>name</code> <p>The fieldset's name, displayed as a heading (optional)</p> <code>None</code>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.rendering.InlineFields",
      "title": "<code>InlineFields</code>",
      "text": "<p>A set of fields rendered inline (side-by-side) with a shared label.</p> <p>Parameters:</p> Name Type Description Default <code>fields</code> <p>An iterable of form field names</p> <code>()</code> <code>label</code> <p>The label text to render for the row (optional)</p> <code>None</code>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.rendering.TabbedGroups",
      "title": "<code>TabbedGroups</code>",
      "text": "<p>Two or more groups of fields (FieldSets) arranged under tabs among which the user can toggle.</p> <p>Parameters:</p> Name Type Description Default <code>fieldsets</code> <p>An iterable of FieldSet instances, one per tab. Each FieldSet must have a name assigned, which will be employed as the tab's label.</p> <code>()</code>"
    },
    {
      "location": "plugins/development/forms/#utilities.forms.rendering.ObjectAttribute",
      "title": "<code>ObjectAttribute</code>",
      "text": "<p>Renders the value for a specific attribute on the form's instance. This may be used to display a read-only value and convey additional context to the user. If the attribute has a <code>get_absolute_url()</code> method, it will be rendered as a hyperlink.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>The name of the attribute to be displayed</p> required"
    },
    {
      "location": "plugins/development/graphql-api/",
      "title": "GraphQL API",
      "text": ""
    },
    {
      "location": "plugins/development/graphql-api/#defining-the-schema-class",
      "title": "Defining the Schema Class",
      "text": "<p>A plugin can extend NetBox's GraphQL API by registering its own schema class. By default, NetBox will attempt to import <code>graphql.schema</code> from the plugin, if it exists. This path can be overridden by defining <code>graphql_schema</code> on the PluginConfig instance as the dotted path to the desired Python class.</p>"
    },
    {
      "location": "plugins/development/graphql-api/#example",
      "title": "Example",
      "text": "<pre><code># graphql.py\nimport strawberry\nimport strawberry_django\n\nfrom . import models\n\n\n@strawberry_django.type(\n    models.MyModel,\n    fields='__all__',\n)\nclass MyModelType:\n    pass\n\n\n@strawberry.type\nclass MyQuery:\n    @strawberry.field\n    def dummymodel(self, id: int) -&gt; DummyModelType:\n        return None\n    dummymodel_list: list[DummyModelType] = strawberry_django.field()\n\n\nschema = [\n    MyQuery,\n]\n</code></pre>"
    },
    {
      "location": "plugins/development/graphql-api/#graphql-objects",
      "title": "GraphQL Objects",
      "text": "<p>NetBox provides two object type classes for use by plugins.</p>"
    },
    {
      "location": "plugins/development/graphql-api/#netbox.graphql.types.BaseObjectType",
      "title": "<code>BaseObjectType</code>",
      "text": "<p>Base GraphQL object type for all NetBox objects. Restricts the model queryset to enforce object permissions.</p>"
    },
    {
      "location": "plugins/development/graphql-api/#netbox.graphql.types.NetBoxObjectType",
      "title": "<code>NetBoxObjectType</code>",
      "text": "<p>               Bases: <code>ChangelogMixin</code>, <code>CustomFieldsMixin</code>, <code>JournalEntriesMixin</code>, <code>TagsMixin</code>, <code>BaseObjectType</code></p> <p>GraphQL type for most NetBox models. Includes support for custom fields, change logging, journaling, and tags.</p>"
    },
    {
      "location": "plugins/development/migration-v4/",
      "title": "Migrating Your Plugin to NetBox v4.0",
      "text": "<p>This document serves as a handbook for maintainers of plugins that were written prior to the release of NetBox v4.0. It serves to capture all the changes recommended to ensure a plugin is compatible with NetBox v4.0 and later releases.</p>"
    },
    {
      "location": "plugins/development/migration-v4/#general",
      "title": "General",
      "text": ""
    },
    {
      "location": "plugins/development/migration-v4/#python-support",
      "title": "Python support",
      "text": "<p>NetBox v4.0 drops support for Python 3.8 and 3.9, and introduces support for Python 3.12. You may need to update your CI/CD processes and/or packaging to reflect this.</p>"
    },
    {
      "location": "plugins/development/migration-v4/#plugin-resources-relocated",
      "title": "Plugin resources relocated",
      "text": "<p>All plugin Python resources were moved from <code>extras.plugins</code> to <code>netbox.plugins</code> in NetBox v3.7 (see #14036), and support for importing these resources from their old locations has been removed.</p> Old<pre><code>from extras.plugins import PluginConfig\n</code></pre> New<pre><code>from netbox.plugins import PluginConfig\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#contenttype-renamed-to-objecttype",
      "title": "ContentType renamed to ObjectType",
      "text": "<p>NetBox's proxy model for Django's ContentType model has been renamed to ObjectType for clarity. In general, plugins should use the ObjectType proxy when referencing content types, as it includes several custom manager methods. The one exception to this is when defining generic foreign keys: The ForeignKey field used for a GFK should point to Django's native ContentType.</p> <p>Additionally, plugin maintainers are strongly encouraged to adopt the \"object type\" terminology for field and filter names wherever feasible to be consistent with NetBox core (however this is not required for compatibility).</p> Old<pre><code>content_types = models.ManyToManyField(\n    to='contenttypes.ContentType',\n    related_name='event_rules'\n)\n</code></pre> New<pre><code>object_types = models.ManyToManyField(\n    to='core.ObjectType',\n    related_name='event_rules'\n)\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#views",
      "title": "Views",
      "text": ""
    },
    {
      "location": "plugins/development/migration-v4/#view-actions-must-be-dictionaries",
      "title": "View actions must be dictionaries",
      "text": "<p>The format for declaring view actions &amp; permissions was updated in NetBox v3.7 (see #13550), and NetBox v4.0 drops support for the old format. Views which inherit <code>ActionsMixin</code> must declare a single <code>actions</code> map.</p> Old<pre><code>actions = ('add', 'import', 'export', 'bulk_edit', 'bulk_delete')\naction_perms = defaultdict(set, **{\n    'add': {'add'},\n    'import': {'add'},\n    'bulk_edit': {'change'},\n    'bulk_delete': {'delete'},\n})\n</code></pre> New<pre><code>actions = {\n    'add': {'add'},\n    'import': {'add'},\n    'export': set(),\n    'bulk_edit': {'change'},\n    'bulk_delete': {'delete'},\n}\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#forms",
      "title": "Forms",
      "text": ""
    },
    {
      "location": "plugins/development/migration-v4/#remove-bootstrapmixin",
      "title": "Remove <code>BootstrapMixin</code>",
      "text": "<p>The <code>BootstrapMixin</code> class is no longer available or needed and can be removed from all forms.</p> Old<pre><code>from django import forms\nfrom utilities.forms import BootstrapMixin\n\nclass MyForm(BootstrapMixin, forms.Form):\n</code></pre> New<pre><code>from django import forms\n\nclass MyForm(forms.Form):\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#update-fieldset-definitions",
      "title": "Update Fieldset definitions",
      "text": "<p>NetBox v4.0 introduces several new classes for advanced form rendering, including FieldSet. Fieldset definitions on forms should use this new class instead of a tuple or list.</p> <p>Notably, the name of a fieldset is now optional, and passed as a keyword argument rather than as the first item in the set.</p> Old<pre><code>from django.utils.translation import gettext_lazy as _\nfrom netbox.forms import NetBoxModelForm\n\nclass CircuitForm(NetBoxModelForm):\n    ...\n    fieldsets = (\n        (_('Circuit'), ('cid', 'type', 'status', 'description', 'tags')),\n        (_('Service Parameters'), ('install_date', 'termination_date', 'commit_rate')),\n        (_('Tenancy'), ('tenant_group', 'tenant')),\n    )\n</code></pre> New<pre><code>from django.utils.translation import gettext_lazy as _\nfrom netbox.forms import NetBoxModelForm\nfrom utilities.forms.rendering import FieldSet\n\nclass CircuitForm(NetBoxModelForm):\n    ...\n    fieldsets = (\n        FieldSet('cid', 'type', 'status', 'description', 'tags', name=_('Circuit')),\n        FieldSet('install_date', 'termination_date', 'commit_rate', name=_('Service Parameters')),\n        FieldSet('tenant_group', 'tenant', name=_('Tenancy')),\n    )\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#navigation",
      "title": "Navigation",
      "text": ""
    },
    {
      "location": "plugins/development/migration-v4/#remove-button-colors",
      "title": "Remove button colors",
      "text": "<p>NetBox no longer applies color to buttons within navigation menu items. Although this functionality is still supported, you might want to remove color from any buttons to ensure consistency with the updated design.</p> Old<pre><code>PluginMenuButton(\n    link='myplugin:foo_add',\n    title='Add a new Foo',\n    icon_class='mdi mdi-plus-thick',\n    color=ButtonColorChoices.GREEN\n)\n</code></pre> New<pre><code>PluginMenuButton(\n    link='myplugin:foo_add',\n    title='Add a new Foo',\n    icon_class='mdi mdi-plus-thick'\n)\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#ui-layout",
      "title": "UI Layout",
      "text": ""
    },
    {
      "location": "plugins/development/migration-v4/#renamed-template-blocks",
      "title": "Renamed template blocks",
      "text": "<p>The following template blocks have been renamed or removed:</p> Template Old name New name generic/object.html <code>header</code> <code>page-header</code> generic/object.html <code>controls</code> <code>control-buttons</code> base/layout.html <code>content-wrapper</code> Removed (use <code>content</code>)"
    },
    {
      "location": "plugins/development/migration-v4/#utilize-flex-controls",
      "title": "Utilize flex controls",
      "text": "<p>Ditch any legacy \"float\" controls (e.g. <code>float-end</code>) in favor of Bootstrap's new flex behaviors for controlling the layout and sizing of elements horizontally. For example, the following will align two items against the left and right sides of the parent element:</p> <pre><code>&lt;div class=\"d-flex justify-content-between\"&gt;\n    &lt;h3&gt;Title text&lt;/h3&gt;\n    &lt;i class=\"mdi mdi-close\"&gt;&lt;/i&gt;\n&lt;/div&gt;\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#check-column-offsets",
      "title": "Check column offsets",
      "text": "<p>When using offset columns (e.g. <code>class=\"col-offset-3\"</code>), be sure to also set the column width (e.g. <code>class=\"col-9 col-offset-3\"</code>) to avoid horizontal scrolling.</p>"
    },
    {
      "location": "plugins/development/migration-v4/#tables-inside-cards",
      "title": "Tables inside cards",
      "text": "<p>Tables inside cards should be embedded directly, not nested inside a <code>card-body</code> element.</p> Old<pre><code>&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-body\"&gt;\n        &lt;table class=\"table table-hover attr-table\"&gt;\n            ...\n        &lt;/table&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> New<pre><code>&lt;div class=\"card\"&gt;\n    &lt;table class=\"table table-hover attr-table\"&gt;\n        ...\n    &lt;/table&gt;\n&lt;/div&gt;\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#remove-btn-sm-class-from-buttons",
      "title": "Remove <code>btn-sm</code> class from buttons",
      "text": "<p>The <code>btn-sm</code> (small) class is no longer typically needed on general-purpose buttons.</p> Old<pre><code>&lt;a href=\"#\" class=\"btn btn-sm btn-primary\"&gt;Text&lt;/a&gt;\n</code></pre> New<pre><code>&lt;a href=\"#\" class=\"btn btn-primary\"&gt;Text&lt;/a&gt;\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#update-bg-color-classes",
      "title": "Update <code>bg-$color</code> classes",
      "text": "<p>Foreground (text) color is no longer automatically adjusted by <code>bg-$color</code> classes. To ensure sufficient contrast with the background color, use the <code>text-bg-$color</code> form of the class instead, or set the text color separately with <code>text-$color</code>.</p> Old<pre><code>&lt;span class=\"badge bg-primary\"&gt;Text&lt;/span&gt;\n</code></pre> New<pre><code>&lt;span class=\"badge text-bg-primary\"&gt;Text&lt;/span&gt;\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#obsolete-custom-css-classes",
      "title": "Obsolete custom CSS classes",
      "text": "<p>The following custom CSS classes have been removed:</p> <ul> <li><code>object-subtitle</code> (use <code>text-secondary</code> instead)</li> </ul>"
    },
    {
      "location": "plugins/development/migration-v4/#rest-api",
      "title": "REST API",
      "text": ""
    },
    {
      "location": "plugins/development/migration-v4/#extend-serializer-for-brief-mode",
      "title": "Extend serializer for brief mode",
      "text": "<p>NetBox now uses a single API serializer for both normal and \"brief\" modes (i.e. <code>GET /api/dcim/sites/?brief=true</code>); nested serializer classes are no longer required. Two changes to API serializers are necessary to support brief mode:</p> <ol> <li>Define <code>brief_fields</code> under its <code>Meta</code> class. These are the fields which will be included when brief mode is used.</li> <li>For any nested objects, switch to using the primary serializer and pass <code>nested=True</code>.</li> </ol> <p>Any nested serializers which are no longer needed can be removed.</p> Old<pre><code>class SiteSerializer(NetBoxModelSerializer):\n    region = NestedRegionSerializer(required=False, allow_null=True)\n\n    class Meta:\n        model = Site\n        fields = ('id', 'url', 'display', 'name', 'slug', 'status', 'region', 'time_zone', ...)\n</code></pre> New<pre><code>class SiteSerializer(NetBoxModelSerializer):\n    region = RegionSerializer(nested=True, required=False, allow_null=True)\n\n    class Meta:\n        model = Site\n        fields = ('id', 'url', 'display', 'name', 'slug', 'status', 'region', 'time_zone', ...)\n        brief_fields = ('id', 'url', 'display', 'name', 'description', 'slug')\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#include-description-fields-in-brief-mode",
      "title": "Include description fields in brief mode",
      "text": "<p>NetBox now includes the <code>description</code> field in \"brief\" mode for all models which have one. This is not required for plugins, but you may opt to do the same for consistency.</p>"
    },
    {
      "location": "plugins/development/migration-v4/#graphql",
      "title": "GraphQL",
      "text": "<p>NetBox has replaced Graphene-Django with Strawberry which requires any GraphQL code to be updated.</p>"
    },
    {
      "location": "plugins/development/migration-v4/#change-schemapy",
      "title": "Change schema.py",
      "text": "<p>Strawberry uses Python typing and generally only requires a small refactoring of the schema definition to update:</p> Old<pre><code>import graphene\nfrom netbox.graphql.fields import ObjectField, ObjectListField\nfrom utilities.graphql_optimizer import gql_query_optimizer\n\nclass CircuitsQuery(graphene.ObjectType):\n    circuit = ObjectField(CircuitType)\n    circuit_list = ObjectListField(CircuitType)\n\n    def resolve_circuit_list(root, info, **kwargs):\n        return gql_query_optimizer(models.Circuit.objects.all(), info)\n</code></pre> New<pre><code>import strawberry\nimport strawberry_django\n\n@strawberry.type\nclass CircuitsQuery:\n    @strawberry.field\n    def circuit(self, id: int) -&gt; CircuitType:\n        return models.Circuit.objects.get(pk=id)\n    circuit_list: list[CircuitType] = strawberry_django.field()\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#change-typespy",
      "title": "Change types.py",
      "text": "<p>Type conversion is also fairly straight-forward, but Strawberry requires FK and M2M references to be explicitly defined to pick up the right typing.</p> <ol> <li>The <code>class Meta</code> options need to be moved up to the Strawberry decorator</li> <li>Add <code>@strawberry_django.field</code> definitions for any FK and M2M references in the model</li> </ol> Old<pre><code>import graphene\n\nclass CircuitType(NetBoxObjectType, ContactsMixin):\n    class Meta:\n        model = models.Circuit\n        fields = '__all__'\n        filterset_class = filtersets.CircuitFilterSet\n</code></pre> New<pre><code>from typing import Annotated\n\nimport strawberry\nimport strawberry_django\n\n@strawberry_django.type(\n    models.CircuitType,\n    fields='__all__',\n    filters=CircuitTypeFilter\n)\nclass CircuitTypeType(OrganizationalObjectType):\n    color: str\n\n    @strawberry_django.field\n    def circuits(self) -&gt; list[Annotated[\"CircuitType\", strawberry.lazy('circuits.graphql.types')]]:\n        return self.circuits.all()\n</code></pre>"
    },
    {
      "location": "plugins/development/migration-v4/#change-filterspy",
      "title": "Change filters.py",
      "text": "<p>Strawberry currently doesn't directly support django-filter, so an explicit filters.py file will need to be created.  NetBox includes a new <code>autotype_decorator</code> used to automatically wrap FilterSets to reduce the required code to a minimum.</p> New<pre><code>import strawberry\nimport strawberry_django\nfrom circuits import filtersets, models\n\nfrom netbox.graphql.filter_mixins import autotype_decorator, BaseFilterMixin\n\n__all__ = (\n    'CircuitFilter',\n)\n\n\n@strawberry_django.filter(models.Circuit, lookups=True)\n@autotype_decorator(filtersets.CircuitFilterSet)\nclass CircuitFilter(BaseFilterMixin):\n    pass\n</code></pre>"
    },
    {
      "location": "plugins/development/models/",
      "title": "Database Models",
      "text": ""
    },
    {
      "location": "plugins/development/models/#creating-models",
      "title": "Creating Models",
      "text": "<p>If your plugin introduces a new type of object in NetBox, you'll probably want to create a Django model for it. A model is essentially a Python representation of a database table, with attributes that represent individual columns. Instances of a model (objects) can be created, manipulated, and deleted using queries. Models must be defined within a file named <code>models.py</code>.</p> <p>Below is an example <code>models.py</code> file containing a model with two character (text) fields:</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    foo = models.CharField(max_length=50)\n    bar = models.CharField(max_length=50)\n\n    def __str__(self):\n        return f'{self.foo} {self.bar}'\n</code></pre> <p>Every model includes by default a numeric primary key. This value is generated automatically by the database, and can be referenced as <code>pk</code> or <code>id</code>.</p> <p>Note</p> <p>Model names should adhere to PEP8 standards and be CapWords (no underscores).  Using underscores in model names will result in problems with permissions.</p>"
    },
    {
      "location": "plugins/development/models/#enabling-netbox-features",
      "title": "Enabling NetBox Features",
      "text": "<p>Plugin models can leverage certain NetBox features by inheriting from NetBox's <code>NetBoxModel</code> class. This class extends the plugin model to enable features unique to NetBox, including:</p> <ul> <li>Bookmarks</li> <li>Change logging</li> <li>Cloning</li> <li>Custom fields</li> <li>Custom links</li> <li>Custom validation</li> <li>Export templates</li> <li>Journaling</li> <li>Tags</li> <li>Webhooks</li> </ul> <p>This class performs two crucial functions:</p> <ol> <li>Apply any fields, methods, and/or attributes necessary to the operation of these features</li> <li>Register the model with NetBox as utilizing these features</li> </ol> <p>Simply subclass NetBoxModel when defining a model in your plugin:</p> <pre><code># models.py\nfrom django.db import models\nfrom netbox.models import NetBoxModel\n\nclass MyModel(NetBoxModel):\n    foo = models.CharField()\n    ...\n</code></pre>"
    },
    {
      "location": "plugins/development/models/#netboxmodel-properties",
      "title": "NetBoxModel Properties",
      "text": ""
    },
    {
      "location": "plugins/development/models/#docs_url",
      "title": "<code>docs_url</code>",
      "text": "<p>This attribute specifies the URL at which the documentation for this model can be reached. By default, it will return <code>/static/docs/models/&lt;app_label&gt;/&lt;model_name&gt;/</code>. Plugin models can override this to return a custom URL. For example, you might direct the user to your plugin's documentation hosted on ReadTheDocs.</p>"
    },
    {
      "location": "plugins/development/models/#_netbox_private",
      "title": "<code>_netbox_private</code>",
      "text": "<p>By default, any model introduced by a plugin will appear in the list of available object types e.g. when creating a custom field or certain dashboard widgets. If your model is intended only for \"behind the scenes use\" and should not be exposed to end users, set <code>_netbox_private</code> to True. This will omit it from the list of general-purpose object types.</p>"
    },
    {
      "location": "plugins/development/models/#enabling-features-individually",
      "title": "Enabling Features Individually",
      "text": "<p>If you prefer instead to enable only a subset of these features for a plugin model, NetBox provides a discrete \"mix-in\" class for each feature. You can subclass each of these individually when defining your model. (Your model will also need to inherit from Django's built-in <code>Model</code> class.)</p> <p>For example, if we wanted to support only tags and export templates, we would inherit from NetBox's <code>ExportTemplatesMixin</code> and <code>TagsMixin</code> classes, and from Django's <code>Model</code> class. (Inheriting all the available mixins is essentially the same as subclassing <code>NetBoxModel</code>.)</p> <pre><code># models.py\nfrom django.db import models\nfrom netbox.models.features import ExportTemplatesMixin, TagsMixin\n\nclass MyModel(ExportTemplatesMixin, TagsMixin, models.Model):\n    foo = models.CharField()\n    ...\n</code></pre>"
    },
    {
      "location": "plugins/development/models/#database-migrations",
      "title": "Database Migrations",
      "text": "<p>Once you have completed defining the model(s) for your plugin, you'll need to create the database schema migrations. A migration file is essentially a set of instructions for manipulating the PostgreSQL database to support your new model, or to alter existing models. Creating migrations can usually be done automatically using Django's <code>makemigrations</code> management command. (Ensure that your plugin has been installed and enabled first, otherwise it won't be found.)</p> <p>Note</p> <p>NetBox enforces a safeguard around the <code>makemigrations</code> command to protect regular users from inadvertently creating erroneous schema migrations. To enable this command for plugin development, set <code>DEVELOPER=True</code> in <code>configuration.py</code>.</p> <pre><code>$ ./manage.py makemigrations my_plugin \nMigrations for 'my_plugin':\n  /home/jstretch/animal_sounds/my_plugin/migrations/0001_initial.py\n    - Create model MyModel\n</code></pre> <p>Next, we can apply the migration to the database with the <code>migrate</code> command:</p> <pre><code>$ ./manage.py migrate my_plugin\nOperations to perform:\n  Apply all migrations: my_plugin\nRunning migrations:\n  Applying my_plugin.0001_initial... OK\n</code></pre> <p>For more information about database migrations, see the Django documentation.</p>"
    },
    {
      "location": "plugins/development/models/#feature-mixins-reference",
      "title": "Feature Mixins Reference",
      "text": "<p>Warning</p> <p>Please note that only the classes which appear in this documentation are currently supported. Although other classes may be present within the <code>features</code> module, they are not yet supported for use by plugins.</p> <p>Note</p> <p><code>EventRulesMixin</code> was renamed from <code>WebhooksMixin</code> in NetBox v3.7.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.BookmarksMixin",
      "title": "<code>BookmarksMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for user bookmarks.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.ChangeLoggingMixin",
      "title": "<code>ChangeLoggingMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Provides change logging support for a model. Adds the <code>created</code> and <code>last_updated</code> fields.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.ChangeLoggingMixin.serialize_object",
      "title": "<code>serialize_object(exclude=None)</code>",
      "text": "<p>Return a JSON representation of the instance. Models can override this method to replace or extend the default serialization logic provided by the <code>serialize_object()</code> utility function.</p> <p>Parameters:</p> Name Type Description Default <code>exclude</code> <p>An iterable of attribute names to omit from the serialized output</p> <code>None</code>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.ChangeLoggingMixin.snapshot",
      "title": "<code>snapshot()</code>",
      "text": "<p>Save a snapshot of the object's current state in preparation for modification. The snapshot is saved as <code>_prechange_snapshot</code> on the instance.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.ChangeLoggingMixin.to_objectchange",
      "title": "<code>to_objectchange(action)</code>",
      "text": "<p>Return a new ObjectChange representing a change made to this object. This will typically be called automatically by ChangeLoggingMiddleware.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CloningMixin",
      "title": "<code>CloningMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Provides the clone() method used to prepare a copy of existing objects.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CloningMixin.clone",
      "title": "<code>clone()</code>",
      "text": "<p>Returns a dictionary of attributes suitable for creating a copy of the current instance. This is used for pre- populating an object creation form in the UI. By default, this method will replicate any fields listed in the model's <code>clone_fields</code> list (if defined), but it can be overridden to apply custom logic.</p> <pre><code>class MyModel(NetBoxModel):\n    def clone(self):\n        attrs = super().clone()\n        attrs['extra-value'] = 123\n        return attrs\n</code></pre>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomLinksMixin",
      "title": "<code>CustomLinksMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for custom links.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomFieldsMixin",
      "title": "<code>CustomFieldsMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for custom fields.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomFieldsMixin.cf",
      "title": "<code>cf</code>  <code>cached</code> <code>property</code>",
      "text": "<p>Return a dictionary mapping each custom field for this instance to its deserialized value.</p> <pre><code>&gt;&gt;&gt; tenant = Tenant.objects.first()\n&gt;&gt;&gt; tenant.cf\n{'primary_site': &lt;Site: DM-NYC&gt;, 'cust_id': 'DMI01', 'is_active': True}\n</code></pre>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomFieldsMixin.custom_fields",
      "title": "<code>custom_fields</code>  <code>cached</code> <code>property</code>",
      "text": "<p>Return the QuerySet of CustomFields assigned to this model.</p> <pre><code>&gt;&gt;&gt; tenant = Tenant.objects.first()\n&gt;&gt;&gt; tenant.custom_fields\n&lt;RestrictedQuerySet [&lt;CustomField: Primary site&gt;, &lt;CustomField: Customer ID&gt;, &lt;CustomField: Is active&gt;]&gt;\n</code></pre>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomFieldsMixin.get_custom_fields",
      "title": "<code>get_custom_fields(omit_hidden=False)</code>",
      "text": "<p>Return a dictionary of custom fields for a single object in the form <code>{field: value}</code>.</p> <pre><code>&gt;&gt;&gt; tenant = Tenant.objects.first()\n&gt;&gt;&gt; tenant.get_custom_fields()\n{&lt;CustomField: Customer ID&gt;: 'CYB01'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>omit_hidden</code> <p>If True, custom fields with no UI visibility will be omitted.</p> <code>False</code>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomFieldsMixin.get_custom_fields_by_group",
      "title": "<code>get_custom_fields_by_group()</code>",
      "text": "<p>Return a dictionary of custom field/value mappings organized by group. Hidden fields are omitted.</p> <pre><code>&gt;&gt;&gt; tenant = Tenant.objects.first()\n&gt;&gt;&gt; tenant.get_custom_fields_by_group()\n{\n    '': {&lt;CustomField: Primary site&gt;: &lt;Site: DM-NYC&gt;},\n    'Billing': {&lt;CustomField: Customer ID&gt;: 'DMI01', &lt;CustomField: Is active&gt;: True}\n}\n</code></pre>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomFieldsMixin.populate_custom_field_defaults",
      "title": "<code>populate_custom_field_defaults()</code>",
      "text": "<p>Apply the default value for each custom field</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.CustomValidationMixin",
      "title": "<code>CustomValidationMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables user-configured validation rules for models.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.EventRulesMixin",
      "title": "<code>EventRulesMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for event rules, which can be used to transmit webhooks or execute scripts automatically.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.ExportTemplatesMixin",
      "title": "<code>ExportTemplatesMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for export templates.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.JobsMixin",
      "title": "<code>JobsMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for job results.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.JobsMixin.get_latest_jobs",
      "title": "<code>get_latest_jobs()</code>",
      "text": "<p>Return a list of the most recent jobs for this instance.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.JournalingMixin",
      "title": "<code>JournalingMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for object journaling. Adds a generic relation (<code>journal_entries</code>) to NetBox's JournalEntry model.</p>"
    },
    {
      "location": "plugins/development/models/#netbox.models.features.TagsMixin",
      "title": "<code>TagsMixin</code>",
      "text": "<p>               Bases: <code>Model</code></p> <p>Enables support for tag assignment. Assigned tags can be managed via the <code>tags</code> attribute, which is a <code>TaggableManager</code> instance.</p>"
    },
    {
      "location": "plugins/development/models/#choice-sets",
      "title": "Choice Sets",
      "text": "<p>For model fields which support the selection of one or more values from a predefined list of choices, NetBox provides the <code>ChoiceSet</code> utility class. This can be used in place of a regular choices tuple to provide enhanced functionality, namely dynamic configuration and colorization. (See Django's documentation on the <code>choices</code> parameter for supported model fields.)</p> <p>To define choices for a model field, subclass <code>ChoiceSet</code> and define a tuple named <code>CHOICES</code>, of which each member is a two- or three-element tuple. These elements are:</p> <ul> <li>The database value</li> <li>The corresponding human-friendly label</li> <li>The assigned color (optional)</li> </ul> <p>A complete example is provided below.</p> <p>Note</p> <p>Authors may find it useful to declare each of the database values as constants on the class, and reference them within <code>CHOICES</code> members. This convention allows the values to be referenced from outside the class, however it is not strictly required.</p>"
    },
    {
      "location": "plugins/development/models/#dynamic-configuration",
      "title": "Dynamic Configuration",
      "text": "<p>Some model field choices in NetBox can be configured by an administrator. For example, the default values for the Site model's <code>status</code> field can be replaced or supplemented with custom choices. To enable dynamic configuration for a ChoiceSet subclass, define its <code>key</code> as a string specifying the model and field name to which it applies. For example:</p> <pre><code>from utilities.choices import ChoiceSet\n\nclass StatusChoices(ChoiceSet):\n    key = 'MyModel.status'\n</code></pre> <p>To extend or replace the default values for this choice set, a NetBox administrator can then reference it under the <code>FIELD_CHOICES</code> configuration parameter. For example, the <code>status</code> field on <code>MyModel</code> in <code>my_plugin</code> would be referenced as:</p> <pre><code>FIELD_CHOICES = {\n    'my_plugin.MyModel.status': (\n        # Custom choices\n    )\n}\n</code></pre>"
    },
    {
      "location": "plugins/development/models/#example",
      "title": "Example",
      "text": "<pre><code># choices.py\nfrom utilities.choices import ChoiceSet\n\nclass StatusChoices(ChoiceSet):\n    key = 'MyModel.status'\n\n    STATUS_FOO = 'foo'\n    STATUS_BAR = 'bar'\n    STATUS_BAZ = 'baz'\n\n    CHOICES = [\n        (STATUS_FOO, 'Foo', 'red'),\n        (STATUS_BAR, 'Bar', 'green'),\n        (STATUS_BAZ, 'Baz', 'blue'),\n    ]\n</code></pre> <p>Warning</p> <p>For dynamic configuration to work properly, <code>CHOICES</code> must be a mutable list, rather than a tuple.</p> <pre><code># models.py\nfrom django.db import models\nfrom .choices import StatusChoices\n\nclass MyModel(models.Model):\n    status = models.CharField(\n        max_length=50,\n        choices=StatusChoices,\n        default=StatusChoices.STATUS_FOO\n    )\n</code></pre>"
    },
    {
      "location": "plugins/development/navigation/",
      "title": "Navigation",
      "text": ""
    },
    {
      "location": "plugins/development/navigation/#menus",
      "title": "Menus",
      "text": "<p>A plugin can register its own submenu as part of NetBox's navigation menu. This is done by defining a variable named <code>menu</code> in <code>navigation.py</code>, pointing to an instance of the <code>PluginMenu</code> class. Each menu must define a label and grouped menu items (discussed below), and may optionally specify an icon. An example is shown below.</p> navigation.py<pre><code>from netbox.plugins import PluginMenu\n\nmenu = PluginMenu(\n    label='My Plugin',\n    groups=(\n        ('Foo', (item1, item2, item3)),\n        ('Bar', (item4, item5)),\n    ),\n    icon_class='mdi mdi-router'\n)\n</code></pre> <p>Note that each group is a two-tuple containing a label and an iterable of menu items. The group's label serves as the section header within the submenu. A group label is required even if you have only one group of items.</p> <p>Tip</p> <p>The path to the menu class can be modified by setting <code>menu</code> in the PluginConfig instance.</p> <p>A <code>PluginMenu</code> has the following attributes:</p> Attribute Required Description <code>label</code> Yes The text displayed as the menu heading <code>groups</code> Yes An iterable of named groups containing menu items <code>icon_class</code> - The CSS name of the icon to use for the heading <p>Tip</p> <p>Supported icons can be found at Material Design Icons</p>"
    },
    {
      "location": "plugins/development/navigation/#the-default-menu",
      "title": "The Default Menu",
      "text": "<p>If your plugin has only a small number of menu items, it may be desirable to use NetBox's shared \"Plugins\" menu rather than creating your own. To do this, simply declare <code>menu_items</code> as a list of <code>PluginMenuItems</code> in <code>navigation.py</code>. The listed items will appear under a heading bearing the name of your plugin in the \"Plugins\" submenu.</p> navigation.py<pre><code>menu_items = (item1, item2, item3)\n</code></pre> <p>Tip</p> <p>The path to the menu items list can be modified by setting <code>menu_items</code> in the PluginConfig instance.</p>"
    },
    {
      "location": "plugins/development/navigation/#menu-items",
      "title": "Menu Items",
      "text": "<p>Each menu item represents a link and (optionally) a set of buttons comprising one entry in NetBox's navigation menu. Menu items are defined as PluginMenuItem instances. An example is shown below.</p> navigation.py<pre><code>from netbox.choices import ButtonColorChoices\nfrom netbox.plugins import PluginMenuButton, PluginMenuItem\n\nitem1 = PluginMenuItem(\n    link='plugins:myplugin:myview',\n    link_text='Some text',\n    buttons=(\n        PluginMenuButton('home', 'Button A', 'fa fa-info', ButtonColorChoices.BLUE),\n        PluginMenuButton('home', 'Button B', 'fa fa-warning', ButtonColorChoices.GREEN),\n    )\n)\n</code></pre> <p>A <code>PluginMenuItem</code> has the following attributes:</p> Attribute Required Description <code>link</code> Yes Name of the URL path to which this menu item links <code>link_text</code> Yes The text presented to the user <code>permissions</code> - A list of permissions required to display this link <code>staff_only</code> - Display only for users who have <code>is_staff</code> set to true (any specified permissions will also be required) <code>buttons</code> - An iterable of PluginMenuButton instances to include"
    },
    {
      "location": "plugins/development/navigation/#menu-buttons",
      "title": "Menu Buttons",
      "text": "<p>Each menu item can include a set of buttons. These can be handy for providing shortcuts related to the menu item. For instance, most items in NetBox's navigation menu include buttons to create and import new objects.</p> <p>A <code>PluginMenuButton</code> has the following attributes:</p> Attribute Required Description <code>link</code> Yes Name of the URL path to which this button links <code>title</code> Yes The tooltip text (displayed when the mouse hovers over the button) <code>icon_class</code> Yes Button icon CSS class <code>color</code> - One of the choices provided by <code>ButtonColorChoices</code> <code>permissions</code> - A list of permissions required to display this button <p>Any buttons associated within a menu item will be shown only if the user has permission to view the link, regardless of what permissions are set on the buttons.</p> <p>Tip</p> <p>Supported icons can be found at Material Design Icons</p>"
    },
    {
      "location": "plugins/development/rest-api/",
      "title": "REST API",
      "text": "<p>Plugins can declare custom endpoints on NetBox's REST API to retrieve or manipulate models or other data. These behave very similarly to views, except that instead of rendering arbitrary content using a template, data is returned in JSON format using a serializer.</p> <p>Generally speaking, there aren't many NetBox-specific components to implementing REST API functionality in a plugin. NetBox employs the Django REST Framework (DRF) for its REST API, and plugin authors will find that they can largely replicate the same patterns found in NetBox's implementation. Some brief examples are included here for reference.</p>"
    },
    {
      "location": "plugins/development/rest-api/#code-layout",
      "title": "Code Layout",
      "text": "<p>The recommended approach is to separate API serializers, views, and URLs into separate modules under the <code>api/</code> directory to keep things tidy, particularly for larger projects. The file at <code>api/__init__.py</code> can import the relevant components from each submodule to allow import all API components directly from elsewhere. However, this is merely a convention and not strictly required.</p> <pre><code>project-name/\n  - plugin_name/\n    - api/\n      - __init__.py\n      - serializers.py\n      - urls.py\n      - views.py\n    ...\n</code></pre>"
    },
    {
      "location": "plugins/development/rest-api/#serializers",
      "title": "Serializers",
      "text": ""
    },
    {
      "location": "plugins/development/rest-api/#model-serializers",
      "title": "Model Serializers",
      "text": "<p>Serializers are responsible for converting Python objects to JSON data suitable for conveying to consumers, and vice versa. NetBox provides the <code>NetBoxModelSerializer</code> class for use by plugins to handle the assignment of tags and custom field data. (These features can also be included ad hoc via the <code>CustomFieldModelSerializer</code> and <code>TaggableModelSerializer</code> classes.)</p> <p>The default nested representation of an object is defined by the <code>brief_fields</code> attributes under the serializer's <code>Meta</code> class. (Older versions of NetBox required the definition of a separate nested serializer.)</p>"
    },
    {
      "location": "plugins/development/rest-api/#example",
      "title": "Example",
      "text": "<p>To create a serializer for a plugin model, subclass <code>NetBoxModelSerializer</code> in <code>api/serializers.py</code>. Specify the model class and the fields to include within the serializer's <code>Meta</code> class.</p> <pre><code># api/serializers.py\nfrom rest_framework import serializers\nfrom netbox.api.serializers import NetBoxModelSerializer\nfrom my_plugin.models import MyModel\n\nclass MyModelSerializer(NetBoxModelSerializer):\n    foo = SiteSerializer(nested=True, allow_null=True)\n\n    class Meta:\n        model = MyModel\n        fields = ('id', 'foo', 'bar', 'baz')\n        brief_fields = ('id', 'url', 'display', 'bar')\n</code></pre>"
    },
    {
      "location": "plugins/development/rest-api/#viewsets",
      "title": "Viewsets",
      "text": "<p>Just as in the user interface, a REST API view handles the business logic of displaying and interacting with NetBox objects. NetBox provides the <code>NetBoxModelViewSet</code> class, which extends DRF's built-in <code>ModelViewSet</code> to handle bulk operations and object validation.</p> <p>Unlike the user interface, typically only a single view set is required per model: This view set handles all request types (<code>GET</code>, <code>POST</code>, <code>DELETE</code>, etc.).</p>"
    },
    {
      "location": "plugins/development/rest-api/#example_1",
      "title": "Example",
      "text": "<p>To create a viewset for a plugin model, subclass <code>NetBoxModelViewSet</code> in <code>api/views.py</code>, and define the <code>queryset</code> and <code>serializer_class</code> attributes.</p> <pre><code># api/views.py\nfrom netbox.api.viewsets import NetBoxModelViewSet\nfrom my_plugin.models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelViewSet(NetBoxModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n</code></pre>"
    },
    {
      "location": "plugins/development/rest-api/#routers",
      "title": "Routers",
      "text": "<p>Routers map URLs to REST API views (endpoints). NetBox does not provide any custom components for this; the <code>DefaultRouter</code> class provided by DRF should suffice for most use cases.</p> <p>Routers should be exposed in <code>api/urls.py</code>. This file must define a variable named <code>urlpatterns</code>.</p>"
    },
    {
      "location": "plugins/development/rest-api/#example_2",
      "title": "Example",
      "text": "<pre><code># api/urls.py\nfrom netbox.api.routers import NetBoxRouter\nfrom .views import MyModelViewSet\n\nrouter = NetBoxRouter()\nrouter.register('my-model', MyModelViewSet)\nurlpatterns = router.urls\n</code></pre> <p>This will make the plugin's view accessible at <code>/api/plugins/my-plugin/my-model/</code>.</p> <p>Warning</p> <p>The examples provided here are intended to serve as a minimal reference implementation only. This documentation does not address authentication, performance, or myriad other concerns that plugin authors may need to address.</p>"
    },
    {
      "location": "plugins/development/search/",
      "title": "Search",
      "text": "<p>Plugins can define and register their own models to extend NetBox's core search functionality. Typically, a plugin will include a file named <code>search.py</code>, which holds all search indexes for its models (see the example below).</p> <pre><code># search.py\nfrom netbox.search import SearchIndex\nfrom .models import MyModel\n\nclass MyModelIndex(SearchIndex):\n    model = MyModel\n    fields = (\n        ('name', 100),\n        ('description', 500),\n        ('comments', 5000),\n    )\n    display_attrs = ('site', 'device', 'status', 'description')\n</code></pre> <p>Fields listed in <code>display_attrs</code> will not be cached for search, but will be displayed alongside the object when it appears in global search results. This is helpful for conveying to the user additional information about an object.</p> <p>To register one or more indexes with NetBox, define a list named <code>indexes</code> at the end of this file:</p> <pre><code>indexes = [MyModelIndex]\n</code></pre> <p>Tip</p> <p>The path to the list of search indexes can be modified by setting <code>search_indexes</code> in the PluginConfig instance.</p>"
    },
    {
      "location": "plugins/development/search/#netbox.search.SearchIndex",
      "title": "<code>SearchIndex</code>",
      "text": "<p>Base class for building search indexes.</p> <p>Attributes:</p> Name Type Description <code>model</code> <p>The model class for which this index is used.</p> <code>category</code> <p>The label of the group under which this indexer is categorized (for form field display). If none, the name of the model's app will be used.</p> <code>fields</code> <p>An iterable of two-tuples defining the model fields to be indexed and the weight associated with each.</p> <code>display_attrs</code> <p>An iterable of additional object attributes to include when displaying search results.</p>"
    },
    {
      "location": "plugins/development/search/#netbox.search.SearchIndex.get_field_type",
      "title": "<code>get_field_type(instance, field_name)</code>  <code>staticmethod</code>",
      "text": "<p>Return the data type of the specified model field.</p>"
    },
    {
      "location": "plugins/development/search/#netbox.search.SearchIndex.get_attr_type",
      "title": "<code>get_attr_type(instance, field_name)</code>  <code>staticmethod</code>",
      "text": "<p>Return the data type of the specified object attribute.</p>"
    },
    {
      "location": "plugins/development/search/#netbox.search.SearchIndex.get_field_value",
      "title": "<code>get_field_value(instance, field_name)</code>  <code>staticmethod</code>",
      "text": "<p>Return the value of the specified model field as a string (or None).</p>"
    },
    {
      "location": "plugins/development/search/#netbox.search.SearchIndex.to_cache",
      "title": "<code>to_cache(instance, custom_fields=None)</code>  <code>classmethod</code>",
      "text": "<p>Return a list of ObjectFieldValue representing the instance fields to be cached.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <p>The instance being cached.</p> required <code>custom_fields</code> <p>An iterable of CustomFields to include when caching the instance. If None, all custom fields defined for the model will be included. (This can also be provided during bulk caching to avoid looking up the available custom fields for each instance.)</p> <code>None</code>"
    },
    {
      "location": "plugins/development/staged-changes/",
      "title": "Staged Changes",
      "text": "<p>Deprecated Feature</p> <p>This feature has been deprecated in NetBox v4.2 and will be removed in a future release. Please consider using the netbox-branching plugin, which provides much more robust functionality.</p> <p>NetBox provides a programmatic API to stage the creation, modification, and deletion of objects without actually committing those changes to the active database. This can be useful for performing a \"dry run\" of bulk operations, or preparing a set of changes for administrative approval, for example.</p> <p>To begin staging changes, first create a branch:</p> <pre><code>from extras.models import Branch\n\nbranch1 = Branch.objects.create(name='branch1')\n</code></pre> <p>Then, activate the branch using the <code>checkout()</code> context manager and begin making your changes. This initiates a new database transaction.</p> <pre><code>from extras.models import Branch\nfrom netbox.staging import checkout\n\nbranch1 = Branch.objects.get(name='branch1')\nwith checkout(branch1):\n    Site.objects.create(name='New Site', slug='new-site')\n    # ...\n</code></pre> <p>Upon exiting the context, the database transaction is automatically rolled back and your changes recorded as staged changes. Re-entering a branch will trigger a new database transaction and automatically apply any staged changes associated with the branch.</p> <p>To apply the changes within a branch, call the branch's <code>commit()</code> method:</p> <pre><code>from extras.models import Branch\n\nbranch1 = Branch.objects.get(name='branch1')\nbranch1.commit()\n</code></pre> <p>Committing a branch is an all-or-none operation: Any exceptions will revert the entire set of changes. After successfully committing a branch, all its associated StagedChange objects are automatically deleted (however the branch itself will remain and can be reused).</p>"
    },
    {
      "location": "plugins/development/tables/",
      "title": "Tables",
      "text": "<p>NetBox employs the <code>django-tables2</code> library for rendering dynamic object tables. These tables display lists of objects, and can be sorted and filtered by various parameters.</p>"
    },
    {
      "location": "plugins/development/tables/#netboxtable",
      "title": "NetBoxTable",
      "text": "<p>To provide additional functionality beyond what is supported by the stock <code>Table</code> class in <code>django-tables2</code>, NetBox provides the <code>NetBoxTable</code> class. This custom table class includes support for:</p> <ul> <li>User-configurable column display and ordering</li> <li>Custom field &amp; custom link columns</li> <li>Automatic prefetching of related objects</li> </ul> <p>It also includes several default columns:</p> <ul> <li><code>pk</code> - A checkbox for selecting the object associated with each table row (where applicable)</li> <li><code>id</code> - The object's numeric database ID, as a hyperlink to the object's view (hidden by default)</li> <li><code>actions</code> - A dropdown menu presenting object-specific actions available to the user</li> </ul>"
    },
    {
      "location": "plugins/development/tables/#example",
      "title": "Example",
      "text": "<pre><code># tables.py\nimport django_tables2 as tables\nfrom netbox.tables import NetBoxTable\nfrom .models import MyModel\n\nclass MyModelTable(NetBoxTable):\n    name = tables.Column(\n        linkify=True\n    )\n    ...\n\n    class Meta(NetBoxTable.Meta):\n        model = MyModel\n        fields = ('pk', 'id', 'name', ...)\n        default_columns = ('pk', 'name', ...)\n</code></pre>"
    },
    {
      "location": "plugins/development/tables/#table-configuration",
      "title": "Table Configuration",
      "text": "<p>The NetBoxTable class features dynamic configuration to allow users to change their column display and ordering preferences. To configure a table for a specific request, simply call its <code>configure()</code> method and pass the current HTTPRequest object. For example:</p> <pre><code>table = MyModelTable(data=MyModel.objects.all())\ntable.configure(request)\n</code></pre> <p>This will automatically apply any user-specific preferences for the table. (If using a generic view provided by NetBox, table configuration is handled automatically.)</p>"
    },
    {
      "location": "plugins/development/tables/#columns",
      "title": "Columns",
      "text": "<p>The table column classes listed below are supported for use in plugins. These classes can be imported from <code>netbox.tables.columns</code>.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.BooleanColumn",
      "title": "<code>BooleanColumn</code>",
      "text": "<p>               Bases: <code>Column</code></p> <p>Custom implementation of BooleanColumn to render a nicely-formatted checkmark or X icon instead of a Unicode character.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.ChoiceFieldColumn",
      "title": "<code>ChoiceFieldColumn</code>",
      "text": "<p>               Bases: <code>Column</code></p> <p>Render a model's static ChoiceField with its value from <code>get_FOO_display()</code> as a colored badge. Background color is set by the instance's get_FOO_color() method, if defined, or can be overridden by a \"color\" callable.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.ColorColumn",
      "title": "<code>ColorColumn</code>",
      "text": "<p>               Bases: <code>Column</code></p> <p>Display an arbitrary color value, specified in RRGGBB format.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.ColoredLabelColumn",
      "title": "<code>ColoredLabelColumn</code>",
      "text": "<p>               Bases: <code>TemplateColumn</code></p> <p>Render a related object as a colored label. The related object must have a <code>color</code> attribute (specifying an RRGGBB value) and a <code>get_absolute_url()</code> method.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.ContentTypeColumn",
      "title": "<code>ContentTypeColumn</code>",
      "text": "<p>               Bases: <code>Column</code></p> <p>Display a ContentType instance.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.ContentTypesColumn",
      "title": "<code>ContentTypesColumn</code>",
      "text": "<p>               Bases: <code>ManyToManyColumn</code></p> <p>Display a list of ContentType instances.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.MarkdownColumn",
      "title": "<code>MarkdownColumn</code>",
      "text": "<p>               Bases: <code>TemplateColumn</code></p> <p>Render a Markdown string.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.TagColumn",
      "title": "<code>TagColumn</code>",
      "text": "<p>               Bases: <code>TemplateColumn</code></p> <p>Display a list of Tags assigned to the object.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.TemplateColumn",
      "title": "<code>TemplateColumn</code>",
      "text": "<p>               Bases: <code>TemplateColumn</code></p> <p>Overrides django-tables2's stock TemplateColumn class to render a placeholder symbol if the returned value is an empty string.</p>"
    },
    {
      "location": "plugins/development/tables/#netbox.tables.TemplateColumn.__init__",
      "title": "<code>__init__(export_raw=False, **kwargs)</code>",
      "text": "<p>Parameters:</p> Name Type Description Default <code>export_raw</code> <p>If true, data export returns the raw field value rather than the rendered template. (Default:         False)</p> <code>False</code>"
    },
    {
      "location": "plugins/development/tables/#extending-core-tables",
      "title": "Extending Core Tables",
      "text": "<p>Plugins can register their own custom columns on core tables using the <code>register_table_column()</code> utility function. This allows a plugin to attach additional information, such as relationships to its own models, to built-in object lists.</p> <pre><code>import django_tables2\nfrom django.utils.translation import gettext_lazy as _\n\nfrom dcim.tables import SiteTable\nfrom utilities.tables import register_table_column\n\nmycol = django_tables2.Column(\n    verbose_name=_('My Column'),\n    accessor=django_tables2.A('description')\n)\n\nregister_table_column(mycol, 'foo', SiteTable)\n</code></pre> <p>You'll typically want to define an accessor identifying the desired model field or relationship when defining a custom column. See the django-tables2 documentation for more information on creating custom columns.</p>"
    },
    {
      "location": "plugins/development/tables/#utilities.tables.register_table_column",
      "title": "<code>register_table_column(column, name, *tables)</code>",
      "text": "<p>Register a custom column for use on one or more tables.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <p>The column instance to register</p> required <code>name</code> <p>The name of the table column</p> required <code>tables</code> <p>One or more table classes</p> <code>()</code>"
    },
    {
      "location": "plugins/development/templates/",
      "title": "Templates",
      "text": "<p>Templates are used to render HTML content generated from a set of context data. NetBox provides a set of built-in templates suitable for use in plugin views. Plugin authors can extend these templates to minimize the work needed to create custom templates while ensuring that the content they produce matches NetBox's layout and style. These templates are all written in the Django Template Language (DTL).</p>"
    },
    {
      "location": "plugins/development/templates/#template-file-structure",
      "title": "Template File Structure",
      "text": "<p>Plugin templates should live in the <code>templates/&lt;plugin-name&gt;/</code> path within the plugin root. For example if your plugin's name is <code>my_plugin</code> and you create a template named <code>foo.html</code>, it should be saved to <code>templates/my_plugin/foo.html</code>. (You can of course use subdirectories below this point as well.) This ensures that Django's template engine can locate the template for rendering.</p>"
    },
    {
      "location": "plugins/development/templates/#standard-blocks",
      "title": "Standard Blocks",
      "text": "<p>The following template blocks are available on all templates.</p> Name Required Description <code>title</code> Yes Page title <code>content</code> Yes Page content <code>head</code> - Content to include in the HTML <code>&lt;head&gt;</code> element <code>footer</code> - Page footer content <code>footer_links</code> - Links section of the page footer <code>javascript</code> - Javascript content included at the end of the HTML <code>&lt;body&gt;</code> element <p>Note</p> <p>For more information on how template blocks work, consult the Django documentation.</p>"
    },
    {
      "location": "plugins/development/templates/#base-templates",
      "title": "Base Templates",
      "text": ""
    },
    {
      "location": "plugins/development/templates/#layouthtml",
      "title": "layout.html",
      "text": "<p>Path: <code>base/layout.html</code></p> <p>NetBox provides a base template to ensure a consistent user experience, which plugins can extend with their own content. This is a general-purpose template that can be used when none of the function-specific templates below are suitable.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks",
      "title": "Blocks",
      "text": "Name Required Description <code>header</code> - Page header <code>tabs</code> - Horizontal navigation tabs <code>modals</code> - Bootstrap 5 modal elements"
    },
    {
      "location": "plugins/development/templates/#example",
      "title": "Example",
      "text": "<p>An example of a plugin template which extends <code>layout.html</code> is included below.</p> <pre><code>{% extends 'base/layout.html' %}\n\n{% block header %}\n  &lt;h1&gt;My Custom Header&lt;/h1&gt;\n{% endblock header %}\n\n{% block content %}\n  &lt;p&gt;{{ some_plugin_context_var }}&lt;/p&gt;\n{% endblock content %}\n</code></pre> <p>The first line of the template instructs Django to extend the NetBox base template, and the <code>block</code> sections inject our custom content within its <code>header</code> and <code>content</code> blocks.</p> <p>Note</p> <p>Django renders templates with its own custom template language. This is very similar to Jinja2, however there are some important distinctions of which authors should be aware. Be sure to familiarize yourself with Django's template language before attempting to create new templates.</p>"
    },
    {
      "location": "plugins/development/templates/#generic-view-templates",
      "title": "Generic View Templates",
      "text": ""
    },
    {
      "location": "plugins/development/templates/#objecthtml",
      "title": "object.html",
      "text": "<p>Path: <code>generic/object.html</code></p> <p>This template is used by the <code>ObjectView</code> generic view to display a single object.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks_1",
      "title": "Blocks",
      "text": "Name Required Description <code>breadcrumbs</code> - Breadcrumb list items (HTML <code>&lt;li&gt;</code> elements) <code>object_identifier</code> - A unique identifier (string) for the object <code>extra_controls</code> - Additional action buttons to display"
    },
    {
      "location": "plugins/development/templates/#context",
      "title": "Context",
      "text": "Name Required Description <code>object</code> Yes The object instance being viewed"
    },
    {
      "location": "plugins/development/templates/#object_edithtml",
      "title": "object_edit.html",
      "text": "<p>Path: <code>generic/object_edit.html</code></p> <p>This template is used by the <code>ObjectEditView</code> generic view to create or modify a single object.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks_2",
      "title": "Blocks",
      "text": "Name Required Description <code>form</code> - Custom form content (within the HTML <code>&lt;form&gt;</code> element <code>buttons</code> - Form submission buttons"
    },
    {
      "location": "plugins/development/templates/#context_1",
      "title": "Context",
      "text": "Name Required Description <code>object</code> Yes The object instance being modified (or none, if creating) <code>form</code> Yes The form class for creating/modifying the object <code>return_url</code> Yes The URL to which the user is redirect after submitting the form"
    },
    {
      "location": "plugins/development/templates/#object_deletehtml",
      "title": "object_delete.html",
      "text": "<p>Path: <code>generic/object_delete.html</code></p> <p>This template is used by the <code>ObjectDeleteView</code> generic view to delete a single object.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks_3",
      "title": "Blocks",
      "text": "<p>None</p>"
    },
    {
      "location": "plugins/development/templates/#context_2",
      "title": "Context",
      "text": "Name Required Description <code>object</code> Yes The object instance being deleted <code>form</code> Yes The form class for confirming the object's deletion <code>return_url</code> Yes The URL to which the user is redirect after submitting the form"
    },
    {
      "location": "plugins/development/templates/#object_listhtml",
      "title": "object_list.html",
      "text": "<p>Path: <code>generic/object_list.html</code></p> <p>This template is used by the <code>ObjectListView</code> generic view to display a filterable list of multiple objects.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks_4",
      "title": "Blocks",
      "text": "Name Required Description <code>extra_controls</code> - Additional action buttons <code>bulk_buttons</code> - Additional bulk action buttons to display beneath the objects list"
    },
    {
      "location": "plugins/development/templates/#context_3",
      "title": "Context",
      "text": "Name Required Description <code>model</code> Yes The object class <code>table</code> Yes The table class used for rendering the list of objects <code>permissions</code> Yes A mapping of add, change, and delete permissions for the current user <code>actions</code> Yes A list of buttons to display (<code>add</code>, <code>import</code>, <code>export</code>, <code>bulk_edit</code>, and/or <code>bulk_delete</code>) <code>filter_form</code> - The bound filterset form for filtering the objects list <code>return_url</code> - The return URL to pass when submitting a bulk operation form"
    },
    {
      "location": "plugins/development/templates/#bulk_importhtml",
      "title": "bulk_import.html",
      "text": "<p>Path: <code>generic/bulk_import.html</code></p> <p>This template is used by the <code>BulkImportView</code> generic view to import multiple objects at once from CSV data.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks_5",
      "title": "Blocks",
      "text": "<p>None</p>"
    },
    {
      "location": "plugins/development/templates/#context_4",
      "title": "Context",
      "text": "Name Required Description <code>model</code> Yes The object class <code>form</code> Yes The CSV import form class <code>return_url</code> - The return URL to pass when submitting a bulk operation form <code>fields</code> - A dictionary of form fields, to display import options"
    },
    {
      "location": "plugins/development/templates/#bulk_edithtml",
      "title": "bulk_edit.html",
      "text": "<p>Path: <code>generic/bulk_edit.html</code></p> <p>This template is used by the <code>BulkEditView</code> generic view to modify multiple objects simultaneously.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks_6",
      "title": "Blocks",
      "text": "<p>None</p>"
    },
    {
      "location": "plugins/development/templates/#context_5",
      "title": "Context",
      "text": "Name Required Description <code>model</code> Yes The object class <code>form</code> Yes The bulk edit form class <code>table</code> Yes The table class used for rendering the list of objects <code>return_url</code> Yes The URL to which the user is redirect after submitting the form"
    },
    {
      "location": "plugins/development/templates/#bulk_deletehtml",
      "title": "bulk_delete.html",
      "text": "<p>Path: <code>generic/bulk_delete.html</code></p> <p>This template is used by the <code>BulkDeleteView</code> generic view to delete multiple objects simultaneously.</p>"
    },
    {
      "location": "plugins/development/templates/#blocks_7",
      "title": "Blocks",
      "text": "Name Required Description <code>message_extra</code> - Supplementary warning message content"
    },
    {
      "location": "plugins/development/templates/#context_6",
      "title": "Context",
      "text": "Name Required Description <code>model</code> Yes The object class <code>form</code> Yes The bulk delete form class <code>table</code> Yes The table class used for rendering the list of objects <code>return_url</code> Yes The URL to which the user is redirect after submitting the form"
    },
    {
      "location": "plugins/development/templates/#tags",
      "title": "Tags",
      "text": "<p>The following custom template tags are available in NetBox.</p> <p>Info</p> <p>These are loaded automatically by the template backend: You do not need to include a <code>{% load %}</code> tag in your template to activate them.</p>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.tags.badge",
      "title": "<code>badge(value, bg_color=None, show_empty=False)</code>",
      "text": "<p>Display the specified number as a badge.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>The value to be displayed within the badge</p> required <code>bg_color</code> <p>Background color CSS name</p> <code>None</code> <code>show_empty</code> <p>If true, display the badge even if value is None or zero</p> <code>False</code>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.tags.checkmark",
      "title": "<code>checkmark(value, show_false=True, true='Yes', false='No')</code>",
      "text": "<p>Display either a green checkmark or red X to indicate a boolean value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>True or False</p> required <code>show_false</code> <p>Show false values</p> <code>True</code> <code>true</code> <p>Text label for true values</p> <code>'Yes'</code> <code>false</code> <p>Text label for false values</p> <code>'No'</code>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.tags.customfield_value",
      "title": "<code>customfield_value(customfield, value)</code>",
      "text": "<p>Render a custom field value according to the field type.</p> <p>Parameters:</p> Name Type Description Default <code>customfield</code> <p>A CustomField instance</p> required <code>value</code> <p>The custom field value applied to an object</p> required"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.tags.tag",
      "title": "<code>tag(value, viewname=None)</code>",
      "text": "<p>Display a tag, optionally linked to a filtered list of objects.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>A Tag instance</p> required <code>viewname</code> <p>If provided, the tag will be a hyperlink to the specified view's URL</p> <code>None</code>"
    },
    {
      "location": "plugins/development/templates/#filters",
      "title": "Filters",
      "text": "<p>The following custom template filters are available in NetBox.</p> <p>Info</p> <p>These are loaded automatically by the template backend: You do not need to include a <code>{% load %}</code> tag in your template to activate them.</p>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.bettertitle",
      "title": "<code>bettertitle(value)</code>",
      "text": "<p>Alternative to the builtin title(). Ensures that the first letter of each word is uppercase but retains the original case of all others.</p>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.content_type",
      "title": "<code>content_type(model)</code>",
      "text": "<p>Return the ContentType for the given object.</p>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.content_type_id",
      "title": "<code>content_type_id(model)</code>",
      "text": "<p>Return the ContentType ID for the given object.</p>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.linkify",
      "title": "<code>linkify(instance, attr=None)</code>",
      "text": "<p>Render a hyperlink for an object with a <code>get_absolute_url()</code> method, optionally specifying the name of an attribute to use for the link text. If no attribute is given, the object's string representation will be used.</p> <p>If the object has no <code>get_absolute_url()</code> method, return the text without a hyperlink element.</p>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.meta",
      "title": "<code>meta(model, attr)</code>",
      "text": "<p>Return the specified Meta attribute of a model. This is needed because Django does not permit templates to access attributes which begin with an underscore (e.g. _meta).</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <p>A Django model class or instance</p> required <code>attr</code> <p>The attribute name</p> required"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.placeholder",
      "title": "<code>placeholder(value)</code>",
      "text": "<p>Render a muted placeholder if the value equates to False.</p>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.render_json",
      "title": "<code>render_json(value)</code>",
      "text": "<p>Render a dictionary as formatted JSON. This filter is invoked as \"json\":</p> <pre><code>{{ data_dict|json }}\n</code></pre>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.render_markdown",
      "title": "<code>render_markdown(value)</code>",
      "text": "<p>Render a string as Markdown. This filter is invoked as \"markdown\":</p> <pre><code>{{ md_source_text|markdown }}\n</code></pre>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.render_yaml",
      "title": "<code>render_yaml(value)</code>",
      "text": "<p>Render a dictionary as formatted YAML. This filter is invoked as \"yaml\":</p> <pre><code>{{ data_dict|yaml }}\n</code></pre>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.split",
      "title": "<code>split(value, separator=',')</code>",
      "text": "<p>Wrapper for Python's <code>split()</code> string method.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>A string</p> required <code>separator</code> <p>String on which the value will be split</p> <code>','</code>"
    },
    {
      "location": "plugins/development/templates/#utilities.templatetags.builtins.filters.tzoffset",
      "title": "<code>tzoffset(value)</code>",
      "text": "<p>Returns the hour offset of a given time zone using the current time.</p>"
    },
    { "location": "plugins/development/views/", "title": "Views", "text": "" },
    {
      "location": "plugins/development/views/#writing-views",
      "title": "Writing Views",
      "text": "<p>If your plugin will provide its own page or pages within the NetBox web UI, you'll need to define views. A view is a piece of business logic which performs an action and/or renders a page when a request is made to a particular URL. HTML content is rendered using a template. Views are typically defined in <code>views.py</code>, and URL patterns in <code>urls.py</code>.</p> <p>As an example, let's write a view which displays a random animal and the sound it makes. We'll use Django's generic <code>View</code> class to minimize the amount of boilerplate code needed.</p> <pre><code>from django.shortcuts import render\nfrom django.views.generic import View\nfrom .models import Animal\n\nclass RandomAnimalView(View):\n    \"\"\"\n    Display a randomly-selected animal.\n    \"\"\"\n    def get(self, request):\n        animal = Animal.objects.order_by('?').first()\n        return render(request, 'netbox_animal_sounds/animal.html', {\n            'animal': animal,\n        })\n</code></pre> <p>This view retrieves a random Animal instance from the database and passes it as a context variable when rendering a template named <code>animal.html</code>. HTTP <code>GET</code> requests are handled by the view's <code>get()</code> method, and <code>POST</code> requests are handled by its <code>post()</code> method.</p> <p>Our example above is extremely simple, but views can do just about anything. They are generally where the core of your plugin's functionality will reside. Views also are not limited to returning HTML content: A view could return a CSV file or image, for instance. For more information on views, see the Django documentation.</p>"
    },
    {
      "location": "plugins/development/views/#url-registration",
      "title": "URL Registration",
      "text": "<p>To make the view accessible to users, we need to register a URL for it. We do this in <code>urls.py</code> by defining a <code>urlpatterns</code> variable containing a list of paths.</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\n</code></pre> <p>A URL pattern has three components:</p> <ul> <li><code>route</code> - The unique portion of the URL dedicated to this view</li> <li><code>view</code> - The view itself</li> <li><code>name</code> - A short name used to identify the URL path internally</li> </ul> <p>This makes our view accessible at the URL <code>/plugins/animal-sounds/random/</code>. (Remember, our <code>AnimalSoundsConfig</code> class sets our plugin's base URL to <code>animal-sounds</code>.) Viewing this URL should show the base NetBox template with our custom content inside it.</p>"
    },
    {
      "location": "plugins/development/views/#view-classes",
      "title": "View Classes",
      "text": "<p>NetBox provides several generic view classes (documented below) to facilitate common operations, such as creating, viewing, modifying, and deleting objects. Plugins can subclass these views for their own use.</p> View Class Description <code>ObjectView</code> View a single object <code>ObjectEditView</code> Create or edit a single object <code>ObjectDeleteView</code> Delete a single object <code>ObjectChildrenView</code> A list of child objects within the context of a parent <code>ObjectListView</code> View a list of objects <code>BulkImportView</code> Import a set of new objects <code>BulkEditView</code> Edit multiple objects <code>BulkDeleteView</code> Delete multiple objects <p>Warning</p> <p>Please note that only the classes which appear in this documentation are currently supported. Although other classes may be present within the <code>views.generic</code> module, they are not yet supported for use by plugins.</p>"
    },
    {
      "location": "plugins/development/views/#example-usage",
      "title": "Example Usage",
      "text": "<pre><code># views.py\nfrom netbox.views.generic import ObjectEditView\nfrom .models import Thing\n\nclass ThingEditView(ObjectEditView):\n    queryset = Thing.objects.all()\n    template_name = 'myplugin/thing.html'\n    ...\n</code></pre>"
    },
    {
      "location": "plugins/development/views/#object-views",
      "title": "Object Views",
      "text": "<p>Below are the class definitions for NetBox's object views. These views handle CRUD actions for individual objects. The view, add/edit, and delete views each inherit from <code>BaseObjectView</code>, which is not intended to be used directly.</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.base.BaseObjectView",
      "title": "<code>BaseObjectView</code>",
      "text": "<p>               Bases: <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Base class for generic views which display or manipulate a single object.</p> <p>Attributes:</p> Name Type Description <code>queryset</code> <p>Django QuerySet from which the object(s) will be fetched</p> <code>template_name</code> <p>The name of the HTML template file to render</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.base.BaseObjectView.get_queryset",
      "title": "<code>get_queryset(request)</code>",
      "text": "<p>Return the base queryset for the view. By default, this returns <code>self.queryset.all()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The current request</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.base.BaseObjectView.get_object",
      "title": "<code>get_object(**kwargs)</code>",
      "text": "<p>Return the object being viewed or modified. The object is identified by an arbitrary set of keyword arguments gleaned from the URL, which are passed to <code>get_object_or_404()</code>. (Typically, only a primary key is needed.)</p> <p>If no matching object is found, return a 404 response.</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.base.BaseObjectView.get_extra_context",
      "title": "<code>get_extra_context(request, instance)</code>",
      "text": "<p>Return any additional context data to include when rendering the template.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The current request</p> required <code>instance</code> <p>The object being viewed</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectView",
      "title": "<code>ObjectView</code>",
      "text": "<p>               Bases: <code>BaseObjectView</code></p> <p>Retrieve a single object for display.</p> <p>Note: If <code>template_name</code> is not specified, it will be determined automatically based on the queryset model.</p> <p>Attributes:</p> Name Type Description <code>tab</code> <p>A ViewTab instance for the view</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectView.get_template_name",
      "title": "<code>get_template_name()</code>",
      "text": "<p>Return self.template_name if defined. Otherwise, dynamically resolve the template name using the queryset model's <code>app_label</code> and <code>model_name</code>.</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectEditView",
      "title": "<code>ObjectEditView</code>",
      "text": "<p>               Bases: <code>GetReturnURLMixin</code>, <code>BaseObjectView</code></p> <p>Create or edit a single object.</p> <p>Attributes:</p> Name Type Description <code>form</code> <p>The form used to create or edit the object</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectEditView.alter_object",
      "title": "<code>alter_object(obj, request, url_args, url_kwargs)</code>",
      "text": "<p>Provides a hook for views to modify an object before it is processed. For example, a parent object can be defined given some parameter from the request URL.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <p>The object being edited</p> required <code>request</code> <p>The current request</p> required <code>url_args</code> <p>URL path args</p> required <code>url_kwargs</code> <p>URL path kwargs</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectDeleteView",
      "title": "<code>ObjectDeleteView</code>",
      "text": "<p>               Bases: <code>GetReturnURLMixin</code>, <code>BaseObjectView</code></p> <p>Delete a single object.</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectChildrenView",
      "title": "<code>ObjectChildrenView</code>",
      "text": "<p>               Bases: <code>ObjectView</code>, <code>ActionsMixin</code>, <code>TableMixin</code></p> <p>Display a table of child objects associated with the parent object. For example, NetBox uses this to display the set of child IP addresses within a parent prefix.</p> <p>Attributes:</p> Name Type Description <code>child_model</code> <p>The model class which represents the child objects</p> <code>table</code> <p>The django-tables2 Table class used to render the child objects list</p> <code>filterset</code> <p>A django-filter FilterSet that is applied to the queryset</p> <code>filterset_form</code> <p>The form class used to render filter options</p> <code>actions</code> <p>A mapping of supported actions to their required permissions. When adding custom actions, bulk action names must be prefixed with <code>bulk_</code>. (See ActionsMixin.)</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectChildrenView.get_children",
      "title": "<code>get_children(request, parent)</code>",
      "text": "<p>Return a QuerySet of child objects.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The current request</p> required <code>parent</code> <p>The parent object</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectChildrenView.prep_table_data",
      "title": "<code>prep_table_data(request, queryset, parent)</code>",
      "text": "<p>Provides a hook for subclassed views to modify data before initializing the table.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The current request</p> required <code>queryset</code> <p>The filtered queryset of child objects</p> required <code>parent</code> <p>The parent object</p> required"
    },
    {
      "location": "plugins/development/views/#multi-object-views",
      "title": "Multi-Object Views",
      "text": "<p>Below are the class definitions for NetBox's multi-object views. These views handle simultaneous actions for sets objects. The list, import, edit, and delete views each inherit from <code>BaseMultiObjectView</code>, which is not intended to be used directly.</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.base.BaseMultiObjectView",
      "title": "<code>BaseMultiObjectView</code>",
      "text": "<p>               Bases: <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Base class for generic views which display or manipulate multiple objects.</p> <p>Attributes:</p> Name Type Description <code>queryset</code> <p>Django QuerySet from which the object(s) will be fetched</p> <code>table</code> <p>The django-tables2 Table class used to render the objects list</p> <code>template_name</code> <p>The name of the HTML template file to render</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.base.BaseMultiObjectView.get_queryset",
      "title": "<code>get_queryset(request)</code>",
      "text": "<p>Return the base queryset for the view. By default, this returns <code>self.queryset.all()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The current request</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.base.BaseMultiObjectView.get_extra_context",
      "title": "<code>get_extra_context(request)</code>",
      "text": "<p>Return any additional context data to include when rendering the template.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <p>The current request</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectListView",
      "title": "<code>ObjectListView</code>",
      "text": "<p>               Bases: <code>BaseMultiObjectView</code>, <code>ActionsMixin</code>, <code>TableMixin</code></p> <p>Display multiple objects, all the same type, as a table.</p> <p>Attributes:</p> Name Type Description <code>filterset</code> <p>A django-filter FilterSet that is applied to the queryset</p> <code>filterset_form</code> <p>The form class used to render filter options</p> <code>actions</code> <p>A mapping of supported actions to their required permissions. When adding custom actions, bulk action names must be prefixed with <code>bulk_</code>. (See ActionsMixin.)</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectListView.export_table",
      "title": "<code>export_table(table, columns=None, filename=None)</code>",
      "text": "<p>Export all table data in CSV format.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <p>The Table instance to export</p> required <code>columns</code> <p>A list of specific columns to include. If None, all columns will be exported.</p> <code>None</code> <code>filename</code> <p>The name of the file attachment sent to the client. If None, will be determined automatically from the queryset model name.</p> <code>None</code>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectListView.export_template",
      "title": "<code>export_template(template, request)</code>",
      "text": "<p>Render an ExportTemplate using the current queryset.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <p>ExportTemplate instance</p> required <code>request</code> <p>The current request</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.BulkImportView",
      "title": "<code>BulkImportView</code>",
      "text": "<p>               Bases: <code>GetReturnURLMixin</code>, <code>BaseMultiObjectView</code></p> <p>Import objects in bulk (CSV format).</p> <p>Attributes:</p> Name Type Description <code>model_form</code> <p>The form used to create each imported object</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.BulkImportView.save_object",
      "title": "<code>save_object(object_form, request)</code>",
      "text": "<p>Provide a hook to modify the object immediately before saving it (e.g. to encrypt secret data).</p> <p>Parameters:</p> Name Type Description Default <code>object_form</code> <p>The model form instance</p> required <code>request</code> <p>The current request</p> required"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.BulkEditView",
      "title": "<code>BulkEditView</code>",
      "text": "<p>               Bases: <code>GetReturnURLMixin</code>, <code>BaseMultiObjectView</code></p> <p>Edit objects in bulk.</p> <p>Attributes:</p> Name Type Description <code>filterset</code> <p>FilterSet to apply when deleting by QuerySet</p> <code>form</code> <p>The form class used to edit objects in bulk</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.BulkDeleteView",
      "title": "<code>BulkDeleteView</code>",
      "text": "<p>               Bases: <code>GetReturnURLMixin</code>, <code>BaseMultiObjectView</code></p> <p>Delete objects in bulk.</p> <p>Attributes:</p> Name Type Description <code>filterset</code> <p>FilterSet to apply when deleting by QuerySet</p> <code>table</code> <p>The table used to display devices being deleted</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.BulkDeleteView.get_form",
      "title": "<code>get_form()</code>",
      "text": "<p>Provide a standard bulk delete form if none has been specified for the view</p>"
    },
    {
      "location": "plugins/development/views/#feature-views",
      "title": "Feature Views",
      "text": "<p>These views are provided to enable or enhance certain NetBox model features, such as change logging or journaling. These typically do not need to be subclassed: They can be used directly e.g. in a URL path.</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectChangeLogView",
      "title": "<code>ObjectChangeLogView</code>",
      "text": "<p>               Bases: <code>ConditionalLoginRequiredMixin</code>, <code>View</code></p> <p>Present a history of changes made to a particular object. The model class must be passed as a keyword argument when referencing this view in a URL path. For example:</p> <pre><code>path('sites/&lt;int:pk&gt;/changelog/', ObjectChangeLogView.as_view(), name='site_changelog', kwargs={'model': Site}),\n</code></pre> <p>Attributes:</p> Name Type Description <code>base_template</code> <p>The name of the template to extend. If not provided, \"{app}/{model}.html\" will be used.</p>"
    },
    {
      "location": "plugins/development/views/#netbox.views.generic.ObjectJournalView",
      "title": "<code>ObjectJournalView</code>",
      "text": "<p>               Bases: <code>ConditionalLoginRequiredMixin</code>, <code>View</code></p> <p>Show all journal entries for an object. The model class must be passed as a keyword argument when referencing this view in a URL path. For example:</p> <pre><code>path('sites/&lt;int:pk&gt;/journal/', ObjectJournalView.as_view(), name='site_journal', kwargs={'model': Site}),\n</code></pre> <p>Attributes:</p> Name Type Description <code>base_template</code> <p>The name of the template to extend. If not provided, \"{app}/{model}.html\" will be used.</p>"
    },
    {
      "location": "plugins/development/views/#extending-core-views",
      "title": "Extending Core Views",
      "text": ""
    },
    {
      "location": "plugins/development/views/#additional-tabs",
      "title": "Additional Tabs",
      "text": "<p>Plugins can \"attach\" a custom view to a core NetBox model by registering it with <code>register_model_view()</code>. To include a tab for this view within the NetBox UI, declare a TabView instance named <code>tab</code>, and add it to the template context dict:</p> <pre><code>from dcim.models import Site\nfrom myplugin.models import Stuff\nfrom netbox.views import generic\nfrom utilities.views import ViewTab, register_model_view\n\n@register_model_view(Site, name='myview', path='some-other-stuff')\nclass MyView(generic.ObjectView):\n    ...\n    tab = ViewTab(\n        label='Other Stuff',\n        badge=lambda obj: Stuff.objects.filter(site=obj).count(),\n        permission='myplugin.view_stuff'\n    )\n\n    def get(self, request, pk):\n        ...\n        return render(\n            request,\n            \"myplugin/mytabview.html\",\n            context={\n                \"tab\": self.tab,\n            },\n        )\n</code></pre> <p>Changed in NetBox v4.2</p> <p>The <code>register_model_view()</code> function was extended in NetBox v4.2 to support registration of list views by passing <code>detail=False</code>.</p>"
    },
    {
      "location": "plugins/development/views/#utilities.views.register_model_view",
      "title": "<code>register_model_view(model, name='', path=None, detail=True, kwargs=None)</code>",
      "text": "<p>This decorator can be used to \"attach\" a view to any model in NetBox. This is typically used to inject additional tabs within a model's detail view. For example, to add a custom tab to NetBox's dcim.Site model:</p> <pre><code>@register_model_view(Site, 'myview', path='my-custom-view')\nclass MyView(ObjectView):\n    ...\n</code></pre> <p>This will automatically create a URL path for MyView at <code>/dcim/sites/&lt;id&gt;/my-custom-view/</code> which can be resolved using the view name `dcim:site_myview'.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <p>The Django model class with which this view will be associated.</p> required <code>name</code> <p>The string used to form the view's name for URL resolution (e.g. via <code>reverse()</code>). This will be appended to the name of the base view for the model using an underscore. If blank, the model name will be used.</p> <code>''</code> <code>path</code> <p>The URL path by which the view can be reached (optional). If not provided, <code>name</code> will be used.</p> <code>None</code> <code>detail</code> <p>True if the path applied to an individual object; False if it attaches to the base (list) path.</p> <code>True</code> <code>kwargs</code> <p>A dictionary of keyword arguments for the view to include when registering its URL path (optional).</p> <code>None</code>"
    },
    {
      "location": "plugins/development/views/#utilities.views.ViewTab",
      "title": "<code>ViewTab</code>",
      "text": "<p>ViewTabs are used for navigation among multiple object-specific views, such as the changelog or journal for a particular object.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <p>Human-friendly text</p> required <code>badge</code> <p>A static value or callable to display alongside the label (optional). If a callable is used, it must accept a single argument representing the object being viewed.</p> <code>None</code> <code>weight</code> <p>Numeric weight to influence ordering among other tabs (default: 1000)</p> <code>1000</code> <code>permission</code> <p>The permission required to display the tab (optional).</p> <code>None</code> <code>hide_if_empty</code> <p>If true, the tab will be displayed only if its badge has a meaningful value. (Tabs without a badge are always displayed.)</p> <code>False</code>"
    },
    {
      "location": "plugins/development/views/#utilities.views.ViewTab.render",
      "title": "<code>render(instance)</code>",
      "text": "<p>Return the attributes needed to render a tab in HTML.</p>"
    },
    {
      "location": "plugins/development/views/#extra-template-content",
      "title": "Extra Template Content",
      "text": "<p>Plugins can inject custom content into certain areas of core NetBox views. This is accomplished by subclassing <code>PluginTemplateExtension</code>, optionally designating one or more particular NetBox models, and defining the desired method(s) to render custom content. Five methods are available:</p> Method View Description <code>navbar()</code> All Inject content inside the top navigation bar <code>list_buttons()</code> List view Add buttons to the top of the page <code>buttons()</code> Object view Add buttons to the top of the page <code>alerts()</code> Object view Inject content at the top of the page <code>left_page()</code> Object view Inject content on the left side of the page <code>right_page()</code> Object view Inject content on the right side of the page <code>full_width_page()</code> Object view Inject content across the entire bottom of the page <p>Additionally, a <code>render()</code> method is available for convenience. This method accepts the name of a template to render, and any additional context data you want to pass. Its use is optional, however.</p> <p>To control where the custom content is injected, plugin authors can specify an iterable of models by overriding the <code>models</code> attribute on the subclass. Extensions which do not specify a set of models will be invoked on every view, where supported.</p> <p>When a PluginTemplateExtension is instantiated, context data is assigned to <code>self.context</code>. Available data includes:</p> <ul> <li><code>object</code> - The object being viewed (object views only)</li> <li><code>model</code> - The model of the list view (list views only)</li> <li><code>request</code> - The current request</li> <li><code>settings</code> - Global NetBox settings</li> <li><code>config</code> - Plugin-specific configuration parameters</li> </ul> <p>For example, accessing <code>{{ request.user }}</code> within a template will return the current user.</p> <p>Declared subclasses should be gathered into a list or tuple for integration with NetBox. By default, NetBox looks for an iterable named <code>template_extensions</code> within a <code>template_content.py</code> file. (This can be overridden by setting <code>template_extensions</code> to a custom value on the plugin's PluginConfig.) An example is below.</p> <pre><code>from netbox.plugins import PluginTemplateExtension\nfrom .models import Animal\n\nclass SiteAnimalCount(PluginTemplateExtension):\n    models = ['dcim.site']\n\n    def right_page(self):\n        return self.render('netbox_animal_sounds/inc/animal_count.html', extra_context={\n            'animal_count': Animal.objects.count(),\n        })\n\ntemplate_extensions = [SiteAnimalCount]\n</code></pre>"
    },
    {
      "location": "reference/conditions/",
      "title": "Conditions",
      "text": "<p>Conditions are NetBox's mechanism for evaluating whether a set data meets a prescribed set of conditions. It allows the author to convey simple logic by declaring an arbitrary number of attribute-value-operation tuples nested within a hierarchy of logical AND and OR statements.</p>"
    },
    {
      "location": "reference/conditions/#conditions_1",
      "title": "Conditions",
      "text": "<p>A condition is expressed as a JSON object with the following keys:</p> Key name Required Default Description attr Yes - Name of the key within the data being evaluated value Yes - The reference value to which the given data will be compared op No <code>eq</code> The logical operation to be performed negate No False Negate (invert) the result of the condition's evaluation"
    },
    {
      "location": "reference/conditions/#available-operations",
      "title": "Available Operations",
      "text": "<ul> <li><code>eq</code>: Equals</li> <li><code>gt</code>: Greater than</li> <li><code>gte</code>: Greater than or equal to</li> <li><code>lt</code>: Less than</li> <li><code>lte</code>: Less than or equal to</li> <li><code>in</code>: Is present within a list of values</li> <li><code>contains</code>: Contains the specified value</li> </ul>"
    },
    {
      "location": "reference/conditions/#accessing-nested-keys",
      "title": "Accessing Nested Keys",
      "text": "<p>To access nested keys, use dots to denote the path to the desired attribute. For example, assume the following data:</p> <pre><code>{\n  \"a\": {\n    \"b\": {\n      \"c\": 123\n    }\n  }\n}\n</code></pre> <p>The following condition will evaluate as true:</p> <pre><code>{\n  \"attr\": \"a.b.c\",\n  \"value\": 123\n}\n</code></pre>"
    },
    {
      "location": "reference/conditions/#examples",
      "title": "Examples",
      "text": "<p><code>name</code> equals \"foo\":</p> <pre><code>{\n  \"attr\": \"name\",\n  \"value\": \"foo\"\n}\n</code></pre> <p><code>name</code> does not equal \"foo\"</p> <pre><code>{\n  \"attr\": \"name\",\n  \"value\": \"foo\",\n  \"negate\": true\n}\n</code></pre> <p><code>asn</code> is greater than 65000:</p> <pre><code>{\n  \"attr\": \"asn\",\n  \"value\": 65000,\n  \"op\": \"gt\"\n}\n</code></pre> <p><code>status</code> is not \"planned\" or \"staging\":</p> <pre><code>{\n  \"attr\": \"status.value\",\n  \"value\": [\"planned\", \"staging\"],\n  \"op\": \"in\",\n  \"negate\": true\n}\n</code></pre> <p>Evaluating static choice fields</p> <p>Pay close attention when evaluating static choice fields, such as the <code>status</code> field above. These fields typically render as a dictionary specifying both the field's raw value (<code>value</code>) and its human-friendly label (<code>label</code>). be sure to specify on which of these you want to match.</p>"
    },
    {
      "location": "reference/conditions/#condition-sets",
      "title": "Condition Sets",
      "text": "<p>Multiple conditions can be combined into nested sets using AND or OR logic. This is done by declaring a JSON object with a single key (<code>and</code> or <code>or</code>) containing a list of condition objects and/or child condition sets.</p>"
    },
    {
      "location": "reference/conditions/#examples_1",
      "title": "Examples",
      "text": "<p><code>status</code> is \"active\" and <code>primary_ip4</code> is defined or the \"exempt\" tag is applied.</p> <pre><code>{\n  \"or\": [\n    {\n      \"and\": [\n        {\n          \"attr\": \"status.value\",\n          \"value\": \"active\"\n        },\n        {\n          \"attr\": \"primary_ip4\",\n          \"value\": null,\n          \"negate\": true\n        }\n      ]\n    },\n    {\n      \"attr\": \"tags.slug\",\n      \"value\": \"exempt\",\n      \"op\": \"contains\"\n    }\n  ]\n}\n</code></pre>"
    },
    {
      "location": "reference/filtering/",
      "title": "REST API Filtering",
      "text": ""
    },
    {
      "location": "reference/filtering/#filtering-objects",
      "title": "Filtering Objects",
      "text": "<p>The objects returned by an API list endpoint can be filtered by attaching one or more query parameters to the request URL. For example, <code>GET /api/dcim/sites/?status=active</code> will return only sites with a status of \"active.\"</p> <p>Multiple parameters can be joined to further narrow results. For example, <code>GET /api/dcim/sites/?status=active&amp;region=europe</code> will return only active sites within the Europe region.</p> <p>Generally, passing multiple values for a single parameter will result in a logical OR operation. For example, <code>GET /api/dcim/sites/?region=north-america&amp;region=south-america</code> will return sites in North America or South America. However, a logical AND operation will be used in instances where a field may have multiple values, such as tags. For example, <code>GET /api/dcim/sites/?tag=foo&amp;tag=bar</code> will return only sites which have both the \"foo\" and \"bar\" tags applied.</p>"
    },
    {
      "location": "reference/filtering/#filtering-by-choice-field",
      "title": "Filtering by Choice Field",
      "text": "<p>Some models have fields which are limited to specific choices, such as the <code>status</code> field on the Prefix model. To find all available choices for this field, make an authenticated <code>OPTIONS</code> request to the model's list endpoint, and use <code>jq</code> to extract the relevant parameters:</p> <pre><code>$ curl -s -X OPTIONS \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ | jq \".actions.POST.status.choices\"\n[\n  {\n    \"value\": \"container\",\n    \"display_name\": \"Container\"\n  },\n  {\n    \"value\": \"active\",\n    \"display_name\": \"Active\"\n  },\n  {\n    \"value\": \"reserved\",\n    \"display_name\": \"Reserved\"\n  },\n  {\n    \"value\": \"deprecated\",\n    \"display_name\": \"Deprecated\"\n  }\n]\n</code></pre> <p>Note</p> <p>The above works only if the API token used to authenticate the request has permission to make a <code>POST</code> request to this endpoint.</p>"
    },
    {
      "location": "reference/filtering/#filtering-by-custom-field",
      "title": "Filtering by Custom Field",
      "text": "<p>To filter results by a custom field value, prepend <code>cf_</code> to the custom field name. For example, the following query will return only sites where a custom field named <code>foo</code> is equal to 123:</p> <pre><code>GET /api/dcim/sites/?cf_foo=123\n</code></pre> <p>Custom fields can be mixed with built-in fields to further narrow results. When creating a custom string field, the type of filtering selected (loose versus exact) determines whether partial or full matching is used.</p>"
    },
    {
      "location": "reference/filtering/#lookup-expressions",
      "title": "Lookup Expressions",
      "text": "<p>Certain model fields also support filtering using additional lookup expressions. This allows for negation and other context-specific filtering.</p> <p>These lookup expressions can be applied by adding a suffix to the desired field's name, e.g. <code>mac_address__n</code>. In this case, the filter expression is for negation and it is separated by two underscores. Below are the lookup expressions that are supported across different field types.</p>"
    },
    {
      "location": "reference/filtering/#numeric-fields",
      "title": "Numeric Fields",
      "text": "<p>Numeric based fields (ASN, VLAN ID, etc) support these lookup expressions:</p> Filter Description <code>n</code> Not equal to <code>lt</code> Less than <code>lte</code> Less than or equal to <code>gt</code> Greater than <code>gte</code> Greater than or equal to <code>empty</code> Is empty/null (boolean) <p>Here is an example of a numeric field lookup expression that will return all VLANs with a VLAN ID greater than 900:</p> <pre><code>GET /api/ipam/vlans/?vid__gt=900\n</code></pre>"
    },
    {
      "location": "reference/filtering/#string-fields",
      "title": "String Fields",
      "text": "<p>String based (char) fields (Name, Address, etc) support these lookup expressions:</p> Filter Description <code>n</code> Not equal to <code>ic</code> Contains (case-insensitive) <code>nic</code> Does not contain (case-insensitive) <code>isw</code> Starts with (case-insensitive) <code>nisw</code> Does not start with (case-insensitive) <code>iew</code> Ends with (case-insensitive) <code>niew</code> Does not end with (case-insensitive) <code>ie</code> Exact match (case-insensitive) <code>nie</code> Inverse exact match (case-insensitive) <code>empty</code> Is empty/null (boolean) <p>Here is an example of a lookup expression on a string field that will return all devices with <code>switch</code> in the name:</p> <pre><code>GET /api/dcim/devices/?name__ic=switch\n</code></pre>"
    },
    {
      "location": "reference/filtering/#foreign-keys-other-fields",
      "title": "Foreign Keys &amp; Other Fields",
      "text": "<p>Certain other fields, namely foreign key relationships support just the negation expression: <code>n</code>. Here is an example of a lookup expression on a foreign key, it would return all the VLANs that don't have a VLAN Group ID of 3203:</p> <pre><code>GET /api/ipam/vlans/?group_id__n=3203\n</code></pre>"
    },
    {
      "location": "reference/filtering/#ordering-objects",
      "title": "Ordering Objects",
      "text": "<p>To order results by a particular field, include the <code>ordering</code> query parameter. For example, order the list of sites according to their facility values:</p> <pre><code>GET /api/dcim/sites/?ordering=facility\n</code></pre> <p>To invert the ordering, prepend a hyphen to the field name:</p> <pre><code>GET /api/dcim/sites/?ordering=-facility\n</code></pre> <p>Multiple fields can be specified by separating the field names with a comma. For example:</p> <pre><code>GET /api/dcim/sites/?ordering=facility,-name\n</code></pre>"
    },
    {
      "location": "reference/markdown/",
      "title": "Markdown",
      "text": "<p>NetBox supports Markdown rendering for certain text fields. Some common examples are provided below. For a complete Markdown reference, please see Markdownguide.org.</p>"
    },
    {
      "location": "reference/markdown/#headings",
      "title": "HeadingsHeading 2Heading 2",
      "text": "<pre><code># Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n</code></pre> Heading 1 Heading 3 Heading 4 Heading 5 Heading 6 <p>Alternatively, for H1 and H2, an underline-ish style:</p> <pre><code>Heading 1\n=========\n\nHeading 2\n---------\n</code></pre> Heading 1"
    },
    {
      "location": "reference/markdown/#text",
      "title": "Text",
      "text": "<pre><code>Italicize text with *asterisks* or _underscores_.\n</code></pre> <p>Italicize text with asterisks or underscores.</p> <pre><code>Bold text with two **asterisks** or __underscores__.\n</code></pre> <p>Bold text with two asterisks or underscores.</p> <pre><code>Strike text with two tildes. ~~Deleted text.~~\n</code></pre> <p>Strike text with two tildes. ~~Deleted text.~~</p>"
    },
    {
      "location": "reference/markdown/#line-breaks",
      "title": "Line Breaks",
      "text": "<p>By default, Markdown will remove line breaks between successive lines of text. For example:</p> <pre><code>This is one line.\nAnd this is another line.\nOne more line here.\n</code></pre> <p>This is one line. And this is another line. One more line here.</p> <p>To preserve line breaks, append two spaces to each line (represented below with the <code>\u22c5</code> character).</p> <pre><code>This is one line.\u22c5\u22c5\nAnd this is another line.\u22c5\u22c5\nOne more line here.\n</code></pre> <p>This is one line. And this is another line. One more line here.</p>"
    },
    {
      "location": "reference/markdown/#lists",
      "title": "Lists",
      "text": "<p>Use asterisks or hyphens for unordered lists. Indent items by four spaces to start a child list.</p> <pre><code>* Alpha\n* Bravo\n* Charlie\n  * Child item 1\n  * Child item 2\n* Delta\n</code></pre> <ul> <li>Alpha</li> <li>Bravo</li> <li>Charlie<ul> <li>Child item 1</li> <li>Child item 2</li> </ul> </li> <li>Delta</li> </ul> <p>Use digits followed by periods for ordered (numbered) lists.</p> <pre><code>1. Red\n2. Green\n3. Blue\n    1. Light blue\n    2. Dark blue\n4. Orange\n</code></pre> <ol> <li>Red</li> <li>Green</li> <li>Blue<ol> <li>Light blue</li> <li>Dark blue</li> </ol> </li> <li>Orange</li> </ol>"
    },
    {
      "location": "reference/markdown/#links",
      "title": "Links",
      "text": "<p>Text can be rendered as a hyperlink by encasing it in square brackets, followed by a URL in parentheses. A title (text displayed on hover) may optionally be included as well.</p> <pre><code>Here's an [example](https://www.example.com) of a link.\n\nAnd here's [another link](https://www.example.com \"Click me!\"), this time with a title.\n</code></pre> <p>Here's an example of a link.</p> <p>And here's another link, with a title.</p>"
    },
    {
      "location": "reference/markdown/#images",
      "title": "Images",
      "text": "<p>The syntax for embedding an image is very similar to that used for a hyperlink. Alternate text should always be provided; this will be displayed if the image fails to load. As with hyperlinks, title text is optional.</p> <pre><code>![Alternate text](/path/to/image.png \"Image title text\")\n</code></pre>"
    },
    {
      "location": "reference/markdown/#code-blocks",
      "title": "Code Blocks",
      "text": "<p>Single backticks can be used to annotate code inline. Text enclosed by lines of three backticks will be displayed as a code block.</p> <pre><code>Paragraphs are rendered in HTML using `&lt;p&gt;` and `&lt;/p&gt;` tags.\n</code></pre> <p>Paragraphs are rendered in HTML using <code>&lt;p&gt;</code> and <code>&lt;/p&gt;</code> tags.</p> <pre><code>```\ndef my_func(foo, bar):\n    # Do something\n    return foo * bar\n```\n</code></pre> <pre><code>def my_func(foo, bar):\n    # Do something\n    return foo * bar\n</code></pre>"
    },
    {
      "location": "reference/markdown/#tables",
      "title": "Tables",
      "text": "<p>Simple tables can be constructed using the pipe character (<code>|</code>) to denote columns, and hyphens (<code>-</code>) to denote the heading. Inline Markdown can be used to style text within columns.</p> <pre><code>| Heading 1 | Heading 2 | Heading 3 |\n|-----------|-----------|-----------|\n| Row 1     | Alpha     | Red       |\n| Row 2     | **Bravo** | Green     |\n| Row 3     | Charlie   | ~~Blue~~  |\n</code></pre> Heading 1 Heading 2 Heading 3 Row 1 Alpha Red Row 2 Bravo Green Row 3 Charlie ~~Blue~~ <p>Colons can be used to align text to the left or right side of a column.</p> <pre><code>| Left-aligned | Centered | Right-aligned |\n|:-------------|:--------:|--------------:|\n| Text         | Text     | Text          |\n| Text         | Text     | Text          |\n| Text         | Text     | Text          |\n</code></pre> Left-aligned Centered Right-aligned Text Text Text Text Text Text Text Text Text"
    },
    {
      "location": "reference/markdown/#blockquotes",
      "title": "Blockquotes",
      "text": "<p>Text can be wrapped in a blockquote by prepending a right angle bracket (<code>&gt;</code>) before each line.</p> <pre><code>&gt; I think that I shall never see\n&gt; a graph more lovely than a tree.\n&gt; A tree whose crucial property\n&gt; is loop-free connectivity.\n</code></pre> <p>I think that I shall never see a graph more lovely than a tree. A tree whose crucial property is loop-free connectivity.</p> <p>Markdown removes line breaks by default. To preserve line breaks, append two spaces to each line (represented below with the <code>\u22c5</code> character).</p> <pre><code>&gt; I think that I shall never see\u22c5\u22c5\n&gt; a graph more lovely than a tree.\u22c5\u22c5\n&gt; A tree whose crucial property\u22c5\u22c5\n&gt; is loop-free connectivity.\n</code></pre> <p>I think that I shall never see a graph more lovely than a tree. A tree whose crucial property is loop-free connectivity.</p>"
    },
    {
      "location": "reference/markdown/#horizontal-rule",
      "title": "Horizontal Rule",
      "text": "<p>A horizontal rule is a single line rendered across the width of the page using a series of three or more hyphens or asterisks. It can be useful for separating sections of content.</p> <pre><code>Content\n\n---\n\nMore content\n\n***\n\nFinal content\n</code></pre> <p>Content</p> <p>More content</p> <p>Final content</p>"
    },
    {
      "location": "release-notes/",
      "title": "Release Notes",
      "text": "<p>NetBox releases are numbered as major, minor, and patch releases. For example, version 3.1.0 is a minor release, and v3.1.5 is a patch release. Briefly, these can be described as follows:</p> <ul> <li>Major - Introduces or removes an entire API or other core functionality</li> <li>Minor - Implements major new features but may include breaking changes for API consumers or other integrations</li> <li>Patch - A maintenance release which fixes bugs and may introduce backward-compatible enhancements</li> </ul> <p>Minor releases are published in April, August, and December of each calendar year. Patch releases are published as needed to address bugs and fulfill minor feature requests, typically around every one to two weeks.</p> <p>This page contains a history of all major and minor releases since NetBox v2.0. For more detail on a specific patch release, please see the release notes page for that specific minor release.</p>"
    },
    {
      "location": "release-notes/#version-42-january-2025",
      "title": "Version 4.2 (January 2025)",
      "text": "<ul> <li>Assign Multiple MAC Addresses per Interface (#4867)</li> <li>Quick Add UI Widget (#5858)</li> <li>VLAN Translation (#7336)</li> <li>Virtual Circuits (#13086)</li> <li>Q-in-Q Encapsulation (#13428)</li> </ul>"
    },
    {
      "location": "release-notes/#version-41-september-2024",
      "title": "Version 4.1 (September 2024)",
      "text": "<ul> <li>Circuit Groups (#7025)</li> <li>VLAN Group ID Ranges (#9627)</li> <li>Nested Device Modules (#10500)</li> <li>Rack Types (#12826)</li> <li>Plugins Catalog Integration (#14731)</li> <li>User Notifications (#15621)</li> </ul>"
    },
    {
      "location": "release-notes/#version-40-april-2024",
      "title": "Version 4.0 (April 2024)",
      "text": "<ul> <li>Complete UI Refresh (#12128)</li> <li>Dynamic REST API Fields (#15087)</li> <li>Strawberry GraphQL Engine (#9856)</li> <li>Advanced Form Rendering Functionality (#14739)</li> <li>Legacy Admin UI Disabled (#12325)</li> </ul>"
    },
    {
      "location": "release-notes/#version-37-december-2023",
      "title": "Version 3.7 (December 2023)",
      "text": "<ul> <li>VPN Tunnels (#9816)</li> <li>Event Rules (#14132)</li> <li>Virtual Machine Disks (#8356)</li> <li>Object Protection Rules (#10244)</li> <li>Improved Custom Field Visibility Controls (#13299)</li> <li>Improved Global Search Results (#14134)</li> <li>Table Column Registration for Plugins (#14173)</li> <li>Data Backend Registration for Plugins (#13381)</li> </ul>"
    },
    {
      "location": "release-notes/#version-36-august-2023",
      "title": "Version 3.6 (August 2023)",
      "text": "<ul> <li>Relocated Admin UI Views (#12589, #12590, #12591, #13044)</li> <li>Configurable Default Permissions (#13038)</li> <li>User Bookmarks (#8248)</li> <li>Custom Field Choice Sets (#12988)</li> <li>Pre-Defined Location Choices for Custom Fields (#12194)</li> <li>Restrict Tag Usage by Object Type (#11541)</li> </ul>"
    },
    {
      "location": "release-notes/#version-35-april-2023",
      "title": "Version 3.5 (April 2023)",
      "text": "<ul> <li>Customizable Dashboard (#9416)</li> <li>Remote Data Sources (#11558)</li> <li>Configuration Template Rendering (#11559)</li> <li>NAPALM Integration Plugin (#10520)</li> <li>ASN Ranges (#8550)</li> <li>Provider Accounts (#9047)</li> <li>Job-Triggered Webhooks  (#8958)</li> </ul>"
    },
    {
      "location": "release-notes/#version-34-december-2022",
      "title": "Version 3.4 (December 2022)",
      "text": "<ul> <li>New Global Search (#10560)</li> <li>Virtual Device Contexts (#7854)</li> <li>Saved Filters (#9623)</li> <li>JSON/YAML Bulk Imports (#4347)</li> <li>Update Existing Objects via Bulk Import (#7961)</li> <li>Scheduled Reports &amp; Scripts (#8366)</li> <li>API for Staged Changes (#10851)</li> </ul>"
    },
    {
      "location": "release-notes/#version-33-august-2022",
      "title": "Version 3.3 (August 2022)",
      "text": "<ul> <li>Multi-object Cable Terminations (#9102)</li> <li>L2VPN Modeling (#8157)</li> <li>PoE Interface Attributes (#1099)</li> <li>Half-Height Rack Units (#51)</li> <li>Restrict API Tokens by Client IP (#8233)</li> <li>Reference User in Permission Constraints (#9074)</li> <li>Custom Field Grouping (#8495)</li> <li>Toggle Custom Field Visibility (#9166)</li> </ul>"
    },
    {
      "location": "release-notes/#version-32-april-2022",
      "title": "Version 3.2 (April 2022)",
      "text": "<ul> <li>Plugins Framework Extensions (#8333)</li> <li>Modules &amp; Module Types (#7844)</li> <li>Custom Object Fields (#7006)</li> <li>Custom Status Choices (#8054)</li> <li>Improved User Preferences (#7759)</li> <li>Inventory Item Roles (#3087)</li> <li>Inventory Item Templates (#8118)</li> <li>Service Templates (#1591)</li> <li>Automatic Provisioning of Next Available VLANs (#2658)</li> </ul>"
    },
    {
      "location": "release-notes/#version-31-december-2021",
      "title": "Version 3.1 (December 2021)",
      "text": "<ul> <li>Contact Objects (#1344)</li> <li>Wireless Networks (#3979)</li> <li>Dynamic Configuration Updates (#5883)</li> <li>First Hop Redundancy Protocol (FHRP) Groups (#6235)</li> <li>Conditional Webhooks (#6238)</li> <li>Interface Bridging (#6346)</li> <li>Multiple ASNs per Site (#6732)</li> <li>Single Sign-On (SSO) Authentication (#7649)</li> </ul>"
    },
    {
      "location": "release-notes/#version-30-august-2021",
      "title": "Version 3.0 (August 2021)",
      "text": "<ul> <li>Updated User Interface (#5893)</li> <li>GraphQL API (#2007)</li> <li>IP Ranges (#834)</li> <li>Custom Model Validation (#5963)</li> <li>SVG Cable Traces (#6000)</li> <li>New Views for Models Previously Under the Admin UI (#6466)</li> <li>REST API Token Provisioning (#5264)</li> <li>New Housekeeping Command (#6590)</li> <li>Custom Queue Support for Plugins (#6651)</li> </ul>"
    },
    {
      "location": "release-notes/#version-211-april-2021",
      "title": "Version 2.11 (April 2021)",
      "text": "<ul> <li>Journaling Support (#151)</li> <li>Parent Interface Assignments (#1519)</li> <li>Pre- and Post-Change Snapshots in Webhooks (#3451)</li> <li>Mark as Connected Without a Cable (#3648)</li> <li>Allow Assigning Devices to Locations (#4971)</li> <li>Dynamic Object Exports (#4999)</li> <li>Variable Scope Support for VLAN Groups (#5284)</li> <li>New Site Group Model (#5892)</li> <li>Improved Change Logging (#5913)</li> <li>Provider Network Modeling (#5986)</li> </ul>"
    },
    {
      "location": "release-notes/#version-210-december-2020",
      "title": "Version 2.10 (December 2020)",
      "text": "<ul> <li>Route Targets (#259)</li> <li>REST API Bulk Deletion (#3436)</li> <li>REST API Bulk Update (#4882)</li> <li>Reimplementation of Custom Fields (#4878)</li> <li>Improved Cable Trace Performance (#4900)</li> </ul>"
    },
    {
      "location": "release-notes/#version-29-august-2020",
      "title": "Version 2.9 (August 2020)",
      "text": "<ul> <li>Object-Based Permissions (#554)</li> <li>Background Execution of Scripts &amp; Reports (#2006)</li> <li>Named Virtual Chassis (#2018)</li> <li>Changes to Tag Creation (#3703)</li> <li>Dedicated Model for VM Interfaces (#4721)</li> <li>REST API Endpoints for Users and Groups (#4877)</li> </ul>"
    },
    {
      "location": "release-notes/#version-28-april-2020",
      "title": "Version 2.8 (April 2020)",
      "text": "<ul> <li>Remote Authentication Support (#2328)</li> <li>Plugins (#3351)</li> </ul>"
    },
    {
      "location": "release-notes/#version-27-january-2020",
      "title": "Version 2.7 (January 2020)",
      "text": "<ul> <li>Enhanced Device Type Import (#451)</li> <li>Bulk Import of Device Components (#822)</li> <li>External File Storage (#1814)</li> <li>Rack Elevations Rendered via SVG (#2248)</li> </ul>"
    },
    {
      "location": "release-notes/#version-26-june-2019",
      "title": "Version 2.6 (June 2019)",
      "text": "<ul> <li>Power Panels and Feeds (#54)</li> <li>Caching (#2647)</li> <li>View Permissions (#323)</li> <li>Custom Links (#969)</li> <li>Prometheus Metrics (#3104)</li> </ul>"
    },
    {
      "location": "release-notes/#version-25-december-2018",
      "title": "Version 2.5 (December 2018)",
      "text": "<ul> <li>Patch Panels and Cables (#20)</li> </ul>"
    },
    {
      "location": "release-notes/#version-24-august-2018",
      "title": "Version 2.4 (August 2018)",
      "text": "<ul> <li>Webhooks (#81)</li> <li>Tagging (#132)</li> <li>Contextual Configuration Data (#1349)</li> <li>Change Logging (#1898)</li> </ul>"
    },
    {
      "location": "release-notes/#version-23-february-2018",
      "title": "Version 2.3 (February 2018)",
      "text": "<ul> <li>Virtual Chassis (#99)</li> <li>Interface VLAN Assignments (#150)</li> <li>Bulk Object Creation via the API (#1553)</li> <li>Automatic Provisioning of Next Available Prefixes (#1694)</li> <li>Bulk Renaming of Device/VM Components (#1781)</li> </ul>"
    },
    {
      "location": "release-notes/#version-22-october-2017",
      "title": "Version 2.2 (October 2017)",
      "text": "<ul> <li>Virtual Machines and Clusters (#142)</li> <li>Custom Validation Reports (#1511)</li> </ul>"
    },
    {
      "location": "release-notes/#version-21-july-2017",
      "title": "Version 2.1 (July 2017)",
      "text": "<ul> <li>IP Address Roles (#819)</li> <li>Automatic Provisioning of Next Available IP (#1246)</li> <li>NAPALM Integration (#1348)</li> </ul>"
    },
    {
      "location": "release-notes/#version-20-may-2017",
      "title": "Version 2.0 (May 2017)",
      "text": "<ul> <li>API 2.0 (#113)</li> <li>Image Attachments (#152)</li> <li>Global Search (#159)</li> <li>Rack Elevations View (#951)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/",
      "title": "NetBox v2.0 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#v2010-2017-07-14",
      "title": "v2.0.10 (2017-07-14)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1312 - Catch error when attempting to activate a user key with an invalid private key</li> <li>#1333 - Corrected label on is_console_server field of DeviceType bulk edit form</li> <li>#1338 - Allow importing prefixes with \"container\" status</li> <li>#1339 - Fixed disappearing checkbox column under django-tables2 v1.7+</li> <li>#1342 - Allow designation of users and groups when creating/editing a secret role</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v209-2017-07-10",
      "title": "v2.0.9 (2017-07-10)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1319 - Fixed server error when attempting to create console/power connections</li> <li>#1325 - Retain interface attachment when editing a circuit termination</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v208-2017-07-05",
      "title": "v2.0.8 (2017-07-05)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#1298 - Calculate prefix utilization based on its status (container or non-container)</li> <li>#1303 - Highlight installed interface connections in green on device view</li> <li>#1315 - Enforce lowercase file extensions for image attachments</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1279 - Fix primary_ip assignment during IP address import</li> <li>#1281 - Show LLDP neighbors tab on device view only if necessary conditions are met</li> <li>#1282 - Fixed tooltips on \"mark connected/planned\" toggle buttons for device connections</li> <li>#1288 - Corrected permission name for deleting image attachments</li> <li>#1289 - Retain inside NAT assignment when editing an IP address</li> <li>#1297 - Allow passing custom field choice selection PKs to API as string-quoted integers</li> <li>#1299 - Corrected permission name for adding services to devices</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v207-2017-06-15",
      "title": "v2.0.7 (2017-06-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#626 - Added bulk disconnect function for console/power/interface connections on device view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1238 - Fix error when editing an IP with a NAT assignment which has no assigned device</li> <li>#1263 - Differentiate add and edit permissions for objects</li> <li>#1265 - Fix console/power/interface connection validation when selecting a device via live search</li> <li>#1266 - Prevent terminating a circuit to an already-connected interface</li> <li>#1268 - Fix CSV import error under Python 3</li> <li>#1273 - Corrected status choices in IP address import form</li> <li>#1274 - Exclude unterminated circuits from topology maps</li> <li>#1275 - Raise validation error on prefix import when multiple VLANs are found</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v206-2017-06-12",
      "title": "v2.0.6 (2017-06-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#40 - Added IP utilization graph to prefix list</li> <li>#704 - Allow filtering VLANs by group when editing prefixes</li> <li>#913 - Added headers to object CSV exports</li> <li>#990 - Enable logging configuration in configuration.py</li> <li>#1180 - Simplified the process of finding related devices when viewing a device</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1253 - Improved <code>upgrade.sh</code> to allow forcing Python2</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v205-2017-06-08",
      "title": "v2.0.5 (2017-06-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#notes",
      "title": "Notes",
      "text": "<p>The maximum number of objects an API consumer can request has been set to 1000 (e.g. <code>?limit=1000</code>). This limit can be modified by defining <code>MAX_PAGE_SIZE</code> in confgiuration.py. (To remove this limit, set <code>MAX_PAGE_SIZE=0</code>.)</p>"
    },
    {
      "location": "release-notes/version-2.0/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#655 - Implemented header-based CSV import of objects</li> <li>#1190 - Allow partial string matching when searching on custom fields</li> <li>#1237 - Enabled setting limit=0 to disable pagination in API requests; added <code>MAX_PAGE_SIZE</code> configuration setting</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#837 - Enforce uniqueness where applicable during bulk import of IP addresses</li> <li>#1226 - Improved validation for custom field values submitted via the API</li> <li>#1232 - Improved rack space validation on bulk import of devices (see #655)</li> <li>#1235 - Fix permission name for adding/editing inventory items</li> <li>#1236 - Truncate rack names in elevations list; add facility ID</li> <li>#1239 - Fix server error when creating VLANGroup via API</li> <li>#1243 - Catch ValueError in IP-based object filters</li> <li>#1244 - Corrected \"device\" secrets filter to accept a device name</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v204-2017-05-25",
      "title": "v2.0.4 (2017-05-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1206 - Fix redirection in admin UI after activating secret keys when BASE_PATH is set</li> <li>#1207 - Include nested LAG serializer when showing interface connections (API)</li> <li>#1210 - Fix TemplateDoesNotExist errors on browsable API views</li> <li>#1212 - Allow assigning new VLANs to global VLAN groups</li> <li>#1213 - Corrected table header ordering links on object list views</li> <li>#1214 - Add status to list of required fields on child device import form</li> <li>#1219 - Fix image attachment URLs when BASE_PATH is set</li> <li>#1220 - Suppressed innocuous warning about untracked migrations under Python 3</li> <li>#1229 - Fix validation error on forms where API search is used</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v203-2017-05-18",
      "title": "v2.0.3 (2017-05-18)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#1196 - Added a lag_id filter to the API interfaces view</li> <li>#1198 - Allow filtering unracked devices on device list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1157 - Hide nav menu search bar on small displays</li> <li>#1186 - Corrected VLAN edit form so that site assignment is not required</li> <li>#1187 - Fixed table pagination by introducing a custom table template</li> <li>#1188 - Serialize interface LAG as nested objected (API)</li> <li>#1189 - Enforce consistent ordering of objects returned by a global search</li> <li>#1191 - Bulk selection of IPs under a prefix incorrect when \"select all\" is used</li> <li>#1195 - Unable to create an interface connection when searching for peer device</li> <li>#1197 - Fixed status assignment during bulk import of devices, prefixes, IPs, and VLANs</li> <li>#1199 - Bulk import of secrets does not prompt user to generate a session key</li> <li>#1200 - Form validation error when connecting power ports to power outlets</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v202-2017-05-15",
      "title": "v2.0.2 (2017-05-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#1122 - Include NAT inside IPs in IP address list</li> <li>#1137 - Allow filtering devices list by rack</li> <li>#1170 - Include A and Z sites for circuits in global search results</li> <li>#1172 - Linkify racks in side-by-side elevations view</li> <li>#1177 - Render planned connections as dashed lines on topology maps</li> <li>#1179 - Adjust topology map text color based on node background</li> <li>On all object edit forms, allow filtering the tenant list by tenant group</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1158 - Exception thrown when creating a device component with an invalid name</li> <li>#1159 - Only superusers can see \"edit IP\" buttons on the device interfaces list</li> <li>#1160 - Linkify secrets and tenants in global search results</li> <li>#1161 - Fix \"add another\" behavior when creating an API token</li> <li>#1166 - Fixed bulk IP address creation when assigning tenants</li> <li>#1168 - Total count of objects missing from list view paginator</li> <li>#1171 - Allow removing site assignment when bulk editing VLANs</li> <li>#1173 - Tweak interface manager to fall back to naive ordering</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v201-2017-05-10",
      "title": "v2.0.1 (2017-05-10)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1149 - Port list does not populate when creating a console or power connection</li> <li>#1150 - Error when uploading image attachments with Unicode names under Python 2</li> <li>#1151 - Server error: name 'escape' is not defined</li> <li>#1152 - Unable to edit user keys</li> <li>#1153 - UnicodeEncodeError when searching for non-ASCII characters on Python 2</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#v200-2017-05-09",
      "title": "v2.0.0 (2017-05-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.0/#api-20-113",
      "title": "API 2.0 (#113)",
      "text": "<p>The NetBox API has been completely rewritten and now features full read/write ability.</p>"
    },
    {
      "location": "release-notes/version-2.0/#image-attachments-152",
      "title": "Image Attachments (#152)",
      "text": "<p>Users are now able to attach photos and other images to sites, racks, and devices. (Please ensure that the new <code>media</code> directory is writable by the system account NetBox runs as.)</p>"
    },
    {
      "location": "release-notes/version-2.0/#global-search-159",
      "title": "Global Search (#159)",
      "text": "<p>NetBox now supports searching across all primary object types at once.</p>"
    },
    {
      "location": "release-notes/version-2.0/#rack-elevations-view-951",
      "title": "Rack Elevations View (#951)",
      "text": "<p>A new view has been introduced to display the elevations of multiple racks side-by-side.</p>"
    },
    {
      "location": "release-notes/version-2.0/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#154 - Expanded device status field to include options other than active/offline</li> <li>#430 - Include circuits when rendering topology maps</li> <li>#578 - Show topology maps not assigned to a site on the home view</li> <li>#1100 - Add a \"view all\" link to completed bulk import views is_pool for prefixes)</li> <li>#1110 - Expand bulk edit forms to include boolean fields (e.g. toggle is_pool for prefixes)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<p>From v1.9.6:</p> <ul> <li>#403 - Record console/power/interface connects and disconnects as user actions</li> <li>#853 -  Added \"status\" field to device bulk import form</li> <li>#1101 - Fix AJAX scripting for device component selection forms</li> <li>#1103 - Correct handling of validation errors when creating IP addresses in bulk</li> <li>#1104 - Fix VLAN assignment on prefix import</li> <li>#1115 - Enabled responsive (side-scrolling) tables for small screens</li> <li>#1116 - Correct object links on recursive deletion error</li> <li>#1125 - Include MAC addresses on a device's interface list</li> <li>#1144 - Allow multiple status selections for Prefix, IP address, and VLAN filters</li> </ul> <p>From beta3:</p> <ul> <li>#1113 - Fixed server error when attempting to delete an image attachment</li> <li>#1114 - Suppress OSError when attempting to access a deleted image attachment</li> <li>#1126 - Fixed server error when editing a user key via admin UI attachment</li> <li>#1132 - Prompt user to unlock session key when importing secrets</li> </ul>"
    },
    {
      "location": "release-notes/version-2.0/#additional-changes",
      "title": "Additional Changes",
      "text": "<ul> <li>The Module DCIM model has been renamed to InventoryItem to better reflect its intended function, and to make room for work on #824.</li> <li>Redundant portions of the admin UI have been removed (#973).</li> <li>The Docker build components have been moved into their own repository.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/",
      "title": "NetBox v2.1 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#v216-2017-10-11",
      "title": "v2.1.6 (2017-10-11)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#1548 - Automatically populate tenant assignment when adding an IP address from the prefix view</li> <li>#1561 - Added primary IP to the devices table in global search</li> <li>#1563 - Made necessary updates for Django REST Framework v3.7.0</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#v215-2017-09-25",
      "title": "v2.1.5 (2017-09-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#1484 - Added individual \"add VLAN\" buttons on the VLAN groups list</li> <li>#1485 - Added <code>BANNER_LOGIN</code> configuration setting to display a banner on the login page</li> <li>#1499 - Added utilization graph to child prefixes table</li> <li>#1523 - Improved the natural ordering of interfaces (thanks to @tarkatronic)</li> <li>#1536 - Improved formatting of aggregate prefix statistics</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1469 - Allow a NAT IP to be assigned as the primary IP for a device</li> <li>#1472 - Prevented truncation when displaying secret strings containing HTML characters</li> <li>#1486 - Ignore subinterface IDs when validating LLDP neighbor connections</li> <li>#1489 - Corrected server error on validation of empty required custom field</li> <li>#1507 - Fixed error when creating the next available IP from a prefix within a VRF</li> <li>#1520 - Redirect on GET request to bulk edit/delete views</li> <li>#1522 - Removed object create/edit forms from the browsable API</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#v214-2017-08-30",
      "title": "v2.1.4 (2017-08-30)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#1326 - Added dropdown widget with common values for circuit speed fields</li> <li>#1341 - Added a <code>MEDIA_ROOT</code> configuration setting to specify where uploaded files are stored on disk</li> <li>#1376 - Ignore anycast addresses when detecting duplicate IPs</li> <li>#1402 - Increased max length of name field for device components</li> <li>#1431 - Added interface form factor for 10GBASE-CX4</li> <li>#1432 - Added a <code>commit_rate</code> field to the circuits list search form</li> <li>#1460 - Hostnames with no domain are now acceptable in custom URL fields</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1429 - Fixed uptime formatting on device status page</li> <li>#1433 - Fixed <code>devicetype_id</code> filter for DeviceType components</li> <li>#1443 - Fixed API validation error involving custom field data</li> <li>#1458 - Corrected permission name on prefix/VLAN roles list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#v213-2017-08-15",
      "title": "v2.1.3 (2017-08-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1330 - Raise validation error when assigning an unrelated IP as the primary IP for a device</li> <li>#1389 - Avoid splitting carat/prefix on prefix list</li> <li>#1400 - Removed redundant display of assigned device interface from IP address list</li> <li>#1414 - Selecting a site from the rack filters automatically updates the available rack groups</li> <li>#1419 - Allow editing image attachments without re-uploading an image</li> <li>#1420 - Exclude virtual interfaces from device LLDP neighbors view</li> <li>#1421 - Improved model validation logic for API serializers</li> <li>Fixed page title capitalization in the browsable API</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#v212-2017-08-04",
      "title": "v2.1.2 (2017-08-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#992 - Allow the creation of multiple services per device with the same protocol and port</li> <li>Tweaked navigation menu styling</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1388 - Fixed server error when searching globally for IPs/prefixes (rolled back #1379)</li> <li>#1390 - Fixed IndexError when viewing available IPs within large IPv6 prefixes</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#v211-2017-08-02",
      "title": "v2.1.1 (2017-08-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#893 - Allow filtering by null values for NullCharacterFields (e.g. return only unnamed devices)</li> <li>#1368 - Render reservations in rack elevations view</li> <li>#1374 - Added NAPALM_ARGS and NAPALM_TIMEOUT configiuration parameters</li> <li>#1375 - Renamed <code>NETBOX_USERNAME</code> and <code>NETBOX_PASSWORD</code> configuration parameters to <code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code></li> <li>#1379 - Allow searching devices by interface MAC address in global search</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#461 - Display a validation error when attempting to assigning a new child device to a rack face/position</li> <li>#1385 - Connected device API endpoint no longer requires authentication if <code>LOGIN_REQUIRED</code> is False</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#v210-2017-07-25",
      "title": "v2.1.0 (2017-07-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.1/#ip-address-roles-819",
      "title": "IP Address Roles (#819)",
      "text": "<p>The IP address model now supports the assignment of a functional role to help identify special-purpose IPs. These include:</p> <ul> <li>Loopback</li> <li>Secondary</li> <li>Anycast</li> <li>VIP</li> <li>VRRP</li> <li>HSRP</li> <li>GLBP</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#automatic-provisioning-of-next-available-ip-1246",
      "title": "Automatic Provisioning of Next Available IP (#1246)",
      "text": "<p>A new API endpoint has been added at <code>/api/ipam/prefixes/&lt;pk&gt;/available-ips/</code>. A GET request to this endpoint will return a list of available IP addresses within the prefix (up to the pagination limit). A POST request will automatically create and return the next available IP address.</p>"
    },
    {
      "location": "release-notes/version-2.1/#napalm-integration-1348",
      "title": "NAPALM Integration (#1348)",
      "text": "<p>The NAPALM automation library provides an abstracted interface for pulling live data (e.g. uptime, software version, running config, LLDP neighbors, etc.) from network devices. The NetBox API has been extended to support executing read-only NAPALM methods on devices defined in NetBox. To enable this functionality, ensure that NAPALM has been installed (<code>pip install napalm</code>) and the <code>NETBOX_USERNAME</code> and <code>NETBOX_PASSWORD</code> configuration parameters have been set in configuration.py.</p>"
    },
    {
      "location": "release-notes/version-2.1/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#838 - Display details of all objects being edited/deleted in bulk</li> <li>#1041 - Added enabled and MTU fields to the interface model</li> <li>#1121 - Added asset_tag and description fields to the InventoryItem model</li> <li>#1141 - Include RD when listing VRFs in a form selection field</li> <li>#1203 - Implemented query filters for all models</li> <li>#1218 - Added IEEE 802.11 wireless interface types</li> <li>#1269 - Added circuit termination to interface serializer</li> <li>#1320 - Removed checkbox from confirmation dialog</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1079 - Order interfaces naturally via API</li> <li>#1285 - Enforce model validation when creating/editing objects via the API</li> <li>#1358 - Correct VRF example values in IP/prefix import forms</li> <li>#1362 - Raise validation error when attempting to create an API key that's too short</li> <li>#1371 - Extend DeviceSerializer.parent_device to include standard fields</li> </ul>"
    },
    {
      "location": "release-notes/version-2.1/#api-changes",
      "title": "API changes",
      "text": "<ul> <li>Added a new API endpoint which makes NAPALM accessible via NetBox</li> <li>Device components (console ports, power ports, interfaces, etc.) can only be filtered by a single device name or ID. This limitation was necessary to allow the natural ordering of interfaces according to the device's parent device type.</li> <li>Added two new fields to the interface serializer: <code>enabled</code> (boolean) and <code>mtu</code> (unsigned integer)</li> <li>Modified the interface serializer to include three discrete fields relating to connections: <code>is_connected</code> (boolean), <code>interface_connection</code>, and <code>circuit_termination</code></li> <li>Added two new fields to the inventory item serializer: <code>asset_tag</code> and <code>description</code></li> <li>Added \"wireless\" to interface type filter (in addition to physical, virtual, and LAG)</li> <li>Added a new endpoint at /api/ipam/prefixes/&lt;pk&gt;/available-ips/ to retrieve or create available IPs within a prefix</li> <li>Extended <code>parent_device</code> on DeviceSerializer to include the <code>url</code> and <code>display_name</code> of the parent Device, and the <code>url</code> of the DeviceBay</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/",
      "title": "NetBox v2.10",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#v21010-2021-04-15",
      "title": "v2.10.10 (2021-04-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#5796 - Add DC terminal power port, outlet types</li> <li>#5980 - Add Saf-D-Grid power port, outlet types</li> <li>#6157 - Support Markdown rendering for report logs</li> <li>#6160 - Add F connector port type</li> <li>#6168 - Add SFP56 50GE interface type</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5419 - Update parent device/VM when deleting a primary IP</li> <li>#5643 - Fix VLAN assignment when editing VM interfaces in bulk</li> <li>#5652 - Update object data when renaming a custom field</li> <li>#6056 - Optimize change log cleanup</li> <li>#6144 - Fix MAC address field display in VM interfaces search form</li> <li>#6152 - Fix custom field filtering for cables, virtual chassis</li> <li>#6162 - Fix choice field filters (multiple models)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2109-2021-04-12",
      "title": "v2.10.9 (2021-04-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#5526 - Add MAC address search field to VM interfaces list</li> <li>#5756 - Omit child devices from non-racked devices list under rack view</li> <li>#5840 - Add column to cable termination objects to display cable color</li> <li>#6054 - Display NAPALM-enabled device tabs only when relevant</li> <li>#6083 - Support disabling TLS certificate validation for Redis</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5805 - Fix missing custom field filters for cables, rack reservations</li> <li>#6070 - Add missing <code>count_ipaddresses</code> attribute to VMInterface serializer</li> <li>#6073 - Permit users to manage their own REST API tokens without needing explicit permission</li> <li>#6081 - Fix interface connections REST API endpoint</li> <li>#6082 - Support colons in webhook header values</li> <li>#6108 - Do not infer tenant assignment from parent objects for prefixes, IP addresses</li> <li>#6117 - Handle exception when attempting to assign an MPTT-enabled model as its own parent</li> <li>#6131 - Correct handling of boolean fields when cloning objects</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2108-2021-03-26",
      "title": "v2.10.8 (2021-03-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6060 - Fix exception on cable trace in UI (regression from #5650)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2107-2021-03-25",
      "title": "v2.10.7 (2021-03-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#5641 - Allow filtering device components by label</li> <li>#5723 - Allow customization of the geographic mapping service via <code>MAPS_URL</code> config parameter</li> <li>#5736 - Allow changing site assignment when bulk editing devices</li> <li>#5953 - Support Markdown rendering for custom script descriptions</li> <li>#6040 - Add UI search fields for asset tag for devices and racks</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5595 - Restore ability to delete an uploaded device type image</li> <li>#5650 - Denote when the total length of a cable trace may exceed the indicated value</li> <li>#5962 - Ensure consistent display of change log action labels</li> <li>#5966 - Skip Markdown reference link when tabbing through form fields</li> <li>#5977 - Correct validation of <code>RELEASE_CHECK_URL</code> config parameter</li> <li>#6006 - Fix VLAN group/site association for bulk prefix import</li> <li>#6010 - Eliminate duplicate virtual chassis search results</li> <li>#6012 - Pre-populate attributes when creating an available child prefix via the UI</li> <li>#6023 - Fix display of bottom banner with uBlock Origin enabled</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2106-2021-03-09",
      "title": "v2.10.6 (2021-03-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#5592 - Add IP addresses count to VRF view</li> <li>#5630 - Add QSFP+ (64GFC) FibreChannel Interface option</li> <li>#5884 - Enable custom links for device components</li> <li>#5914 - Add edit/delete buttons for IP addresses on interface view</li> <li>#5942 - Add button to add a new IP address on interface view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5703 - Fix VRF and Tenant field population when adding IP addresses from prefix</li> <li>#5819 - Enable ordering of virtual machines by primary IP address</li> <li>#5872 - Ordering of devices by primary IP should respect <code>PREFER_IPV4</code> configuration parameter</li> <li>#5922 - Fix options for filtering object permissions in admin UI</li> <li>#5935 - Fix filtering prefixes list by multiple prefix values</li> <li>#5948 - Invalidate cached queries when running <code>renaturalize</code></li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2105-2021-02-24",
      "title": "v2.10.5 (2021-02-24)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5315 - Fix site unassignment from VLAN when using \"None\" option</li> <li>#5626 - Fix REST API representation for circuit terminations connected to non-interface endpoints</li> <li>#5716 - Fix filtering rack reservations by custom field</li> <li>#5718 - Fix bulk editing of services when no port(s) are defined</li> <li>#5735 - Ensure consistent treatment of duplicate IP addresses</li> <li>#5738 - Fix redirect to device components view after disconnecting a cable</li> <li>#5753 - Fix Redis Sentinel password application for caching</li> <li>#5786 - Allow setting null tenant group on tenant via REST API</li> <li>#5841 - Disallow the creation of available prefixes/IP addresses in violation of assigned permission constraints</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2104-2021-01-26",
      "title": "v2.10.4 (2021-01-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#5542 - Show cable trace lengths in both meters and feet</li> <li>#5570 - Add \"management only\" filter widget for interfaces list</li> <li>#5586 - Allow filtering virtual chassis by name and master</li> <li>#5612 - Add GG45 and TERA port types, and CAT7a and CAT8 cable types</li> <li>#5678 - Show available type choices for all device component import forms</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5232 - Correct swagger definition for ip_prefixes_available-ips_create API</li> <li>#5574 - Restrict the creation of device bay templates on non-parent device types</li> <li>#5584 - Restore power utilization panel under device view</li> <li>#5597 - Fix ordering devices by primary IP address</li> <li>#5603 - Fix display of white cables in trace view</li> <li>#5639 - Fix filtering connection lists by device name</li> <li>#5640 - Fix permissions assessment when adding VM interfaces in bulk</li> <li>#5648 - Include VC member interfaces on interfaces tab count when viewing VC master</li> <li>#5665 - Validate rack group is assigned to same site when creating a rack</li> <li>#5683 - Correct rack elevation displayed when viewing a reservation</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2103-2021-01-05",
      "title": "v2.10.3 (2021-01-05)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5049 - Add check for LLDP neighbor chassis name to lldp_neighbors</li> <li>#5301 - Fix misleading error when racking a device with invalid parameters</li> <li>#5311 - Update child objects when a rack group is moved to a new site</li> <li>#5518 - Fix persistent vertical scrollbar</li> <li>#5533 - Fix bulk editing of objects with required custom fields</li> <li>#5540 - Fix exception when viewing a provider with one or more tags assigned</li> <li>#5543 - Fix rendering of config contexts with cluster assignment for devices</li> <li>#5546 - Add custom field bulk edit support for cables, power panels, rack reservations, and virtual chassis</li> <li>#5547 - Add custom field bulk import support for cables, power panels, rack reservations, and virtual chassis</li> <li>#5551 - Restore missing import button on services list</li> <li>#5557 - Fix VRF route target assignment via REST API</li> <li>#5558 - Fix regex validation support for custom URL fields</li> <li>#5563 - Fix power feed cable trace link</li> <li>#5564 - Raise validation error if a power port template's <code>allocated_draw</code> exceeds its <code>maximum_draw</code></li> <li>#5569 - Ensure consistent labeling of interface <code>mgmt_only</code> field</li> <li>#5573 - Report inconsistent values when migrating custom field data</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2102-2020-12-21",
      "title": "v2.10.2 (2020-12-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#5489 - Add filters for type and width to racks list</li> <li>#5496 - Add form field to filter rack reservation by user</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5254 - Require plugin authors to set zip_safe=False</li> <li>#5468 - Fix unlocking secrets from device/VM view</li> <li>#5473 - Fix alignment of rack names in elevations list</li> <li>#5478 - Fix display of route target description</li> <li>#5484 - Fix \"tagged\" indication in VLAN members list</li> <li>#5486 - Optimize retrieval of config context data for device/VM REST API views</li> <li>#5487 - Support filtering rack type/width with multiple values</li> <li>#5488 - Fix caching error when viewing cable trace after toggling cable status</li> <li>#5498 - Fix filtering rack reservations by username</li> <li>#5499 - Fix filtering of displayed device/VM interfaces by regex</li> <li>#5507 - Fix custom field data assignment via UI for IP addresses, secrets</li> <li>#5510 - Fix filtering by boolean custom fields</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2101-2020-12-15",
      "title": "v2.10.1 (2020-12-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5444 - Don't force overwriting of boolean fields when bulk editing interfaces</li> <li>#5450 - API serializer foreign count fields do not have a default value</li> <li>#5453 - Correct change log representation when creating a cable</li> <li>#5458 - Creating a component template throws an exception</li> <li>#5461 - Rack Elevations throw reverse match exception</li> <li>#5463 - Back-to-back Circuit Termination throws AttributeError exception</li> <li>#5465 - Correct return URL when disconnecting a cable from a device</li> <li>#5466 - Fix validation for required custom fields</li> <li>#5470 - Fix exception when making <code>OPTIONS</code> request for a REST API list endpoint</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#v2100-2020-12-14",
      "title": "v2.10.0 (2020-12-14)",
      "text": "<p>NOTE: This release completely removes support for embedded graphs.</p> <p>NOTE: The Django templating language (DTL) is no longer supported for export templates. Ensure that all export templates use Jinja2 before upgrading.</p>"
    },
    {
      "location": "release-notes/version-2.10/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.10/#route-targets-259",
      "title": "Route Targets (#259)",
      "text": "<p>This release introduces support for modeling L3VPN route targets, which can be used to control the redistribution of advertised prefixes among VRFs. Each VRF may be assigned one or more route targets in the import and/or export direction. Like VRFs, route targets may be assigned to tenants and support tag assignment.</p>"
    },
    {
      "location": "release-notes/version-2.10/#rest-api-bulk-deletion-3436",
      "title": "REST API Bulk Deletion (#3436)",
      "text": "<p>The REST API now supports the bulk deletion of objects of the same type in a single request. Send a <code>DELETE</code> HTTP request to the list to the model's list endpoint (e.g. <code>/api/dcim/sites/</code>) with a list of JSON objects specifying the numeric ID of each object to be deleted. For example, to delete sites with IDs 10, 11, and 12, issue the following request:</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10}, {\"id\": 11}, {\"id\": 12}]'\n</code></pre>"
    },
    {
      "location": "release-notes/version-2.10/#rest-api-bulk-update-4882",
      "title": "REST API Bulk Update (#4882)",
      "text": "<p>Similar to bulk deletion, the REST API also now supports bulk updates. Send a <code>PUT</code> or <code>PATCH</code> HTTP request to the list to the model's list endpoint (e.g. <code>/api/dcim/sites/</code>) with a list of JSON objects specifying the numeric ID of each object and the attribute(s) to be updated. For example, to set a description for sites with IDs 10 and 11, issue the following request:</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10, \"description\": \"Foo\"}, {\"id\": 11, \"description\": \"Bar\"}]'\n</code></pre>"
    },
    {
      "location": "release-notes/version-2.10/#reimplementation-of-custom-fields-4878",
      "title": "Reimplementation of Custom Fields (#4878)",
      "text": "<p>NetBox v2.10 introduces a completely overhauled approach to custom fields. Whereas previous versions used CustomFieldValue instances to store values, custom field data is now stored directly on each model instance as JSON data and may be accessed using the <code>cf</code> property:</p> <pre><code>&gt;&gt;&gt; site = Site.objects.first()\n&gt;&gt;&gt; site.cf\n{'site_code': 'US-RAL01'}\n&gt;&gt;&gt; site.cf['foo'] = 'ABC'\n&gt;&gt;&gt; site.full_clean()\n&gt;&gt;&gt; site.save()\n&gt;&gt;&gt; site = Site.objects.first()\n&gt;&gt;&gt; site.cf\n{'foo': 'ABC', 'site_code': 'US-RAL01'}\n</code></pre> <p>Additionally, custom selection field choices are now defined on the CustomField model within the admin UI, which greatly simplifies working with choice values.</p>"
    },
    {
      "location": "release-notes/version-2.10/#improved-cable-trace-performance-4900",
      "title": "Improved Cable Trace Performance (#4900)",
      "text": "<p>All end-to-end cable paths are now cached using the new CablePath backend model. This allows NetBox to now immediately return the complete path originating from any endpoint directly from the database, rather than having to trace each cable recursively. It also resolves some systemic validation issues present in the original implementation.</p> <p>Note: As part of this change, cable traces will no longer traverse circuits: A circuit termination will be considered the origin or destination of an end-to-end path.</p>"
    },
    {
      "location": "release-notes/version-2.10/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#609 - Add min/max value and regex validation for custom fields</li> <li>#1503 - Allow assigment of secrets to virtual machines</li> <li>#1692 - Allow assigment of inventory items to parent items in web UI</li> <li>#2179 - Support the use of multiple port numbers when defining a service</li> <li>#4897 - Allow filtering by content type identified as <code>&lt;app&gt;.&lt;model&gt;</code> string</li> <li>#4918 - Add a REST API endpoint (<code>/api/status/</code>) which returns NetBox's current operational status</li> <li>#4956 - Include inventory items on primary device view</li> <li>#4967 - Support tenant assignment for aggregates</li> <li>#5003 - CSV import now accepts slug values for choice fields</li> <li>#5146 - Add custom field support for cables, power panels, rack reservations, and virtual chassis</li> <li>#5154 - The web interface now consumes the entire browser window</li> <li>#5190 - Add a REST API endpoint for retrieving content types (<code>/api/extras/content-types/</code>)</li> <li>#5274 - Add REST API support for custom fields</li> <li>#5399 - Show options for cable endpoint types during bulk import</li> <li>#5411 - Include cable tags in trace view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#1846 - Enable MPTT for InventoryItem hierarchy</li> <li>#2755 - Switched from Font Awesome/Glyphicons to Material Design icons</li> <li>#4349 - Dropped support for embedded graphs</li> <li>#4360 - Dropped support for the Django template language from export templates</li> <li>#4711 - Renamed Webhook <code>obj_type</code> to <code>content_types</code></li> <li>#4941 - <code>commit</code> argument is now required argument in a custom script's <code>run()</code> method</li> <li>#5011 - Standardized name field lengths across all models</li> <li>#5139 - Omit utilization statistics from RIR list</li> <li>#5225 - Circuit termination port speed is now an optional field</li> </ul>"
    },
    {
      "location": "release-notes/version-2.10/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Added support for <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code> operations on list endpoints (bulk update and delete)</li> <li>Added the <code>/extras/content-types/</code> endpoint for Django ContentTypes</li> <li>Added the <code>/extras/custom-fields/</code> endpoint for custom fields</li> <li>Removed the <code>/extras/_custom_field_choices/</code> endpoint (replaced by new custom fields endpoint)</li> <li>Added the <code>/status/</code> endpoint to convey NetBox's current status</li> <li>circuits.CircuitTermination:<ul> <li>Added the <code>/trace/</code> endpoint</li> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li><code>port_speed</code> may now be null</li> </ul> </li> <li>dcim.Cable: Added <code>custom_fields</code></li> <li>dcim.ConsolePort:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.ConsoleServerPort:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.FrontPort:<ul> <li>Replaced the <code>/trace/</code> endpoint with <code>/paths/</code>, which returns a list of cable paths</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> </ul> </li> <li>dcim.Interface:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.InventoryItem: The <code>_depth</code> field has been added to reflect MPTT positioning</li> <li>dcim.PowerFeed:<ul> <li>Added the <code>/trace/</code> endpoint</li> <li>Added fields <code>connected_endpoint</code>, <code>connected_endpoint_type</code>, <code>connected_endpoint_reachable</code>, <code>cable_peer</code>, and <code>cable_peer_type</code></li> </ul> </li> <li>dcim.PowerOutlet:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.PowerPanel: Added <code>custom_fields</code></li> <li>dcim.PowerPort<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.RackReservation: Added <code>custom_fields</code></li> <li>dcim.RearPort:<ul> <li>Replaced the <code>/trace/</code> endpoint with <code>/paths/</code>, which returns a list of cable paths</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> </ul> </li> <li>dcim.VirtualChassis: Added <code>custom_fields</code></li> <li>extras.ExportTemplate: The <code>template_language</code> field has been removed</li> <li>extras.Graph: This API endpoint has been removed (see #4349)</li> <li>extras.ImageAttachment: Filtering by <code>content_type</code> now takes a string in the form <code>&lt;app&gt;.&lt;model&gt;</code></li> <li>extras.ObjectChange: Filtering by <code>changed_object_type</code> now takes a string in the form <code>&lt;app&gt;.&lt;model&gt;</code></li> <li>ipam.Aggregate: Added <code>tenant</code> field</li> <li>ipam.RouteTarget: New endpoint</li> <li>ipam.Service: Renamed <code>port</code> to <code>ports</code>; now holds a list of one or more port numbers</li> <li>ipam.VRF: Added <code>import_targets</code> and <code>export_targets</code> fields</li> <li>secrets.Secret: Removed <code>device</code> field; replaced with <code>assigned_object</code> generic foreign key. This may represent either a device or a virtual machine. Assign an object by setting <code>assigned_object_type</code> and <code>assigned_object_id</code>.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/",
      "title": "NetBox v2.11",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#v21112-2021-08-23",
      "title": "v2.11.12 (2021-08-23)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#6748 - Add site group filter to devices list</li> <li>#6790 - Recognize a /32 IPv4 address as a child of a /32 IPv4 prefix</li> <li>#6872 - Add table configuration button to child prefixes view</li> <li>#6929 - Introduce <code>LOGIN_PERSISTENCE</code> configuration parameter to persist user sessions</li> <li>#7011 - Add search field to VM interfaces filter form</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5968 - Model forms should save empty custom field values as null</li> <li>#6326 - Enable filtering assigned VLANs by group in interface edit form</li> <li>#6686 - Force assignment of null custom field values to objects</li> <li>#6776 - Fix erroneous webhook dispatch on failure to save objects</li> <li>#6974 - Show contextual label for IP address role</li> <li>#7012 - Fix hidden \"add components\" dropdown on devices list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v21111-2021-08-12",
      "title": "v2.11.11 (2021-08-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#6883 - Add C21 &amp; C22 power types</li> <li>#6921 - Employ a sandbox when rendering Jinja2 code for increased security</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6740 - Add import button to VM interfaces list</li> <li>#6892 - Fix validation of unit ranges when creating a rack reservation</li> <li>#6896 - Fix validation of IP address assigned as device/VM primary via NAT relation</li> <li>#6902 - Populate device field when cloning device components</li> <li>#6908 - Allow assignment of scope to VLAN groups upon import</li> <li>#6909 - Remove extraneous <code>site</code> column from VLAN group import form</li> <li>#6910 - Fix exception on invalid CSV import column name</li> <li>#6918 - Fix return URL persistence when adding multiple objects sequentially</li> <li>#6935 - Remove extraneous columns from inventory item and device bay tables</li> <li>#6936 - Add missing <code>parent</code> column to inventory item import form</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v21110-2021-07-28",
      "title": "v2.11.10 (2021-07-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#6560 - Enable CSV import via uploaded file</li> <li>#6644 - Add 6P/4P pass-through port types</li> <li>#6771 - Add count of inventory items to manufacturer view</li> <li>#6785 - Add \"hardwired\" type for power port types</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5442 - Fix assignment of permissions based on LDAP groups</li> <li>#5627 - Fix filtering of interface connections list</li> <li>#6759 - Fix assignment of parent interfaces for bulk import</li> <li>#6773 - Add missing <code>display</code> field to rack unit serializer</li> <li>#6774 - Fix A/Z assignment when swapping circuit terminations</li> <li>#6777 - Fix default value validation for custom text fields</li> <li>#6778 - Rack reservation should display rack's location</li> <li>#6780 - Include rack location in navigation breadcrumbs</li> <li>#6794 - Fix device name display on device status view</li> <li>#6812 - Limit reported prefix utilization to 100%</li> <li>#6822 - Use consistent maximum value for interface MTU</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#6781 - Database query caching is now disabled by default</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2119-2021-07-08",
      "title": "v2.11.9 (2021-07-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6456 - API schema type should be boolean for <code>_occupied</code> on cable termination models</li> <li>#6710 - Fix assignment of VM interface parent via REST API</li> <li>#6714 - Fix rendering of device type component creation forms</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2118-2021-07-06",
      "title": "v2.11.8 (2021-07-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#5503 - Annotate short date &amp; time fields with their longer form</li> <li>#6138 - Add an <code>empty</code> filter modifier for character fields</li> <li>#6200 - Add rack reservations to global search</li> <li>#6368 - Enable virtual chassis assignment during bulk import of devices</li> <li>#6620 - Show assigned VMs count under device role view</li> <li>#6666 - Show management-only status under interface detail view</li> <li>#6667 - Display VM memory as GB/TB as appropriate</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6626 - Fix site field on VM search form; add site group</li> <li>#6637 - Fix group assignment in \"available VLANs\" link under VLAN group view</li> <li>#6640 - Disallow numeric values in custom text fields</li> <li>#6652 - Fix exception when adding components in bulk to multiple devices</li> <li>#6676 - Fix device/VM counts per cluster under cluster type/group views</li> <li>#6680 - Allow setting custom field values for VM interfaces on initial creation</li> <li>#6695 - Fix exception when importing device type with invalid front port definition</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2117-2021-06-16",
      "title": "v2.11.7 (2021-06-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#6455 - Permit /32 IPv4 and /128 IPv6 prefixes</li> <li>#6493 - Show change log diff for non-atomic (pre-2.11) changes</li> <li>#6564 - Add N connector type for pass-through ports</li> <li>#6588 - Add support for webp files as front/rear device type images</li> <li>#6589 - Standardize breadcrumb navigation for power panels and feeds</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6553 - ProviderNetwork search should match on name</li> <li>#6562 - Disable ordering of secrets by assigned object</li> <li>#6563 - Fix filtering by location for cable connection forms</li> <li>#6584 - Fix ordering of nested inventory items</li> <li>#6602 - Fix deletion of devices with cables attached</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2116-2021-06-04",
      "title": "v2.11.6 (2021-06-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6544 - Fix migration error when upgrading with VRF(s) defined</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2115-2021-06-04",
      "title": "v2.11.5 (2021-06-04)",
      "text": "<p>NOTE: This release includes a database migration that calculates and annotates prefix depth. It may impose a noticeable delay on the upgrade process: Users should anticipate roughly one minute of delay per 100 thousand prefixes being updated.</p>"
    },
    {
      "location": "release-notes/version-2.11/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#6087 - Improved prefix hierarchy rendering</li> <li>#6487 - Add location filter to cable connection form</li> <li>#6501 - Expose prefix depth and children on REST API serializer</li> <li>#6527 - Support Markdown for report descriptions</li> <li>#6540 - Add a \"flat\" column to the prefix table</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6064 - Fix object permission assignments for user and group models</li> <li>#6217 - Disallow passing of string values for integer custom fields</li> <li>#6284 - Avoid sending redundant webhooks when adding/removing tags</li> <li>#6492 - Correct tag population in post-change data resulting from REST API changes</li> <li>#6496 - Fix upgrade script when Python installed in nonstandard path</li> <li>#6502 - Correct permissions evaluation for running a report via the REST API</li> <li>#6517 - Fix assignment of user when creating rack reservations via REST API</li> <li>#6525 - Paginate related IPs table under IP address view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2114-2021-05-25",
      "title": "v2.11.4 (2021-05-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#5121 - Add content type filters for tags</li> <li>#6358 - Add search field for VLAN groups</li> <li>#6393 - Add <code>description</code> filter for IP addresses</li> <li>#6400 - Add cyan color choice for plugin buttons</li> <li>#6422 - Enable filtering users by group under admin UI</li> <li>#6441 - Improve UI paginator to optimize page object count</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6376 - Fix assignment of VLAN groups to clusters, cluster groups via REST API</li> <li>#6398 - Avoid exception when deleting device connected to self via circuit</li> <li>#6426 - Allow assigning virtual chassis member interfaces to LAG on VC master</li> <li>#6438 - Fix missing descriptions and label for device type imports and exports</li> <li>#6465 - Fix typo in installed plugins REST API endpoint</li> <li>#6467 - Fix access to metrics on custom <code>BASE_PATH</code> when login is required</li> <li>#6468 - Disable ordering VLAN groups list by scope object</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2113-2021-05-07",
      "title": "v2.11.3 (2021-05-07)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#6197 - Introduced <code>SESSION_COOKIE_NAME</code> config parameter</li> <li>#6318 - Add OM5 MMF cable type</li> <li>#6351 - Add aggregates count to tenant view</li> <li>#6359 - Enable custom links for organizational and nested group models</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6240 - Fix display of available VLAN ranges under VLAN group view</li> <li>#6308 - Fix linking of available VLANs in VLAN group view</li> <li>#6309 - Restrict parent VM interface assignment to the parent VM</li> <li>#6312 - Interface device filter should return all virtual chassis interfaces only if device is master</li> <li>#6313 - Fix device type instance count under manufacturer view</li> <li>#6321 - Restore \"add an IP\" button under prefix IPs view</li> <li>#6333 - Fix filtering of circuit terminations by primary key</li> <li>#6339 - Improve ordering of interfaces when viewing virtual chassis master</li> <li>#6350 - Include first &amp; last IP addresses when allocating available IPv6 addresses via the REST API</li> <li>#6355 - Fix caching error when swapping A/Z circuit terminations</li> <li>#6357 - Fix ProviderNetwork nested API serializer</li> <li>#6363 - Correct pre-population of cluster group when creating a cluster</li> <li>#6369 - Fix interface assignment for VLANs in non-scoped groups</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2112-2021-04-27",
      "title": "v2.11.2 (2021-04-27)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#6275 - Linkify rack, device counts on locations list</li> <li>#6278 - Note device locations on cable traces</li> <li>#6287 - Add option to clear assigned max length filter on prefixes list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6236 - Journal entry title should account for configured timezone</li> <li>#6246 - Permit full-length descriptions when creating device components and VM interfaces</li> <li>#6248 - Fix table column reconfiguration under Chrome</li> <li>#6252 - Fix assignment of console port speed values above 19.2kbps</li> <li>#6254 - Disable ordering of space column in racks table</li> <li>#6258 - Fix parent assignment for SiteGroup API serializer</li> <li>#6262 - Support filtering by created/updated time for all relevant objects</li> <li>#6267 - Fix cable tracing API endpoint for circuit terminations</li> <li>#6289 - Fix assignment of VC member interfaces to LAG interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2111-2021-04-21",
      "title": "v2.11.1 (2021-04-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#6161 - Enable ordering of device component tables</li> <li>#6179 - Enable natural ordering for virtual machines</li> <li>#6189 - Add ability to search for locations by name or description</li> <li>#6190 - Allow filtering devices with no location assigned</li> <li>#6210 - Include child locations on location view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes_11",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6184 - Fix parent object table column in prefix IP addresses list</li> <li>#6188 - Support custom field filtering for regions, site groups, and locations</li> <li>#6196 - Fix object list display for users with read-only permissions</li> <li>#6215 - Restore tenancy section in virtual machine form</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#v2110-2021-04-16",
      "title": "v2.11.0 (2021-04-16)",
      "text": "<p>Note: NetBox v2.11 is the last major release that will support Python 3.6. Beginning with NetBox v3.0, Python 3.7 or later will be required.</p>"
    },
    {
      "location": "release-notes/version-2.11/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>All objects now use numeric IDs in their UI view URLs instead of slugs. You may need to update external references to NetBox objects. (Note that this does not affect the REST API.)</li> <li>The UI now uses numeric IDs when filtering object lists. You may need to update external links to filtered object lists. (Note that the slug- and name-based filters will continue to work, however the filter selection fields within the UI will not be automatically populated.)</li> <li>The RackGroup model has been renamed to Location (see #4971). Its REST API endpoint has changed from <code>/api/dcim/rack-groups/</code> to <code>/api/dcim/locations/</code>.</li> <li>The foreign key field <code>group</code> on dcim.Rack has been renamed to <code>location</code>.</li> <li>The foreign key field <code>site</code> on ipam.VLANGroup has been replaced with the <code>scope</code> generic foreign key (see #5284).</li> <li>Custom script ObjectVars no longer support the <code>queryset</code> parameter: Use <code>model</code> instead (see #5995).</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.11/#journaling-support-151",
      "title": "Journaling Support (#151)",
      "text": "<p>NetBox now supports journaling for all primary objects. The journal is a collection of human-generated notes and comments about an object maintained for historical context. It supplements NetBox's change log to provide additional information about why changes have been made or to convey events which occur outside NetBox. Unlike the change log, in which records typically expire after some time, journal entries persist for the life of the associated object.</p>"
    },
    {
      "location": "release-notes/version-2.11/#parent-interface-assignments-1519",
      "title": "Parent Interface Assignments (#1519)",
      "text": "<p>Virtual device and VM interfaces can now be assigned to a \"parent\" interface by setting the <code>parent</code> field on the interface object. This is helpful for associating subinterfaces with their physical counterpart. For example, you might assign virtual interfaces Gi0/0.100 and Gi0/0.200 as children of the physical interface Gi0/0.</p>"
    },
    {
      "location": "release-notes/version-2.11/#pre-and-post-change-snapshots-in-webhooks-3451",
      "title": "Pre- and Post-Change Snapshots in Webhooks (#3451)",
      "text": "<p>In conjunction with the newly improved change logging functionality (#5913), outgoing webhooks now include both pre- and post-change representations of the modified object. These are available in the rendering context as a dictionary named <code>snapshots</code> with keys <code>prechange</code> and <code>postchange</code>. For example, here are the abridged snapshots resulting from renaming a site and changing its status:</p> <pre><code>\"snapshots\": {\n    \"prechange\": {\n        \"name\": \"Site 1\",\n        \"slug\": \"site-1\",\n        \"status\": \"active\",\n        ...\n    },\n    \"postchange\": {\n        \"name\": \"Site 2\",\n        \"slug\": \"site-2\",\n        \"status\": \"planned\",\n        ...\n    }\n}\n</code></pre> <p>Note: The pre-change snapshot for a newly created will always be null, as will the post-change snapshot for a deleted object.</p>"
    },
    {
      "location": "release-notes/version-2.11/#mark-as-connected-without-a-cable-3648",
      "title": "Mark as Connected Without a Cable (#3648)",
      "text": "<p>Cable termination objects (circuit terminations, power feeds, and most device components) can now be marked as \"connected\" without actually attaching a cable. This helps simplify the process of modeling an infrastructure boundary where we don't necessarily know or care what is connected to an attachment point, but still need to reflect the termination as being occupied.</p> <p>In addition to the new <code>mark_connected</code> boolean field, the REST API representation of these objects now also includes a read-only boolean field named <code>_occupied</code>. This conveniently returns true if either a cable is attached or <code>mark_connected</code> is true.</p>"
    },
    {
      "location": "release-notes/version-2.11/#allow-assigning-devices-to-locations-4971",
      "title": "Allow Assigning Devices to Locations (#4971)",
      "text": "<p>Devices can now be assigned to locations (formerly known as rack groups) within a site without needing to be assigned to a particular rack. This is handy for assigning devices to rooms or floors within a building where racks are not used. The <code>location</code> foreign key field has been added to the Device model to support this.</p>"
    },
    {
      "location": "release-notes/version-2.11/#dynamic-object-exports-4999",
      "title": "Dynamic Object Exports (#4999)",
      "text": "<p>When exporting a list of objects in NetBox, users now have the option of selecting the \"current view\". This will render CSV output matching the current configuration of the table being viewed. For example, if you modify the sites list to display only the site name, tenant, and status, the rendered CSV will include only these columns, and they will appear in the order chosen.</p> <p>The legacy static export behavior has been retained to ensure backward compatibility for dependent integrations. However, users are strongly encouraged to adapt custom export templates where needed as this functionality will be removed in v3.0.</p>"
    },
    {
      "location": "release-notes/version-2.11/#variable-scope-support-for-vlan-groups-5284",
      "title": "Variable Scope Support for VLAN Groups (#5284)",
      "text": "<p>In previous releases, VLAN groups could be assigned only to a site. To afford more flexibility in conveying the true scope of an L2 domain, a VLAN group can now be assigned to a region, site group (new in v2.11), site, location, or rack. VLANs assigned to a group will be available only to devices and virtual machines which exist within its scope.</p> <p>For example, a VLAN within a group assigned to a location will be available only to devices assigned to that location (or one of its child locations), or to a rack within that location.</p>"
    },
    {
      "location": "release-notes/version-2.11/#new-site-group-model-5892",
      "title": "New Site Group Model (#5892)",
      "text": "<p>This release introduces the new SiteGroup model, which can be used to organize sites similar to the existing Region model. Whereas regions are intended for geographically arranging sites into countries, states, and so on, the new site group model can be used to organize sites by functional role or other arbitrary classification. Using regions and site groups in conjunction provides two dimensions along which sites can be organized, offering greater flexibility to the user.</p>"
    },
    {
      "location": "release-notes/version-2.11/#improved-change-logging-5913",
      "title": "Improved Change Logging (#5913)",
      "text": "<p>The ObjectChange model (which is used to record the creation, modification, and deletion of NetBox objects) now explicitly records the pre-change and post-change state of each object, rather than only the post-change state. This was done to present a more clear depiction of each change being made, and to prevent the erroneous association of a previous unlogged change with its successor.</p>"
    },
    {
      "location": "release-notes/version-2.11/#provider-network-modeling-5986",
      "title": "Provider Network Modeling (#5986)",
      "text": "<p>A new provider network model has been introduced to represent the boundary of a network that exists outside the scope of NetBox. Each instance of this model must be assigned to a provider, and circuits can now terminate to either provider networks or to sites. The use of this model will likely be extended by future releases to support overlay and virtual circuit modeling.</p>"
    },
    {
      "location": "release-notes/version-2.11/#enhancements_10",
      "title": "Enhancements",
      "text": "<ul> <li>#4833 - Allow assigning config contexts by device type</li> <li>#5344 - Add support for custom fields in tables</li> <li>#5370 - Extend custom field support to organizational models</li> <li>#5375 - Add <code>speed</code> attribute to console port models</li> <li>#5401 - Extend custom field support to device component models</li> <li>#5425 - Create separate tabs for VMs and devices under the cluster view</li> <li>#5451 - Add support for multiple-selection custom fields</li> <li>#5608 - Add REST API endpoint for custom links</li> <li>#5610 - Add REST API endpoint for webhooks</li> <li>#5757 - Add unique identifier to every object view</li> <li>#5830 - Add <code>as_attachment</code> to ExportTemplate to control download behavior</li> <li>#5848 - Filter custom fields by content type in format <code>&lt;app_label&gt;.&lt;model&gt;</code></li> <li>#5891 - Add <code>display</code> field to all REST API serializers</li> <li>#5894 - Use primary keys when filtering object lists by related objects in the UI</li> <li>#5895 - Rename RackGroup to Location</li> <li>#5901 - Add <code>created</code> and <code>last_updated</code> fields to device component models</li> <li>#5971 - Add dedicated views for organizational models</li> <li>#5972 - Enable bulk editing for organizational models</li> <li>#5975 - Allow partial (decimal) vCPU allocations for virtual machines</li> <li>#6001 - Paginate component tables under device views</li> <li>#6038 - Include tagged objects list on tag view</li> <li>#6088 - Improved table configuration form</li> <li>#6097 - Redirect old slug-based object views</li> <li>#6125 - Add locations count to home page</li> <li>#6146 - Add bulk disconnect support for power feeds</li> <li>#6149 - Support image attachments for locations</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#bug-fixes-from-v211-beta1",
      "title": "Bug Fixes (from v2.11-beta1)",
      "text": "<ul> <li>#5583 - Eliminate redundant change records when adding/removing tags</li> <li>#6100 - Fix VM interfaces table \"add interfaces\" link</li> <li>#6104 - Fix location column on racks table</li> <li>#6105 - Hide checkboxes for VMs under cluster VMs view</li> <li>#6106 - Allow assigning a virtual interface as the parent of an existing interface</li> <li>#6107 - Fix rack selection field on device form</li> <li>#6110 - Fix handling of TemplateColumn values for table export</li> <li>#6123 - Prevent device from being assigned to mismatched site and location</li> <li>#6124 - Location <code>parent</code> filter should return all child locations (not just those directly assigned)</li> <li>#6130 - Improve display of assigned models in custom fields list</li> <li>#6155 - Fix admin links for plugins, background tasks</li> <li>#6171 - Fix display of horizontally-scrolling object lists</li> <li>#6173 - Fix assigned device/VM count when bulk editing/deleting device roles</li> <li>#6176 - Correct position of MAC address field when creating VM interfaces</li> <li>#6177 - Prevent VM interface from being assigned as its own parent</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#other-changes_1",
      "title": "Other Changes",
      "text": "<ul> <li>#1638 - Migrate all primary keys to 64-bit integers</li> <li>#5873 - Use numeric IDs in all object URLs</li> <li>#5938 - Deprecated support for Python 3.6</li> <li>#5990 - Deprecated <code>display_field</code> parameter for custom script ObjectVar and MultiObjectVar fields</li> <li>#5995 - Dropped backward compatibility for <code>queryset</code> parameter on ObjectVar and MultiObjectVar (use <code>model</code> instead)</li> <li>#6014 - Moved the virtual machine interfaces list to a separate view</li> <li>#6071 - Cable traces now traverse circuits</li> </ul>"
    },
    {
      "location": "release-notes/version-2.11/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>All primary keys are now 64-bit integers</li> <li>All model serializers now include a <code>display</code> field to be used for the presentation of an object to a human user</li> <li>All device components<ul> <li>Added support for custom fields</li> <li>Added <code>created</code> and <code>last_updated</code> fields to track object creation and modification</li> </ul> </li> <li>All device component templates<ul> <li>Added <code>created</code> and <code>last_updated</code> fields to track object creation and modification</li> </ul> </li> <li>All organizational models<ul> <li>Added support for custom fields</li> </ul> </li> <li>All cable termination models (cabled device components, power feeds, and circuit terminations)<ul> <li>Added <code>mark_connected</code> boolean field to force connection status</li> <li>Added <code>_occupied</code> read-only boolean field as common attribute for determining whether an object is occupied</li> </ul> </li> <li>Renamed RackGroup to Location<ul> <li>The <code>/dcim/rack-groups/</code> endpoint is now <code>/dcim/locations/</code></li> </ul> </li> <li>circuits.CircuitTermination<ul> <li>Added the <code>provider_network</code> field</li> <li>Removed the <code>connected_endpoint</code>, <code>connected_endpoint_type</code>, and <code>connected_endpoint_reachable</code> fields</li> <li>The <code>trace/</code> endpoint has been replaced with <code>paths/</code></li> </ul> </li> <li>circuits.ProviderNetwork<ul> <li>Added the <code>/api/circuits/provider-networks/</code> endpoint</li> </ul> </li> <li>dcim.Device<ul> <li>Added the <code>location</code> field</li> </ul> </li> <li>dcim.Interface<ul> <li>Added the <code>parent</code> field</li> </ul> </li> <li>dcim.PowerPanel<ul> <li>Renamed <code>rack_group</code> field to <code>location</code></li> </ul> </li> <li>dcim.Rack<ul> <li>Renamed <code>group</code> field to <code>location</code></li> </ul> </li> <li>dcim.Site<ul> <li>Added the <code>group</code> foreign key field to SiteGroup</li> </ul> </li> <li>dcim.SiteGroup<ul> <li>Added the <code>/api/dcim/site-groups/</code> endpoint</li> </ul> </li> <li>extras.ConfigContext<ul> <li>Added the <code>site_groups</code> many-to-many field to track the assignment of ConfigContexts to SiteGroups</li> </ul> </li> <li>extras.CustomField<ul> <li>Added new custom field type: <code>multi-select</code></li> </ul> </li> <li>extras.CustomLink<ul> <li>Added the <code>/api/extras/custom-links/</code> endpoint</li> </ul> </li> <li>extras.ExportTemplate<ul> <li>Added the <code>as_attachment</code> boolean field</li> </ul> </li> <li>extras.ObjectChange<ul> <li>Added the <code>prechange_data</code> field</li> <li>Renamed <code>object_data</code> to <code>postchange_data</code></li> </ul> </li> <li>extras.Webhook<ul> <li>Added the <code>/api/extras/webhooks/</code> endpoint</li> </ul> </li> <li>ipam.VLANGroup<ul> <li>Added the <code>scope_type</code>, <code>scope_id</code>, and <code>scope</code> fields (<code>scope</code> is a generic foreign key)</li> <li>Dropped the <code>site</code> foreign key field</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li><code>vcpus</code> has been changed from an integer to a decimal value</li> </ul> </li> <li>virtualization.VMInterface<ul> <li>Added the <code>parent</code> field</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/",
      "title": "NetBox v2.2 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#v2210-2018-02-21",
      "title": "v2.2.10 (2018-02-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#78 - Extended topology maps to support console and power connections</li> <li>#1693 - Allow specifying loose or exact matching for custom field filters</li> <li>#1714 - Standardized CSV export functionality for all object lists</li> <li>#1876 - Added explanatory title text to disabled NAPALM buttons on device view</li> <li>#1885 - Added a device filter field for primary IP</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1858 - Include device/VM count for cluster list in global search results</li> <li>#1859 - Implemented support for line breaks within CSV fields</li> <li>#1860 - Do not populate initial values for custom fields when editing objects in bulk</li> <li>#1869 - Corrected ordering of VRFs with duplicate names</li> <li>#1886 - Allow setting the primary IPv4/v6 address for a virtual machine via the web UI</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v229-2018-01-31",
      "title": "v2.2.9 (2018-01-31)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#144 - Implemented bulk import/edit/delete views for InventoryItems</li> <li>#1073 - Include prefixes/IPs from all VRFs when viewing the children of a container prefix in the global table</li> <li>#1366 - Enable searching for regions by name/slug</li> <li>#1406 - Display tenant description as title text in object tables</li> <li>#1824 - Add virtual machine count to platforms list</li> <li>#1835 - Consistent positioning of previous/next rack buttons</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1621 - Tweaked LLDP interface name evaluation logic</li> <li>#1765 - Improved rendering of null options for model choice fields in filter forms</li> <li>#1807 - Populate VRF from parent when creating a new prefix</li> <li>#1809 - Populate tenant assignment from parent when creating a new prefix</li> <li>#1818 - InventoryItem API serializer no longer requires specifying a null value for items with no parent</li> <li>#1845 - Correct display of VMs in list with no role assigned</li> <li>#1850 - Fix TypeError when attempting IP address import if only unnamed devices exist</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v228-2017-12-20",
      "title": "v2.2.8 (2017-12-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#1771 - Added name filter for racks</li> <li>#1772 - Added position filter for devices</li> <li>#1773 - Moved child prefixes table to its own view</li> <li>#1774 - Include a button to refine search results for all object types under global search</li> <li>#1784 - Added <code>cluster_type</code> filters for virtual machines</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1766 - Fixed display of \"select all\" button on device power outlets list</li> <li>#1767 - Use proper template for 404 responses</li> <li>#1778 - Preserve initial VRF assignment when adding IP addresses in bulk from a prefix</li> <li>#1783 - Added <code>vm_role</code> filter for device roles</li> <li>#1785 - Omit filter forms from browsable API</li> <li>#1787 - Added missing site field to virtualization cluster CSV export</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v227-2017-12-07",
      "title": "v2.2.7 (2017-12-07)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#1722 - Added virtual machine count to site view</li> <li>#1737 - Added a <code>contains</code> API filter to find all prefixes containing a given IP or prefix</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1712 - Corrected tenant inheritance for new IP addresses created from a parent prefix</li> <li>#1721 - Differentiated child IP count from utilization percentage for prefixes</li> <li>#1740 - Delete session_key cookie on logout</li> <li>#1741 - Fixed Unicode support for secret plaintexts</li> <li>#1743 - Include number of instances for device types in global search</li> <li>#1751 - Corrected filtering for IPv6 addresses containing letters</li> <li>#1756 - Improved natural ordering of console server ports and power outlets</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v226-2017-11-16",
      "title": "v2.2.6 (2017-11-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#1669 - Clicking \"add an IP\" from the prefix view will default to the first available IP within the prefix</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1397 - Display global search in navigation menu unless display is less than 1200px wide</li> <li>#1599 - Reduce mobile cut-off for navigation menu to 960px</li> <li>#1715 - Added missing import buttons on object lists</li> <li>#1717 - Fixed interface validation for virtual machines</li> <li>#1718 - Set empty label to \"Global\" or VRF field in IP assignment form</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v225-2017-11-14",
      "title": "v2.2.5 (2017-11-14)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#1512 - Added a view to search for an IP address being assigned to an interface</li> <li>#1679 - Added IP address roles to device/VM interface lists</li> <li>#1683 - Replaced default 500 handler with custom middleware to provide preliminary troubleshooting assistance</li> <li>#1684 - Replaced prefix <code>parent</code> filter with <code>within</code> and <code>within_include</code></li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1471 - Correct bulk selection of IP addresses within a prefix assigned to a VRF</li> <li>#1642 - Validate device type classification when creating console server ports and power outlets</li> <li>#1650 - Correct numeric ordering for interfaces with no alphabetic type</li> <li>#1676 - Correct filtering of child prefixes upon bulk edit/delete from the parent prefix view</li> <li>#1689 - Disregard IP address mask when filtering for child IPs of a prefix</li> <li>#1696 - Fix for NAPALM v2.0+</li> <li>#1699 - Correct nested representation in the API of primary IPs for virtual machines and add missing primary_ip property</li> <li>#1701 - Fixed validation in <code>extras/0008_reports.py</code> migration for certain versions of PostgreSQL</li> <li>#1703 - Added API serializer validation for custom integer fields</li> <li>#1705 - Fixed filtering of devices with a status of offline</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v224-2017-10-31",
      "title": "v2.2.4 (2017-10-31)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1670 - Fixed server error when calling certain filters (regression from #1649)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v223-2017-10-31",
      "title": "v2.2.3 (2017-10-31)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#999 - Display devices on which circuits are terminated in circuits list</li> <li>#1491 - Added initial data for the virtualization app</li> <li>#1620 - Loosen IP address search filter to match all IPs that start with the given string</li> <li>#1631 - Added a <code>post_run</code> method to the Report class</li> <li>#1666 - Allow modifying the owner of a rack reservation</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1513 - Correct filtering of custom field choices</li> <li>#1603 - Hide selection checkboxes for tables with no available actions</li> <li>#1618 - Allow bulk deletion of all virtual machines</li> <li>#1619 - Correct text-based filtering of IP network and address fields</li> <li>#1624 - Add VM count to device roles table</li> <li>#1634 - Cluster should not be a required field when importing child devices</li> <li>#1649 - Correct filtering on null values (e.g. ?tenant_id=0) for django-filters v1.1.0+</li> <li>#1653 - Remove outdated description for DeviceType's <code>is_network_device</code> flag</li> <li>#1664 - Added missing <code>serial</code> field in default rack CSV export</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v222-2017-10-17",
      "title": "v2.2.2 (2017-10-17)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#1580 - Allow cluster assignment when bulk importing devices</li> <li>#1587 - Add primary IP column for virtual machines in global search results</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1498 - Avoid duplicating nodes when generating topology maps</li> <li>#1579 - Devices already assigned to a cluster cannot be added to a different cluster</li> <li>#1582 - Add <code>virtual_machine</code> attribute to IPAddress</li> <li>#1584 - Colorized virtual machine role column</li> <li>#1585 - Fixed slug-based filtering of virtual machines</li> <li>#1605 - Added clusters and virtual machines to object list for global search</li> <li>#1609 - Added missing <code>virtual_machine</code> field to IP address interface serializer</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v221-2017-10-12",
      "title": "v2.2.1 (2017-10-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1576 - Moved PostgreSQL validation logic into the relevant migration (fixed ImproperlyConfigured exception on init)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#v220-2017-10-12",
      "title": "v2.2.0 (2017-10-12)",
      "text": "<p>Note: This release requires PostgreSQL 9.4 or higher. Do not attempt to upgrade unless you are running at least PostgreSQL 9.4.</p> <p>Note: The release replaces the deprecated pycrypto library with pycryptodome. The upgrade script has been extended to automatically uninstall the old library, but please verify your installed packages with <code>pip freeze | grep pycrypto</code> if you run into problems.</p>"
    },
    {
      "location": "release-notes/version-2.2/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.2/#virtual-machines-and-clusters-142",
      "title": "Virtual Machines and Clusters (#142)",
      "text": "<p>Our second-most popular feature request has arrived! NetBox now supports the creation of virtual machines, which can be assigned virtual interfaces and IP addresses. VMs are arranged into clusters, each of which has a type and (optionally) a group.</p>"
    },
    {
      "location": "release-notes/version-2.2/#custom-validation-reports-1511",
      "title": "Custom Validation Reports (#1511)",
      "text": "<p>Users can now create custom reports which are run to validate data in NetBox. Reports work very similar to Python unit tests: Each report inherits from NetBox's Report class and contains one or more test method. Reports can be run and retrieved via the web UI, API, or CLI. See the docs for more info.</p>"
    },
    {
      "location": "release-notes/version-2.2/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#494 - Include asset tag in device info pop-up on rack elevation</li> <li>#1444 - Added a <code>serial</code> field to the rack model</li> <li>#1479 - Added an IP address role for CARP</li> <li>#1506 - Extended rack facility ID field from 30 to 50 characters</li> <li>#1510 - Added ability to search by name when adding devices to a cluster</li> <li>#1527 - Replace deprecated pycrypto library with pycryptodome</li> <li>#1551 - Added API endpoints listing static field choices for each app</li> <li>#1556 - Added CPAK, CFP2, and CFP4 100GE interface form factors</li> <li>Added CSV import views for all object types</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1550 - Corrected interface connections link in navigation menu</li> <li>#1554 - Don't require form_factor when creating an interface assigned to a virtual machine</li> <li>#1557 - Added filtering for virtual machine interfaces</li> <li>#1567 - Prompt user for session key when importing secrets</li> </ul>"
    },
    {
      "location": "release-notes/version-2.2/#api-changes",
      "title": "API Changes",
      "text": "<ul> <li>Introduced the virtualization app and its associated endpoints at <code>/api/virtualization</code></li> <li>Added the <code>/api/extras/reports</code> endpoint for fetching and running reports</li> <li>The <code>ipam.Service</code> and <code>dcim.Interface</code> models now have a <code>virtual_machine</code> field in addition to the <code>device</code> field. Only one of the two fields may be defined for each object</li> <li>Added a <code>vm_role</code> field to <code>dcim.DeviceRole</code>, which indicates whether a role is suitable for assigned to a virtual machine</li> <li>Added a <code>serial</code> field to 'dcim.Rack` for serial numbers</li> <li>Each app now has a <code>_choices</code> endpoint, which lists the available options for all model field with static choices (e.g. interface form factors)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/",
      "title": "NetBox v2.3 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#v237-2018-07-26",
      "title": "v2.3.7 (2018-07-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#2166 - Enable partial matching on device asset_tag during search</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1977 - Fixed exception when creating a virtual chassis with a non-master device in position 1</li> <li>#1992 - Isolate errors when one of multiple NAPALM methods fails</li> <li>#2202 - Ditched half-baked concept of tenancy inheritance via VRF</li> <li>#2222 - IP addresses created via the <code>available-ips</code> API endpoint should have the same mask as their parent prefix (not /32)</li> <li>#2231 - Remove <code>get_absolute_url()</code> from DeviceRole (can apply to devices or VMs)</li> <li>#2250 - Include stat counters on report result navigation</li> <li>#2255 - Corrected display of results in reports list</li> <li>#2256 - Prevent navigation menu overlap when jumping to test results on report page</li> <li>#2257 - Corrected casting of RIR utilization stats as floats</li> <li>#2266 - Permit additional logging of exceptions beyond custom middleware</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#v236-2018-07-16",
      "title": "v2.3.6 (2018-07-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#2107 - Added virtual chassis to global search</li> <li>#2125 - Show child status in device bay list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2214 - Error when assigning a VLAN to an interface on a VM in a cluster with no assigned site</li> <li>#2239 - Pin django-filter to version 1.1.0</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#v235-2018-07-02",
      "title": "v2.3.5 (2018-07-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#2159 - Allow custom choice field to specify a default choice</li> <li>#2177 - Include device serial number in rack elevation pop-up</li> <li>#2194 - Added <code>address</code> filter to IPAddress model</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1826 - Corrected description of security parameters under API definition</li> <li>#2021 - Fix recursion error when viewing API docs under Python 3.4</li> <li>#2064 - Disable calls to online swagger validator</li> <li>#2173 - Fixed IndexError when automatically allocating IP addresses from large IPv6 prefixes</li> <li>#2181 - Raise validation error on invalid <code>prefix_length</code> when allocating next-available prefix</li> <li>#2182 - ValueError can be raised when viewing the interface connections table</li> <li>#2191 - Added missing static choices to circuits and DCIM API endpoints</li> <li>#2192 - Prevent a 0U device from being assigned to a rack position</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#v234-2018-06-07",
      "title": "v2.3.4 (2018-06-07)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2066 - Catch <code>AddrFormatError</code> exception on invalid IP addresses</li> <li>#2075 - Enable tenant assignment when creating a rack reservation via the API</li> <li>#2083 - Add missing export button to rack roles list view</li> <li>#2087 - Don't overwrite existing vc_position of master device when creating a virtual chassis</li> <li>#2093 - Fix link to circuit termination in device interfaces table</li> <li>#2097 - Fixed queryset-based bulk deletion of clusters and regions</li> <li>#2098 - Fixed missing checkboxes for host devices in cluster view</li> <li>#2127 - Prevent non-conntectable interfaces from being connected</li> <li>#2143 - Accept null value for empty time zone field</li> <li>#2148 - Do not force timezone selection when editing sites in bulk</li> <li>#2150 - Fix display of LLDP neighbors when interface name contains a colon</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#v233-2018-04-19",
      "title": "v2.3.3 (2018-04-19)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#1990 - Improved search function when assigning an IP address to an interface</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1975 - Correct filtering logic for custom boolean fields</li> <li>#1988 - Order interfaces naturally when bulk renaming</li> <li>#1993 - Corrected status choices in site CSV import form</li> <li>#1999 - Added missing description field to site edit form</li> <li>#2012 - Fixed deselection of an IP address as the primary IP for its parent device/VM</li> <li>#2014 - Allow assignment of VLANs to VM interfaces via the API</li> <li>#2019 - Avoid casting oversized numbers as integers</li> <li>#2022 - Show 0 for zero-value fields on CSV export</li> <li>#2023 - Manufacturer should not be a required field when importing platforms</li> <li>#2037 - Fixed IndexError exception when attempting to create a new rack reservation</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#v232-2018-03-22",
      "title": "v2.3.2 (2018-03-22)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#1586 - Extend bulk interface creation to support alphanumeric characters</li> <li>#1866 - Introduced AnnotatedMultipleChoiceField for filter forms</li> <li>#1930 - Switched to drf-yasg for Swagger API documentation</li> <li>#1944 - Enable assigning VLANs to virtual machine interfaces</li> <li>#1945 - Implemented a VLAN members view</li> <li>#1949 - Added a button to view elevations on rack groups list</li> <li>#1952 - Implemented a more robust mechanism for assigning VLANs to interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1948 - Fix TypeError when attempting to add a member to an existing virtual chassis</li> <li>#1951 - Fix TypeError exception when importing platforms</li> <li>#1953 - Ignore duplicate IPs when calculating prefix utilization</li> <li>#1955 - Require a plaintext value when creating a new secret</li> <li>#1978 - Include all virtual chassis member interfaces in LLDP neighbors view</li> <li>#1980 - Fixed bug when trying to nullify a selection custom field under Python 2</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#v231-2018-03-01",
      "title": "v2.3.1 (2018-03-01)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#1910 - Added filters for cluster group and cluster type</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1915 - Redirect to device view after deleting a component</li> <li>#1919 - Prevent exception when attempting to create a virtual machine without selecting devices</li> <li>#1921 - Ignore ManyToManyFields when validating a new object created via the API</li> <li>#1924 - Include VID in VLAN lists when editing an interface</li> <li>#1926 - Prevent reassignment of parent device when bulk editing VC member interfaces</li> <li>#1927 - Include all VC member interfaces on A side when creating a new interface connection</li> <li>#1928 - Fixed form validation when modifying VLANs assigned to an interface</li> <li>#1934 - Fixed exception when rendering export template on an object type with custom fields assigned</li> <li>#1935 - Correct API validation of VLANs assigned to interfaces</li> <li>#1936 - Trigger validation error when attempting to create a virtual chassis without specifying member positions</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#v230-2018-02-26",
      "title": "v2.3.0 (2018-02-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.3/#virtual-chassis-99",
      "title": "Virtual Chassis (#99)",
      "text": "<p>A virtual chassis represents a set of physical devices with a shared control plane; for example, a stack of switches managed as a single device. Viewing the master device of a virtual chassis will show all member interfaces and IP addresses.</p>"
    },
    {
      "location": "release-notes/version-2.3/#interface-vlan-assignments-150",
      "title": "Interface VLAN Assignments (#150)",
      "text": "<p>Interfaces can now be assigned an 802.1Q mode (access or trunked) and associated with particular VLANs. Thanks to John Anderson for his work on this!</p>"
    },
    {
      "location": "release-notes/version-2.3/#bulk-object-creation-via-the-api-1553",
      "title": "Bulk Object Creation via the API (#1553)",
      "text": "<p>The REST API now supports the creation of multiple objects of the same type using a single POST request. For example, to create multiple devices:</p> <pre><code>curl -X POST -H \"Authorization: Token &lt;TOKEN&gt;\" -H \"Content-Type: application/json\" -H \"Accept: application/json; indent=4\" http://localhost:8000/api/dcim/devices/ --data '[\n{\"name\": \"device1\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n{\"name\": \"device2\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n{\"name\": \"device3\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n]'\n</code></pre> <p>Bulk creation is all-or-none: If any of the creations fails, the entire operation is rolled back.</p>"
    },
    {
      "location": "release-notes/version-2.3/#automatic-provisioning-of-next-available-prefixes-1694",
      "title": "Automatic Provisioning of Next Available Prefixes (#1694)",
      "text": "<p>Similar to IP addresses, NetBox now supports automated provisioning of available prefixes from within a parent prefix. For example, to retrieve the next three available /28s within a parent /24:</p> <pre><code>curl -X POST -H \"Authorization: Token &lt;TOKEN&gt;\" -H \"Content-Type: application/json\" -H \"Accept: application/json; indent=4\" http://localhost:8000/api/ipam/prefixes/10153/available-prefixes/ --data '[\n{\"prefix_length\": 28},\n{\"prefix_length\": 28},\n{\"prefix_length\": 28}\n]'\n</code></pre> <p>If the parent prefix cannot accommodate all requested prefixes, the operation is cancelled and no new prefixes are created.</p>"
    },
    {
      "location": "release-notes/version-2.3/#bulk-renaming-of-devicevm-components-1781",
      "title": "Bulk Renaming of Device/VM Components (#1781)",
      "text": "<p>Device components (interfaces, console ports, etc.) can now be renamed in bulk via the web interface. This was implemented primarily to support the bulk renumbering of interfaces whose parent is part of a virtual chassis.</p>"
    },
    {
      "location": "release-notes/version-2.3/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#1283 - Added a <code>time_zone</code> field to the site model</li> <li>#1321 - Added <code>created</code> and <code>last_updated</code> fields for relevant models to their API serializers</li> <li>#1553 - Introduced support for bulk object creation via the API</li> <li>#1592 - Added tenancy assignment for rack reservations</li> <li>#1744 - Allow associating a platform with a specific manufacturer</li> <li>#1758 - Added a <code>status</code> field to the site model</li> <li>#1821 - Added a <code>description</code> field to the site model</li> <li>#1864 - Added a <code>status</code> field to the circuit model</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#1136 - Enforce model validation during bulk update</li> <li>#1645 - Simplified interface serialzier for IP addresses and optimized API view queryset</li> <li>#1838 - Fix KeyError when attempting to create a VirtualChassis with no devices selected</li> <li>#1847 - RecursionError when a virtual chasis master device has no name</li> <li>#1848 - Allow null value for interface encapsulation mode</li> <li>#1867 - Allow filtering on device status with multiple values</li> <li>#1881* - Fixed bulk editing of interface 802.1Q settings</li> <li>#1884* - Provide additional context to identify devices when creating/editing a virtual chassis</li> <li>#1907 - Allow removing an IP as the primary for a device when editing the IP directly</li> </ul> <p>* New since v2.3-beta2</p>"
    },
    {
      "location": "release-notes/version-2.3/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Constants representing device status have been renamed for clarity (for example, <code>STATUS_ACTIVE</code> is now <code>DEVICE_STATUS_ACTIVE</code>). Custom validation reports will need to be updated if they reference any of these constants.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.3/#api-changes",
      "title": "API Changes",
      "text": "<ul> <li>API creation calls now accept either a single JSON object or a list of JSON objects. If multiple objects are passed and one or more them fail validation, no objects will be created.</li> <li>Added <code>created</code> and <code>last_updated</code> fields for objects inheriting from CreatedUpdatedModel.</li> <li>Removed the <code>parent</code> filter for prefixes (use <code>within</code> or <code>within_include</code> instead).</li> <li>The IP address serializer now includes only a minimal nested representation of the assigned interface (if any) and its parent device or virtual machine.</li> <li>The rack reservation serializer now includes a nested representation of its owning user (as well as the assigned tenant, if any).</li> <li>Added endpoints for virtual chassis and VC memberships.</li> <li>Added <code>status</code>, <code>time_zone</code> (pytz format), and <code>description</code> fields to dcim.Site.</li> <li>Added a <code>manufacturer</code> foreign key field on dcim.Platform.</li> <li>Added a <code>status</code> field on circuits.Circuit.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/",
      "title": "NetBox v2.4 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#v249-2018-12-07",
      "title": "v2.4.9 (2018-12-07)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#2089 - Add SONET interface form factors</li> <li>#2495 - Enable deep-merging of config context data</li> <li>#2597 - Add FibreChannel SFP28 (32GFC) interface form factor</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2400 - Correct representation of nested object assignment in API docs</li> <li>#2576 - Correct type for count_* fields in site API representation</li> <li>#2606 - Fixed filtering for interfaces with a virtual form factor</li> <li>#2611 - Fix error handling when assigning a clustered device to a different site</li> <li>#2613 - Decrease live search minimum characters to three</li> <li>#2615 - Tweak live search widget to use brief format for API requests</li> <li>#2623 - Removed the need to pass the model class to the rqworker process for webhooks</li> <li>#2634 - Enforce consistent representation of unnamed devices in rack view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v248-2018-11-20",
      "title": "v2.4.8 (2018-11-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#2490 - Added bulk editing for config contexts</li> <li>#2557 - Added object view for tags</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2473 - Fix encoding of long (&gt;127 character) secrets</li> <li>#2558 - Filter on all tags when multiple are passed</li> <li>#2565 - Improved rendering of Markdown tables</li> <li>#2575 - Correct model specified for rack roles table</li> <li>#2588 - Catch all exceptions from failed NAPALM API Calls</li> <li>#2589 - Virtual machine API serializer should require cluster assignment</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v247-2018-11-06",
      "title": "v2.4.7 (2018-11-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#2388 - Enable filtering of devices/VMs by region</li> <li>#2427 - Allow filtering of interfaces by assigned VLAN or VLAN ID</li> <li>#2512 - Add device field to inventory item filter form</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2502 - Allow duplicate VIPs inside a uniqueness-enforced VRF</li> <li>#2514 - Prevent new connections to already connected interfaces</li> <li>#2515 - Only use django-rq admin tmeplate if webhooks are enabled</li> <li>#2528 - Enable creating circuit terminations with interface assignment via API</li> <li>#2549 - Changed naming of <code>peer_device</code> and <code>peer_interface</code> on API /dcim/connected-device/ endpoint to use underscores</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v246-2018-10-05",
      "title": "v2.4.6 (2018-10-05)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#2479 - Add user permissions for creating/modifying API tokens</li> <li>#2487 - Return abbreviated API output when passed <code>?brief=1</code></li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2393 - Fix Unicode support for CSV import under Python 2</li> <li>#2483 - Set max item count of API-populated form fields to MAX_PAGE_SIZE</li> <li>#2484 - Local config context not available on the Virtual Machine Edit Form</li> <li>#2485 - Fix cancel button when assigning a service to a device/VM</li> <li>#2491 - Fix exception when importing devices with invalid device type</li> <li>#2492 - Sanitize hostname and port values returned through LLDP</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v245-2018-10-02",
      "title": "v2.4.5 (2018-10-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#2392 - Implemented local context data for devices and virtual machines</li> <li>#2402 - Order and format JSON data in form fields</li> <li>#2432 - Link remote interface connections to the Interface view</li> <li>#2438 - API optimizations for tagged objects</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2406 - Remove hard-coded limit of 1000 objects from API-populated form fields</li> <li>#2414 - Tags field missing from device/VM component creation forms</li> <li>#2442 - Nullify \"next\" link in API when limit=0 is passed</li> <li>#2443 - Enforce JSON object format when creating config contexts</li> <li>#2444 - Improve validation of interface MAC addresses</li> <li>#2455 - Ignore unique address enforcement for IPs with a shared/virtual role</li> <li>#2470 - Log the creation of device/VM components as object changes</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v244-2018-08-22",
      "title": "v2.4.4 (2018-08-22)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#2168 - Added Extreme SummitStack interface form factors</li> <li>#2356 - Include cluster site as read-only field in VirtualMachine serializer</li> <li>#2362 - Implemented custom admin site to properly handle BASE_PATH</li> <li>#2254 - Implemented searchability for Rack Groups</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2353 - Handle <code>DoesNotExist</code> exception when deleting a device with connected interfaces</li> <li>#2354 - Increased maximum MTU for interfaces to 65536 bytes</li> <li>#2355 - Added item count to inventory tab on device view</li> <li>#2368 - Record change in device changelog when altering cluster assignment</li> <li>#2369 - Corrected time zone validation on site API serializer</li> <li>#2370 - Redirect to parent device after deleting device bays</li> <li>#2374 - Fix toggling display of IP addresses in virtual machine interfaces list</li> <li>#2378 - Corrected \"edit\" link for virtual machine interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v243-2018-08-09",
      "title": "v2.4.3 (2018-08-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#2333 - Added search filters for ConfigContexts</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2334 - TypeError raised when WritableNestedSerializer receives a non-integer value</li> <li>#2335 - API requires group field when creating/updating a rack</li> <li>#2336 - Bulk deleting power outlets and console server ports from a device redirects to home page</li> <li>#2337 - Attempting to create the next available prefix within a parent assigned to a VRF raises an AssertionError</li> <li>#2340 - API requires manufacturer field when creating/updating an inventory item</li> <li>#2342 - IntegrityError raised when attempting to assign an invalid IP address as the primary for a VM</li> <li>#2344 - AttributeError when assigning VLANs to an interface on a device/VM not assigned to a site</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v242-2018-08-08",
      "title": "v2.4.2 (2018-08-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2318 - ImportError when viewing a report</li> <li>#2319 - Extend ChoiceField to properly handle true/false choice keys</li> <li>#2320 - TypeError when dispatching a webhook with a secret key configured</li> <li>#2321 - Allow explicitly setting a null value on nullable ChoiceFields</li> <li>#2322 - Webhooks firing on non-enabled event types</li> <li>#2323 - DoesNotExist raised when deleting devices or virtual machines</li> <li>#2330 - Incorrect tab link in VRF changelog view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v241-2018-08-07",
      "title": "v2.4.1 (2018-08-07)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2303 - Always redirect to parent object when bulk editing/deleting components</li> <li>#2308 - Custom fields panel absent from object view in UI</li> <li>#2310 - False validation error on certain nested serializers</li> <li>#2311 - Redirect to parent after editing interface from device/VM view</li> <li>#2312 - Running a report yields a ValueError exception</li> <li>#2314 - Serialized representation of object in change log does not include assigned tags</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#v240-2018-08-06",
      "title": "v2.4.0 (2018-08-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#webhooks-81",
      "title": "Webhooks (#81)",
      "text": "<p>Webhooks enable NetBox to send a representation of an object every time one is created, updated, or deleted. Webhooks are sent from NetBox to external services via HTTP, and can be limited by object type. Services which receive a webhook can act on the data provided by NetBox to automate other tasks.</p> <p>Special thanks to John Anderson for doing the heavy lifting for this feature!</p>"
    },
    {
      "location": "release-notes/version-2.4/#tagging-132",
      "title": "Tagging (#132)",
      "text": "<p>Tags are free-form labels which can be assigned to a variety of objects in NetBox. Tags can be used to categorize and filter objects in addition to built-in and custom fields. Objects to which tags apply now include a <code>tags</code> field in the API.</p>"
    },
    {
      "location": "release-notes/version-2.4/#contextual-configuration-data-1349",
      "title": "Contextual Configuration Data (#1349)",
      "text": "<p>Sometimes it is desirable to associate arbitrary data with a group of devices to aid in their configuration. (For example, you might want to associate a set of syslog servers for all devices at a particular site.) Context data enables the association of arbitrary data (expressed in JSON format) to devices and virtual machines grouped by region, site, role, platform, and/or tenancy. Context data is arranged hierarchically, so that data with a higher weight can be entered to override more general lower-weight data. Multiple instances of data are automatically merged by NetBox to present a single dictionary for each object.</p>"
    },
    {
      "location": "release-notes/version-2.4/#change-logging-1898",
      "title": "Change Logging (#1898)",
      "text": "<p>When an object is created, updated, or deleted, NetBox now automatically records a serialized representation of that object (similar to how it appears in the REST API) as well the event time and user account associated with the change.</p>"
    },
    {
      "location": "release-notes/version-2.4/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#238 - Allow racks with the same name within a site (but in different groups)</li> <li>#971 - Add a view to show all VLAN IDs available within a group</li> <li>#1673 - Added object/list views for services</li> <li>#1687 - Enabled custom fields for services</li> <li>#1739 - Enabled custom fields for secrets</li> <li>#1794 - Improved POST/PATCH representation of nested objects</li> <li>#2029 - Added optional NAPALM arguments to Platform model</li> <li>#2034 - Include the ID when showing nested interface connections (API change)</li> <li>#2118 - Added <code>latitude</code> and <code>longitude</code> fields to Site for GPS coordinates</li> <li>#2131 - Added <code>created</code> and <code>last_updated</code> fields to DeviceType</li> <li>#2157 - Fixed natural ordering of objects when sorted by name</li> <li>#2225 - Add \"view elevations\" button for site rack groups</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2272 - Allow subdevice_role to be null on DeviceTypeSerializer\"</li> <li>#2286 - Fixed \"mark connected\" button for PDU outlet connections</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#api-changes",
      "title": "API Changes",
      "text": "<ul> <li>Introduced the <code>/extras/config-contexts/</code>, <code>/extras/object-changes/</code>, and <code>/extras/tags/</code> API endpoints</li> <li>API writes now return a nested representation of related objects (rather than only a numeric ID)</li> <li>The dcim.DeviceType serializer now includes <code>created</code> and <code>last_updated</code> fields</li> <li>The dcim.Site serializer now includes <code>latitude</code> and <code>longitude</code> fields</li> <li>The ipam.Service and secrets.Secret serializers now include custom fields</li> <li>The dcim.Platform serializer now includes a free-form (JSON) <code>napalm_args</code> field</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#changes-since-v24-beta1",
      "title": "Changes Since v2.4-beta1",
      "text": ""
    },
    {
      "location": "release-notes/version-2.4/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#2229 - Allow mapping of ConfigContexts to tenant groups</li> <li>#2259 - Add changelog tab to interface view</li> <li>#2264 - Added \"map it\" link for site GPS coordinates</li> </ul>"
    },
    {
      "location": "release-notes/version-2.4/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2137 - Fixed JSON serialization of dates</li> <li>#2258 - Include changed object type on home page changelog</li> <li>#2265 - Include parent regions when filtering applicable ConfigContexts</li> <li>#2288 - Fix exception when assigning objects to a ConfigContext via the API</li> <li>#2296 - Fix AttributeError when creating a new object with tags assigned</li> <li>#2300 - Fix assignment of an interface to an IP address via API PATCH</li> <li>#2301 - Fix model validation on assignment of ManyToMany fields via API PATCH</li> <li>#2305 - Make VLAN fields optional when creating a VM interface via the API</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/",
      "title": "NetBox v2.5 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#v2513-2019-05-31",
      "title": "v2.5.13 (2019-05-31)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#2813 - Add tenant group filters</li> <li>#3085 - Catch all exceptions during export template rendering</li> <li>#3138 - Add 2.5GE and 5GE interface form factors</li> <li>#3151 - Add inventory item count to manufacturers list</li> <li>#3156 - Add site link to rack reservations overview</li> <li>#3183 - Enable bulk deletion of sites</li> <li>#3185 - Improve performance for custom field access within templates</li> <li>#3186 - Add interface name filter for IP addresses</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3031 - Fixed form field population of tags with spaces</li> <li>#3132 - Circuit termination missing from available cable termination types</li> <li>#3150 - Fix formatting of cable length during cable trace</li> <li>#3184 - Correctly display color block for white cables</li> <li>#3190 - Fix custom field rendering for Jinja2 export templates</li> <li>#3211 - Fix error handling when attempting to delete a protected object via API</li> <li>#3223 - Fix filtering devices by \"has power outlets\"</li> <li>#3227 - Fix exception when deleting a circuit with a termination(s)</li> <li>#3228 - Fixed login link retaining query parameters</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v2512-2019-05-01",
      "title": "v2.5.12 (2019-05-01)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3127 - Fix natural ordering of device components</li> </ul> <p>2.5.11 (2019-04-29)</p>"
    },
    {
      "location": "release-notes/version-2.5/#notes",
      "title": "Notes",
      "text": "<p>This release upgrades the Django framework to version 2.2.</p>"
    },
    {
      "location": "release-notes/version-2.5/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#2986 - Improve natural ordering of device components</li> <li>#3023 - Add support for filtering cables by connected device</li> <li>#3070 - Add decommissioning status for devices</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2621 - Upgrade Django requirement to 2.2 to fix object deletion issue in the changelog middleware</li> <li>#3072 - Preserve multiselect filter values when updating per-page count for list views</li> <li>#3112 - Fix ordering of interface connections list by termination B name/device</li> <li>#3116 - Fix <code>tagged_items</code> count in tags API endpoint</li> <li>#3118 - Disable <code>last_login</code> update on login when maintenance mode is enabled</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v2510-2019-04-08",
      "title": "v2.5.10 (2019-04-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#3052 - Add Jinja2 support for export templates</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2937 - Redirect to list view after editing an object from list view</li> <li>#3036 - DCIM interfaces API endpoint should not include VM interfaces</li> <li>#3039 - Fix exception when retrieving change object for a component template via API</li> <li>#3041 - Fix form widget for bulk cable label update</li> <li>#3044 - Ignore site/rack fields when connecting a new cable via device search</li> <li>#3046 - Fix exception at reports API endpoint</li> <li>#3047 - Fix exception when writing mac address for an interface via API</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v259-2019-04-01",
      "title": "v2.5.9 (2019-04-01)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#2933 - Add username to outbound webhook requests</li> <li>#3011 - Add SSL support for django-rq (requires django-rq v1.3.1+)</li> <li>#3025 - Add request ID to outbound webhook requests (for correlating all changes part of a single request)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2207 - Fixes deterministic ordering of interfaces</li> <li>#2577 - Clarification of wording in API regarding filtering</li> <li>#2924 - Add interface type for QSFP28 50GE</li> <li>#2936 - Fix device role selection showing duplicate first entry</li> <li>#2998 - Limit device query to non-racked devices if no rack selected when creating a cable</li> <li>#3001 - Fix API representation of ObjectChange <code>action</code> and add <code>changed_object_type</code></li> <li>#3014 - Fixes VM Role filtering</li> <li>#3019 - Fix tag population when running NetBox within a path</li> <li>#3022 - Add missing cable termination types to DCIM <code>_choices</code> endpoint</li> <li>#3026 - Tweak prefix/IP filter forms to filter using VRF ID rather than route distinguisher</li> <li>#3027 - Ignore empty local context data when rendering config contexts</li> <li>#3032 - Save assigned tags when creating a new secret</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v258-2019-03-11",
      "title": "v2.5.8 (2019-03-11)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#2435 - Printer friendly CSS</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2065 - Correct documentation for VM interface serializer</li> <li>#2705 - Fix endpoint grouping in API docs</li> <li>#2781 - Fix filtering of sites/devices/VMs by multiple regions</li> <li>#2923 - Provider filter form's site field should be blank by default</li> <li>#2938 - Enforce deterministic ordering of device components returned by API</li> <li>#2939 - Exclude circuit terminations from API interface connections endpoint</li> <li>#2940 - Allow CSV import of prefixes/IPs to VRF without an RD assigned</li> <li>#2944 - Record the deletion of an IP address in the changelog of its parent interface (if any)</li> <li>#2952 - Added the <code>slug</code> field to the Tenant filter for use in the API and search function</li> <li>#2954 - Remove trailing slashes to fix root/template paths on Windows</li> <li>#2961 - Prevent exception when exporting inventory items belonging to unnamed devices</li> <li>#2962 - Increase ExportTemplate <code>mime_type</code> field length</li> <li>#2966 - Accept <code>null</code> cable length_unit via API</li> <li>#2972 - Improve ContentTypeField serializer to elegantly handle invalid data</li> <li>#2976 - Add delete button to tag view</li> <li>#2980 - Improve rendering time for API docs</li> <li>#2982 - Correct CSS class assignment on color picker</li> <li>#2984 - Fix logging of unlabeled cable ID on cable deletion</li> <li>#2985 - Fix pagination page length for rack elevations</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v257-2019-02-21",
      "title": "v2.5.7 (2019-02-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#2357 - Enable filtering of devices by rack face</li> <li>#2638 - Add button to copy unlocked secret to clipboard</li> <li>#2870 - Add Markdown rendering for provider NOC/admin contact fields</li> <li>#2878 - Add cable types for OS1/OS2 singlemode fiber</li> <li>#2890 - Add port types for APC fiber</li> <li>#2898 - Enable filtering cables list by connection status</li> <li>#2903 - Clarify purpose of tags field on interface edit form</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2852 - Allow filtering devices by null rack position</li> <li>#2884 - Don't display connect button for wireless interfaces</li> <li>#2888 - Correct foreground color of device roles in rack elevations</li> <li>#2893 - Remove duplicate display of VRF RD on IP address view</li> <li>#2895 - Fix filtering of nullable character fields</li> <li>#2901 - Fix ordering regions by site count</li> <li>#2910 - Fix config context list and edit forms to use Select2 elements</li> <li>#2912 - Cable type in filter form should be blank by default</li> <li>#2913 - Fix assigned prefixes link on VRF view</li> <li>#2914 - Fix empty connected circuit link on device interfaces list</li> <li>#2915 - Fix bulk editing of pass-through ports</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v256-2019-02-13",
      "title": "v2.5.6 (2019-02-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#2758 - Add cable trace button to pass-through ports</li> <li>#2839 - Add \"110 punch\" type for pass-through ports</li> <li>#2854 - Enable bulk editing of pass-through ports</li> <li>#2866 - Add cellular interface types (GSM/CDMA/LTE)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2841 - Fix filtering by VRF for prefix and IP address lists</li> <li>#2844 - Correct display of far cable end for pass-through ports</li> <li>#2845 - Enable filtering of rack unit list by unit ID</li> <li>#2856 - Fix navigation links between LAG interfaces and their members on device view</li> <li>#2857 - Add <code>display_name</code> to DeviceType API serializer; fix DeviceType list for bulk device edit</li> <li>#2862 - Follow return URL when connecting a cable</li> <li>#2864 - Correct display of VRF name when no RD is assigned</li> <li>#2877 - Fixed device role label display on light background color</li> <li>#2880 - Sanitize user password if an exception is raised during login</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v255-2019-01-31",
      "title": "v2.5.5 (2019-01-31)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#2805 - Allow null route distinguisher for VRFs</li> <li>#2809 - Remove VRF child prefixes table; link to main prefixes view</li> <li>#2825 - Include directly connected device for front/rear ports</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2824 - Fix template exception when viewing rack elevations list</li> <li>#2833 - Fix form widget for front port template creation</li> <li>#2835 - Fix certain model filters did not support the <code>q</code> query param</li> <li>#2837 - Fix select2 nullable filter fields add multiple null_option elements when paging</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v254-2019-01-29",
      "title": "v2.5.4 (2019-01-29)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#2516 - Implemented Select2 for all Model backed selection fields</li> <li>#2590 - Implemented the color picker with Select2 to show colors in the background</li> <li>#2733 - Enable bulk assignment of MAC addresses to interfaces</li> <li>#2735 - Implemented Select2 for all list filter form select elements</li> <li>#2753 - Implemented Select2 to replace most all instances of select fields in forms</li> <li>#2766 - Extend users admin table to include superuser and active fields</li> <li>#2782 - Add <code>is_pool</code> field for prefix filtering</li> <li>#2807 - Include device site/rack assignment in cable trace view</li> <li>#2808 - Loosen version pinning for Django to allow patch releases</li> <li>#2810 - Include description fields in interface connections export</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2779 - Include \"none\" option when filter IP addresses by role</li> <li>#2783 - Fix AttributeError exception when attempting to delete region(s)</li> <li>#2795 - Fix duplicate display of pagination controls on child prefix/IP tables</li> <li>#2798 - Properly URL-encode \"map it\" link on site view</li> <li>#2802 - Better error handling for unsupported NAPALM methods</li> <li>#2816 - Handle exception when deleting a device with connected components</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v253-2019-01-11",
      "title": "v2.5.3 (2019-01-11)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#1630 - Enable bulk editing of prefix/IP mask length</li> <li>#1870 - Add per-page toggle to object lists</li> <li>#1871 - Enable filtering sites by parent region</li> <li>#1983 - Enable regular expressions when bulk renaming device components</li> <li>#2682 - Add DAC and AOC cable types</li> <li>#2693 - Additional cable colors</li> <li>#2726 - Include cables in global search</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2742 - Preserve cluster assignment when editing a device</li> <li>#2757 - Always treat first/last IPs within a /31 or /127 as usable</li> <li>#2762 - Add missing DCIM field values to API <code>_choices</code> endpoint</li> <li>#2777 - Fix cable validation to handle duplicate connections on import</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v252-2018-12-21",
      "title": "v2.5.2 (2018-12-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_10",
      "title": "Enhancements",
      "text": "<ul> <li>#2561 - Add 200G and 400G interface types</li> <li>#2701 - Enable filtering of prefixes by exact prefix value</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_11",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2673 - Fix exception on LLDP neighbors view for device with a circuit connected</li> <li>#2691 - Cable trace should follow circuits</li> <li>#2698 - Remove pagination restriction on bulk component creation for devices/VMs</li> <li>#2704 - Fix form select widget population on parent with null value</li> <li>#2707 - Correct permission evaluation for circuit termination cabling</li> <li>#2712 - Preserve list filtering after editing objects in bulk</li> <li>#2717 - Fix bulk deletion of tags</li> <li>#2721 - Detect loops when tracing front/rear ports</li> <li>#2723 - Correct permission evaluation when bulk deleting tags</li> <li>#2724 - Limit rear port choices to current device when editing a front port</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v251-2018-12-13",
      "title": "v2.5.1 (2018-12-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#enhancements_11",
      "title": "Enhancements",
      "text": "<ul> <li>#2655 - Add 128GFC Fibrechannel interface type</li> <li>#2674 - Enable filtering changelog by object type under web UI</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#bug-fixes_12",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2662 - Fix ImproperlyConfigured exception when rendering API docs</li> <li>#2663 - Prevent duplicate interfaces from appearing under VLAN members view</li> <li>#2666 - Correct display of length unit in cables list</li> <li>#2676 - Fix exception when passing dictionary value to a ChoiceField</li> <li>#2678 - Fix error when viewing webhook in admin UI without write permission</li> <li>#2680 - Disallow POST requests to <code>/dcim/interface-connections/</code> API endpoint</li> <li>#2683 - Fix exception when connecting a cable to a RearPort with no corresponding FrontPort</li> <li>#2684 - Fix custom field filtering</li> <li>#2687 - Correct naming of before/after filters for changelog entries</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#v250-2018-12-10",
      "title": "v2.5.0 (2018-12-10)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#notes_1",
      "title": "Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#python-3-required",
      "title": "Python 3 Required",
      "text": "<p>As promised, Python 2 support has been completed removed. Python 3.5 or higher is now required to run NetBox. Please see our Python 3 migration guide for assistance with upgrading.</p>"
    },
    {
      "location": "release-notes/version-2.5/#removed-deprecated-user-activity-log",
      "title": "Removed Deprecated User Activity Log",
      "text": "<p>The UserAction model, which was deprecated by the new change logging feature in NetBox v2.4, has been removed. If you need to archive legacy user activity, do so prior to upgrading to NetBox v2.5, as the database migration will remove all data associated with this model.</p>"
    },
    {
      "location": "release-notes/version-2.5/#view-permissions-in-django-21",
      "title": "View Permissions in Django 2.1",
      "text": "<p>Django 2.1 introduces view permissions for object types (not to be confused with object-level permissions). Implementation of #323 is planned for NetBox v2.6. Users are encourage to begin assigning view permissions as desired in preparation for their eventual enforcement.</p>"
    },
    {
      "location": "release-notes/version-2.5/#upgradesh-no-longer-invokes-sudo",
      "title": "upgrade.sh No Longer Invokes sudo",
      "text": "<p>The <code>upgrade.sh</code> script has been tweaked so that it no longer invokes <code>sudo</code> internally. This was done to ensure compatibility when running NetBox inside a Python virtual environment. If you need elevated permissions when upgrading NetBox, call the upgrade script with <code>sudo upgrade.sh</code>.</p>"
    },
    {
      "location": "release-notes/version-2.5/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.5/#patch-panels-and-cables-20",
      "title": "Patch Panels and Cables (#20)",
      "text": "<p>NetBox now supports modeling physical cables for console, power, and interface connections. The new pass-through port component type has also been introduced to model patch panels and similar devices.</p>"
    },
    {
      "location": "release-notes/version-2.5/#enhancements_12",
      "title": "Enhancements",
      "text": "<ul> <li>#450 - Added <code>outer_width</code> and <code>outer_depth</code> fields to rack model</li> <li>#867 - Added <code>description</code> field to circuit terminations</li> <li>#1444 - Added an <code>asset_tag</code> field for racks</li> <li>#1931 - Added a count of assigned IP addresses to the interface API serializer</li> <li>#2000 - Dropped support for Python 2</li> <li>#2053 - Introduced the <code>LOGIN_TIMEOUT</code> configuration setting</li> <li>#2057 - Added description columns to interface connections list</li> <li>#2104 - Added a <code>status</code> field for racks</li> <li>#2165 - Improved natural ordering of Interfaces</li> <li>#2292 - Removed the deprecated UserAction model</li> <li>#2367 - Removed deprecated RPCClient functionality</li> <li>#2426 - Introduced <code>SESSION_FILE_PATH</code> configuration setting for authentication without write access to database</li> <li>#2594 - <code>upgrade.sh</code> no longer invokes sudo</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#changes-from-v25-beta2",
      "title": "Changes From v2.5-beta2",
      "text": "<ul> <li>#2474 - Add <code>cabled</code> and <code>connection_status</code> filters for device components</li> <li>#2616 - Convert Rack <code>outer_unit</code> and Cable <code>length_unit</code> to integer-based choice fields</li> <li>#2622 - Enable filtering cables by multiple types/colors</li> <li>#2624 - Delete associated content type and permissions when removing InterfaceConnection model</li> <li>#2626 - Remove extraneous permissions generated from proxy models</li> <li>#2632 - Change representation of null values from <code>0</code> to <code>null</code></li> <li>#2639 - Fix preservation of length/dimensions unit for racks and cables</li> <li>#2648 - Include the <code>connection_status</code> field in nested represenations of connectable device components</li> <li>#2649 - Add <code>connected_endpoint_type</code> to connectable device component API representations</li> </ul>"
    },
    {
      "location": "release-notes/version-2.5/#api-changes",
      "title": "API Changes",
      "text": "<ul> <li>The <code>/extras/recent-activity/</code> endpoint (replaced by change logging in v2.4) has been removed</li> <li>The <code>rpc_client</code> field has been removed from dcim.Platform (see #2367)</li> <li>Introduced a new API endpoint for cables at <code>/dcim/cables/</code></li> <li>New endpoints for front and rear pass-through ports (and their templates) in parallel with existing device components</li> <li>The fields <code>interface_connection</code> on Interface and <code>interface</code> on CircuitTermination have been replaced with <code>connected_endpoint</code> and <code>connection_status</code></li> <li>A new <code>cable</code> field has been added to console, power, and interface components and to circuit terminations</li> <li>New fields for dcim.Rack: <code>status</code>, <code>asset_tag</code>, <code>outer_width</code>, <code>outer_depth</code>, <code>outer_unit</code></li> <li>The following boolean filters on dcim.Device and dcim.DeviceType have been renamed:<ul> <li><code>is_console_server</code>: <code>console_server_ports</code></li> <li><code>is_pdu</code>: <code>power_outlets</code></li> <li><code>is_network_device</code>: <code>interfaces</code></li> </ul> </li> <li>The following new boolean filters have been introduced for dcim.Device and dcim.DeviceType:<ul> <li><code>console_ports</code></li> <li><code>power_ports</code></li> <li><code>pass_through_ports</code></li> </ul> </li> <li>The field <code>interface_ordering</code> has been removed from the DeviceType serializer</li> <li>Added a <code>description</code> field to the CircuitTermination serializer</li> <li>Added <code>ipaddress_count</code> to InterfaceSerializer to show the count of assigned IP addresses for each interface</li> <li>The <code>available-prefixes</code> and <code>available-ips</code> IPAM endpoints now return an HTTP 204 response instead of HTTP 400 when no new objects can be created</li> <li>Filtering on null values now uses the string <code>null</code> instead of zero</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/",
      "title": "NetBox v2.6 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#v2612-2020-01-13",
      "title": "v2.6.12 (2020-01-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#1982 - Improved NAPALM method documentation in Swagger (OpenAPI)</li> <li>#2050 - Preview image attachments when hovering over the link</li> <li>#2113 - Allow NAPALM driver settings to be changed with request headers</li> <li>#2598 - Toggle the display of child prefixes/IP addresses</li> <li>#3009 - Search by description when assigning IP address to interfaces</li> <li>#3021 - Add <code>tenant</code> filter field for cables</li> <li>#3090 - Enable filtering of interfaces by name on the device view</li> <li>#3187 - Add rack selection field to rack elevations view</li> <li>#3393 - Paginate assigned circuits at the provider details view</li> <li>#3440 - Add total path length to cable trace</li> <li>#3491 - Include content of response on webhook error</li> <li>#3623 - Enable word expansion during interface creation</li> <li>#3668 - Enable searching by DNS name when assigning IP address</li> <li>#3851 - Allow passing initial data to custom script forms</li> <li>#3891 - Add <code>local_context_data</code> filter for virtual machines</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3589 - Fix validation on tagged VLANs of an interface</li> <li>#3849 - Fix ordering of models when dumping data to JSON</li> <li>#3853 - Fix device role link on config context view</li> <li>#3856 - Allow filtering VM interfaces by multiple MAC addresses</li> <li>#3857 - Fix rendering of grouped custom links</li> <li>#3862 - Allow filtering device components by multiple device names</li> <li>#3864 - Disallow /0 masks for prefixes and IP addresses</li> <li>#3872 - Paginate related IPs on the IP address view</li> <li>#3876 - Fix minimum/maximum value rendering for site ASN field</li> <li>#3882 - Fix filtering of devices by rack group</li> <li>#3898 - Fix references to deleted cables without a label</li> <li>#3905 - Fix divide-by-zero on power feeds with low power values</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v2611-2020-01-03",
      "title": "v2.6.11 (2020-01-03)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3831 - Fix API-driven filter field rendering (#3812 regression)</li> <li>#3833 - Add missing region filters for multiple objects</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v2610-2020-01-02",
      "title": "v2.6.10 (2020-01-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#2233 - Add ability to move inventory items between devices</li> <li>#2892 - Extend admin UI to allow deleting old report results</li> <li>#3062 - Add <code>assigned_to_interface</code> filter for IP addresses</li> <li>#3461 - Fail gracefully on custom link rendering exception</li> <li>#3705 - Provide request context when executing custom scripts</li> <li>#3762 - Add date/time picker widgets</li> <li>#3788 - Enable partial search for inventory items</li> <li>#3812 - Optimize size of pages containing a dynamic selection field</li> <li>#3827 - Allow filtering console/power/interface connections by device ID</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3106 - Restrict queryset of chained fields when form validation fails</li> <li>#3695 - Include A/Z termination sites for circuits in global search</li> <li>#3712 - Scrolling to target (hash) did not account for the header size</li> <li>#3780 - Fix AttributeError exception in API docs</li> <li>#3809 - Filter platform by manufacturer when editing devices</li> <li>#3811 - Fix filtering of racks by group on device list</li> <li>#3822 - Fix exception when editing a device bay (regression from #3596)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v269-2019-12-16",
      "title": "v2.6.9 (2019-12-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#3152 - Include direct link to rack elevations on site view</li> <li>#3441 - Move virtual machine results near devices in global search</li> <li>#3761 - Added copy button for API tokens</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2170 - Prevent the deletion of a virtual chassis when a cross-member LAG is present</li> <li>#2358 - Respect custom field default values when creating objects via the REST API</li> <li>#3749 - Fix exception on password change page for local users</li> <li>#3757 - Fix unable to assign IP to interface</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v268-2019-12-10",
      "title": "v2.6.8 (2019-12-10)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#3139 - Disable password change form for LDAP-authenticated users</li> <li>#3457 - Display cable colors on device view</li> <li>#3329 - Remove obsolete P3P policy header</li> <li>#3663 - Add query filters for <code>created</code> and <code>last_updated</code> fields</li> <li>#3722 - Allow the underscore character in IPAddress DNS names</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3312 - Fix validation error when editing power cables in bulk</li> <li>#3644 - Fix exception when connecting a cable to a RearPort with no corresponding FrontPort</li> <li>#3669 - Include <code>weight</code> field in prefix/VLAN role form</li> <li>#3674 - Include comments on PowerFeed view</li> <li>#3679 - Fix link for assigned ipaddress in interface page</li> <li>#3709 - Prevent exception when importing an invalid cable definition</li> <li>#3720 - Correctly indicate power feed terminations on cable list</li> <li>#3724 - Fix API filtering of interfaces by more than one device name</li> <li>#3725 - Enforce client validation for minimum service port number</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v267-2019-11-01",
      "title": "v2.6.7 (2019-11-01)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#3445 - Add support for additional user defined headers to be added to webhook requests</li> <li>#3499 - Add <code>ca_file_path</code> to Webhook model to support user supplied CA certificate verification of webhook requests</li> <li>#3594 - Add ChoiceVar for custom scripts</li> <li>#3619 - Add 400GE OSFP interface type</li> <li>#3659 - Add filtering for objects in admin UI</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3309 - Rewrite change logging middleware to resolve sporadic testing failures</li> <li>#3340 - Add missing options to connect front ports to console ports</li> <li>#3357 - Enable filter sites/devices/VMs by null region</li> <li>#3460 - Extend upgrade script to validate Python dependencies</li> <li>#3596 - Prevent server error when reassigning a device to a new device bay</li> <li>#3629 - Use <code>get_lldp_neighors_detail</code> to validation LLDP neighbors</li> <li>#3635 - Add missing cache support for the circuits app</li> <li>#3636 - Add missing <code>rack_group</code> field to PowerFeed CSV export</li> <li>#3652 - Limit next/previous rack by assigned rack group</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v266-2019-10-10",
      "title": "v2.6.6 (2019-10-10)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#notes",
      "title": "Notes",
      "text": "<ul> <li>This release includes a migration which automatically updates all existing cables to enable filtering by site/rack (see #3259). This migration may take several minutes to complete on installations with tens of thousands of cables defined.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#1941 - Add InfiniBand interface types</li> <li>#3259 - Add <code>rack</code> and <code>site</code> filters for cables</li> <li>#3471 - Disallow raw HTML in Markdown-rendered fields</li> <li>#3545 - Add <code>MultiObjectVar</code> for custom scripts</li> <li>#3563 - Enable editing of individual DeviceType components</li> <li>#3580 - Render text and URL fields as textareas in the custom link form</li> <li>#3581 - Introduce <code>commit_default</code> custom script attribute to not commit changes by default</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3458 - Prevent primary IP address for a device/VM from being reassigned</li> <li>#3463 - Correct CSV headers for exported power feeds</li> <li>#3474 - Fix device status page loading when NAPALM call fails</li> <li>#3571 - Prevent erroneous redirects when editing tags</li> <li>#3573 - Ensure consistent display of changelog retention period</li> <li>#3574 - Change <code>device</code> to <code>parent</code> in interface editing VLAN filtering logic</li> <li>#3575 - Restore label for comments field when bulk editing circuits</li> <li>#3582 - Enforce view permissions on global search results</li> <li>#3588 - Enforce object-form JSON for local context data on devices and VMs</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v265-2019-09-25",
      "title": "v2.6.5 (2019-09-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#3297 - Include reserved units when calculating rack utilization</li> <li>#3347 - Extend upgrade script to automatically remove stale content types</li> <li>#3352 - Enable filtering changelog API by <code>changed_object_id</code></li> <li>#3515 - Enable export templates for inventory items</li> <li>#3524 - Enable bulk editing of power outlet/power port associations</li> <li>#3529 - Enable filtering circuits list by region</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3435 - Change IP/prefix CSV export to reference VRF name instead of RD</li> <li>#3464 - Fix foreground text color on color picker fields</li> <li>#3519 - Prevent cables from being terminated to virtual/wireless interfaces via API</li> <li>#3521 - Fix error in <code>parseURL</code> related to variables in API URL</li> <li>#3531 - Fixed rack role foreground color</li> <li>#3534 - Added blank option for untagged VLANs</li> <li>#3540 - Fixed virtual machine interface edit with new inline vlan edit fields</li> <li>#3543 - Added inline VLAN editing to virtual machine interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v264-2019-09-19",
      "title": "v2.6.4 (2019-09-19)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#2160 - Add bulk editing for interface VLAN assignment</li> <li>#3027 - Add <code>local_context_data</code> boolean filter for devices</li> <li>#3318 - Increase length of platform name and slug to 100 characters</li> <li>#3341 - Enable inline VLAN assignment while editing an interface</li> <li>#3485 - Enable embedded graphs for devices</li> <li>#3510 - Add minimum/maximum prefix length enforcement for <code>IPNetworkVar</code></li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3489 - Prevent exception triggered by webhook upon object deletion</li> <li>#3501 - Fix rendering of checkboxes on custom script forms</li> <li>#3511 - Correct API URL for nested device bays</li> <li>#3513 - Fix assignment of tags when creating front/rear ports</li> <li>#3514 - Label TextVar fields when rendering custom script forms</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v263-2019-09-04",
      "title": "v2.6.3 (2019-09-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#custom-scripts-3415",
      "title": "Custom Scripts (#3415)",
      "text": "<p>Custom scripts allow for the execution of arbitrary code via the NetBox UI. They can be used to automatically create, manipulate, or clean up objects or perform other tasks within NetBox. Scripts are defined as Python files which contain one or more subclasses of <code>extras.scripts.Script</code>. Variable fields can be defined within scripts, which render as form fields within the web UI to prompt the user for input data. Scripts are executed and information is logged via the web UI. Please see the docs for more detail.</p> <p>Note: There are currently no API endpoints for this feature. These are planned for the upcoming v2.7 release.</p>"
    },
    {
      "location": "release-notes/version-2.6/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#3386 - Add <code>mac_address</code> filter for virtual machines</li> <li>#3391 - Update Bootstrap CSS to v3.4.1</li> <li>#3405 - Fix population of power port/outlet details on device creation</li> <li>#3422 - Prevent navigation menu from overlapping page content</li> <li>#3430 - Linkify platform field on device view</li> <li>#3454 - Enable filtering circuits by region</li> <li>#3456 - Enable bulk editing of tag color</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3392 - Add database index for ObjectChange time</li> <li>#3420 - Serial number filter for racks, devices, and inventory items is now case-insensitive</li> <li>#3428 - Fixed cache invalidation issues (#3300, #3363, #3379, #3382) by switching to <code>prefetch_related()</code> instead of <code>select_related()</code> and removing use of <code>update()</code></li> <li>#3421 - Fix exception when ordering power connections list by PDU</li> <li>#3424 - Fix tag coloring for non-linked tags</li> <li>#3426 - Improve API error handling for ChoiceFields</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v262-2019-08-02",
      "title": "v2.6.2 (2019-08-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#984 - Allow ordering circuits by A/Z side</li> <li>#3307 - Add power panels count to home page</li> <li>#3314 - Paginate object changelog entries</li> <li>#3367 - Add BNC port type and coaxial cable type</li> <li>#3368 - Indicate indefinite changelog retention when applicable</li> <li>#3370 - Add filter class to VirtualChassis API</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3018 - Components connected via a cable must have an equal number of positions</li> <li>#3289 - Prevent position from being nullified when moving a device to a new rack</li> <li>#3293 - Enable filtering device components by multiple device IDs</li> <li>#3315 - Enable filtering devices/interfaces by multiple MAC addresses</li> <li>#3317 - Fix permissions for ConfigContextBulkDeleteView</li> <li>#3323 - Fix permission evaluation for interface connections view</li> <li>#3342 - Fix cluster delete button</li> <li>#3384 - Maximum and allocated draw fields should be included on power port template creation form</li> <li>#3385 - Fix power panels list when bulk editing power feeds</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v261-2019-06-25",
      "title": "v2.6.1 (2019-06-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#enhancements_10",
      "title": "Enhancements",
      "text": "<ul> <li>#3154 - Add <code>virtual_chassis_member</code> device filter</li> <li>#3277 - Add cable trace buttons for console and power ports</li> <li>#3281 - Hide custom links which render as empty text</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_11",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3229 - Limit rack group selection by parent site on racks list</li> <li>#3269 - Raise validation error when specifying non-existent cable terminations</li> <li>#3275 - Fix error when adding power outlets to a device type</li> <li>#3279 - Reset the PostgreSQL sequence for Tag and TaggedItem IDs</li> <li>#3283 - Fix rack group assignment on PowerFeed CSV import</li> <li>#3290 - Fix server error when viewing cascaded PDUs</li> <li>#3292 - Ignore empty URL query parameters</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#v260-2019-06-20",
      "title": "v2.6.0 (2019-06-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#new-features_1",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#power-panels-and-feeds-54",
      "title": "Power Panels and Feeds (#54)",
      "text": "<p>NetBox now supports power circuit modeling via two new models: power panels and power feeds. Power feeds are terminated to power panels and are optionally associated with individual racks. Each power feed defines a supply type (AC/DC), amperage, voltage, and phase. A power port can be connected directly to a power feed, but a power feed may have only one power port connected to it.</p> <p>Additionally, the power port model, which represents a device's power input, has been extended to include fields denoting maximum and allocated draw, in volt-amperes. This allows a device (e.g. a PDU) to calculate its total load compared to its connected power feed.</p>"
    },
    {
      "location": "release-notes/version-2.6/#caching-2647",
      "title": "Caching (#2647)",
      "text": "<p>To improve performance, NetBox now supports caching for most object and list views. Caching is implemented using Redis, which is now a required dependency. (Previously, Redis was required only if webhooks were enabled.)</p> <p>A new configuration parameter is available to control the cache timeout:</p> <pre><code>## Cache timeout (in seconds)\nCACHE_TIMEOUT = 900\n</code></pre>"
    },
    {
      "location": "release-notes/version-2.6/#view-permissions-323",
      "title": "View Permissions (#323)",
      "text": "<p>Django 2.1 introduced the ability to enforce view-only permissions for different object types. NetBox now enforces these by default. You can grant view permission to a user or group by assigning the \"can view\" permission for the desired object(s).</p> <p>To exempt certain object types from the enforcement of view permissions, so that any user (including anonymous users) can view them, add them to the new <code>EXEMPT_VIEW_PERMISSIONS</code> setting in <code>configuration.py</code>:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = [\n    'dcim.site',\n    'ipam.prefix',\n]\n</code></pre> <p>To exclude all objects, effectively disabling view permissions and restoring pre-v2.6 behavior, set:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = ['*']\n</code></pre>"
    },
    {
      "location": "release-notes/version-2.6/#custom-links-969",
      "title": "Custom Links (#969)",
      "text": "<p>Custom links are created under the admin UI and will be displayed on each object of the selected type. Link text and URLs can be formed from Jinja2 template code, with the viewed object passed as context data. For example, to link to an external NMS from the device view, you might create a custom link with the following URL:</p> <pre><code>https://nms.example.com/nodes/?name={{ obj.name }}\n</code></pre> <p>Custom links appear as buttons at the top of the object view. Grouped links will render as a dropdown menu beneath a single button.</p>"
    },
    {
      "location": "release-notes/version-2.6/#prometheus-metrics-3104",
      "title": "Prometheus Metrics (#3104)",
      "text": "<p>NetBox now supports exposing native Prometheus metrics from the application. Prometheus is a popular time series metric platform used for monitoring. Metric exposition can be toggled with the <code>METRICS_ENABLED</code> configuration setting; it is not enabled by default. NetBox exposes metrics at the <code>/metrics</code> HTTP endpoint, e.g. <code>https://netbox.local/metrics</code>.</p> <p>NetBox makes use of the django-prometheus library to export a number of different types of metrics, including:</p> <ul> <li>Per model insert, update, and delete counters</li> <li>Per view request counters</li> <li>Per view request latency histograms</li> <li>Request body size histograms</li> <li>Response body size histograms</li> <li>Response code counters</li> <li>Database connection, execution, and error counters</li> <li>Cache hit, miss, and invalidation counters</li> <li>Django middleware latency histograms</li> <li>Other Django related metadata metrics</li> </ul> <p>For the exhaustive list of exposed metrics, visit the <code>/metrics</code> endpoint on your NetBox instance. See the documentation for more details on using Prometheus metrics in NetBox.</p>"
    },
    {
      "location": "release-notes/version-2.6/#changes",
      "title": "Changes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.6/#new-dependency-redis",
      "title": "New Dependency: Redis",
      "text": "<p>Redis is an in-memory data store similar to memcached. While Redis has been an optional component of NetBox since the introduction of webhooks in version 2.4, it is now required to support NetBox's new caching functionality (as well as other planned features). Redis can be installed via your platform's package manager: for example, <code>sudo apt-get install redis-server</code> on Ubuntu or <code>sudo yum install redis</code> on CentOS.</p> <p>The Redis database is configured using a configuration setting similar to <code>DATABASE</code> in <code>configuration.py</code>:</p> <pre><code>REDIS = {\n    'HOST': 'localhost',\n    'PORT': 6379,\n    'PASSWORD': '',\n    'DATABASE': 0,\n    'CACHE_DATABASE': 1,\n    'DEFAULT_TIMEOUT': 300,\n    'SSL': False,\n}\n</code></pre> <p>Note that if you were using these settings in a prior release with webhooks, the <code>DATABASE</code> setting remains the same but an additional <code>CACHE_DATABASE</code> setting has been added with a default value of 1 to support the caching backend. The <code>DATABASE</code> setting will be renamed in a future release of NetBox to better relay the meaning of the setting. It is highly recommended to keep the webhook and cache databases seperate. Using the same database number for both may result in webhook processing data being lost during cache flushing events.</p>"
    },
    {
      "location": "release-notes/version-2.6/#api-support-for-specifying-related-objects-by-attributes3077",
      "title": "API Support for Specifying Related Objects by Attributes(#3077)",
      "text": "<p>Previously, specifying a related object in an API request required knowing the primary key (integer ID) of that object. For example, when creating a new device, its rack would be specified as an integer:</p> <pre><code>{\n    \"name\": \"MyNewDevice\",\n    \"rack\": 123,\n    ...\n}\n</code></pre> <p>The NetBox API now also supports referencing related objects by a set of sufficiently unique attrbiutes. For example, a rack can be identified by its name and parent site:</p> <pre><code>{\n    \"name\": \"MyNewDevice\",\n    \"rack\": {\n        \"site\": {\n            \"name\": \"Equinix DC6\"\n        },\n        \"name\": \"R204\"\n    },\n    ...\n}\n</code></pre> <p>There is no limit to the depth of nested references. Note that if the provided parameters do not return exactly one object, a validation error is raised.</p>"
    },
    {
      "location": "release-notes/version-2.6/#api-devicevm-config-context-included-by-default-2350",
      "title": "API Device/VM Config Context Included by Default (#2350)",
      "text": "<p>The rendered config context for devices and VMs is now included by default in all API results (list and detail views). Previously, the rendered config context was available only in the detail view for individual objects. Users with large amounts of context data may observe a performance drop when returning multiple objects. To combat this, in cases where the rendered config context is not needed, the query parameter <code>?exclude=config_context</code> may be appended to the request URL to exclude the config context data from the API response.</p>"
    },
    {
      "location": "release-notes/version-2.6/#changes-to-tag-permissions",
      "title": "Changes to Tag Permissions",
      "text": "<p>NetBox now makes use of its own <code>Tag</code> model instead of the stock model which ships with django-taggit. This new model lives in the <code>extras</code> app and thus any permissions that you may have configured using \"Taggit | Tag\" should be changed to now use \"Extras | Tag.\" Also note that the admin interface for tags has been removed as it was redundant to the functionality provided by the front end UI.</p>"
    },
    {
      "location": "release-notes/version-2.6/#cors_origin_whitelist-requires-uri-scheme",
      "title": "CORS_ORIGIN_WHITELIST Requires URI Scheme",
      "text": "<p>If you have the <code>CORS_ORIGIN_WHITELIST</code> configuration parameter defined, note that each origin must now incldue a URI scheme. This change was introuced in django-cors-headers 3.0.</p>"
    },
    {
      "location": "release-notes/version-2.6/#enhancements_11",
      "title": "Enhancements",
      "text": "<ul> <li>#166 - Add <code>dns_name</code> field to IPAddress</li> <li>#524 - Added power utilization graphs to power feeds, devices, and racks</li> <li>#1792 - Add CustomFieldChoices API endpoint at <code>/api/extras/_custom_field_choices/</code></li> <li>#1863 - Add child object counts to API representation of organizational objects</li> <li>#2324 - Add <code>color</code> field for tags</li> <li>#2643 - Add <code>description</code> field to console/power components and device bays</li> <li>#2791 - Add <code>comments</code> field for tags</li> <li>#2920 - Rename Interface <code>form_factor</code> to <code>type</code> (backward-compatible until v2.7)</li> <li>#2926 - Add change logging to the Tag model</li> <li>#3038 - OR logic now used when multiple values of a query filter are passed</li> <li>#3264 - Annotate changelog retention time on UI</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes_12",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2968 - Correct API documentation for SerializerMethodFields</li> <li>#3176 - Add cable trace button for console server ports and power outlets</li> <li>#3231 - Fixed cosmetic error indicating a missing schema migration</li> <li>#3239 - Corrected count of tags reported via API</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#bug-fixes-from-v26-beta1",
      "title": "Bug Fixes From v2.6-beta1",
      "text": "<ul> <li>#3123 - Exempt <code>/metrics</code> view from authentication</li> <li>#3125 - Fix exception when viewing PDUs</li> <li>#3126 - Incorrect calculation of PowerFeed available power</li> <li>#3130 - Fix exception when creating a new power outlet</li> <li>#3136 - Add power draw fields to power port creation form</li> <li>#3137 - Add <code>power_port</code> and <code>feed_leg</code> fields to power outlet creation form</li> <li>#3140 - Add bulk edit capability for power outlets and console server ports</li> <li>#3204 - Fix interface filtering when connecting cables</li> <li>#3207 - Fix link for connecting interface to rear port</li> <li>#3258 - Exception raised when creating/viewing a circuit with a non-connected termination</li> </ul>"
    },
    {
      "location": "release-notes/version-2.6/#api-changes",
      "title": "API Changes",
      "text": "<ul> <li>New API endpoints for power modeling: <code>/api/dcim/power-panels/</code> and <code>/api/dcim/power-feeds/</code></li> <li>New API endpoint for custom field choices: <code>/api/extras/_custom_field_choices/</code></li> <li>ForeignKey fields now accept either the related object PK or a dictionary of attributes describing the related object.</li> <li>Organizational objects now include child object counts. For example, the Role serializer includes <code>prefix_count</code> and <code>vlan_count</code>.</li> <li>The <code>id__in</code> filter is now deprecated and will be removed in v2.7. (Begin using the <code>?id=1&amp;id=2</code> format instead.)</li> <li>Added a <code>description</code> field for all device components.</li> <li>dcim.Device: The devices list endpoint now includes rendered context data.</li> <li>dcim.DeviceType: <code>instance_count</code> has been renamed to <code>device_count</code>.</li> <li>dcim.Interface: <code>form_factor</code> has been renamed to <code>type</code>. Backward compatibility for <code>form_factor</code> will be maintained until NetBox v2.7.</li> <li>dcim.Interface: The <code>type</code> filter has been renamed to <code>kind</code>.</li> <li>dcim.Site: The <code>count_*</code> read-only fields have been renamed to <code>*_count</code> for consistency with other objects.</li> <li>dcim.Site: Added the <code>virtualmachine_count</code> read-only field.</li> <li>extras.Tag: Added <code>color</code> and <code>comments</code> fields to the Tag serializer.</li> <li>virtualization.VirtualMachine: The virtual machines list endpoint now includes rendered context data.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/",
      "title": "NetBox v2.7 Release Notes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#v2712-2020-04-08",
      "title": "v2.7.12 (2020-04-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#3676 - Reference VRF by name rather than RD during IP/prefix import</li> <li>#4147 - Use absolute URLs in rack elevation SVG renderings</li> <li>#4448 - Allow connecting cables between two circuit terminations</li> <li>#4460 - Add the <code>webhook_receiver</code> management command to assist in troubleshooting outgoing webhooks</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4395 - Fix typing of count_ipaddresses on interface serializer</li> <li>#4418 - Fail cleanly when trying to import multiple device types simultaneously</li> <li>#4438 - Fix exception when disconnecting a cable from a power feed</li> <li>#4439 - Tweak display of unset custom integer fields</li> <li>#4449 - Fix reservation edit/delete button URLs on rack view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v2711-2020-03-27",
      "title": "v2.7.11 (2020-03-27)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#738 - Add ability to automatically check for new releases (must be enabled by setting <code>RELEASE_CHECK_URL</code>)</li> <li>#4255 - Custom script object variables now utilize dynamic form widgets</li> <li>#4309 - Add descriptive tooltip to custom fields on object views</li> <li>#4369 - Add a dedicated view for rack reservations</li> <li>#4380 - Enable webhooks for rack reservations</li> <li>#4381 - Enable export templates for rack reservations</li> <li>#4382 - Enable custom links for rack reservations</li> <li>#4386 - Update admin links for Django RQ to reflect multiple queues</li> <li>#4389 - Add a bulk edit view for device bays</li> <li>#4404 - Add cable trace button for circuit terminations</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2769 - Improve <code>prefix_length</code> validation on available-prefixes API</li> <li>#3193 - Fix cable tracing across multiple rear ports</li> <li>#4340 - Enforce unique constraints for device and virtual machine names in the API</li> <li>#4343 - Fix Markdown support for tables</li> <li>#4365 - Fix exception raised on IP address bulk add view</li> <li>#4415 - Fix duplicate name validation on device model</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v2710-2020-03-10",
      "title": "v2.7.10 (2020-03-10)",
      "text": "<p>Note: If your deployment requires any non-core Python packages (such as <code>napalm</code>, <code>django-storages</code>, or <code>django-auth-ldap</code>), list them in a file named <code>local_requirements.txt</code> in the NetBox root directory (alongside <code>requirements.txt</code>). This will ensure they are detected and re-installed by the upgrade script when the Python virtual environment is rebuilt.</p>"
    },
    {
      "location": "release-notes/version-2.7/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#4217 - Embed model documentation within web UI</li> <li>#4323 - Add bulk edit view for power panels</li> <li>#4324 - Add CSV import view for services</li> <li>#4325 - Add CSV import view for rack reservations</li> <li>#4332 - Redirect to a user-friendly error page when CSS/JS resources fail to load</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4326 - Exclude Python modules without Script classes from scripts list</li> <li>#4337 - Allow bulk editing/deletion of all device components matching a query</li> <li>#4338 - Catch <code>AddrFormatError</code> exception when filtering aggregates/prefixes by an invalid prefix</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v279-2020-03-06",
      "title": "v2.7.9 (2020-03-06)",
      "text": "<p>Note: This release will deploy a Python virtual environment on upgrade in the <code>venv/</code> directory. This will require modifying the paths to your Python and gunicorn executables in the systemd service files. For more detail, please see the upgrade instructions.</p>"
    },
    {
      "location": "release-notes/version-2.7/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#3949 - Revised the installation docs and upgrade script to employ a Python virtual environment</li> <li>#4062 - Enumerate ChoiceField type and value in API</li> <li>#4119 - Extend upgrade script to clear expired user sessions</li> <li>#4121 - Add dynamic lookup expressions for all filters</li> <li>#4218 - Allow negative voltage for DC power feeds</li> <li>#4281 - Allow filtering device component list views by type</li> <li>#4284 - Add MRJ21 port and cable types</li> <li>#4290 - Include device name in tooltip on rack elevations</li> <li>#4305 - Add 10-inch option for rack width</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4274 - Fix incorrect schema definition of <code>int</code> type choicefields</li> <li>#4277 - Fix filtering of clusters by tenant</li> <li>#4282 - Fix label on export button for device types</li> <li>#4285 - Include A/Z termination sites in provider circuits table</li> <li>#4295 - Fix assignment of parent LAG during interface bulk edit</li> <li>#4298 - Fix bulk creation of objects with custom fields via REST API</li> <li>#4300 - Pass \"commit\" argument when executing scripts via REST API</li> <li>#4301 - Fix exception when deleting device type with components</li> <li>#4306 - Fix toggling of device images for all racks in elevations view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v278-2020-02-25",
      "title": "v2.7.8 (2020-02-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#3145 - Add a \"decommissioning\" cable status</li> <li>#4173 - Return graceful error message when webhook queuing fails</li> <li>#4227 - Omit internal fields from the change log data</li> <li>#4237 - Support Jinja2 templating for webhook payload and headers</li> <li>#4262 - Extend custom scripts to pass the <code>commit</code> value via <code>run()</code></li> <li>#4267 - Denote rack role on rack elevations list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4221 - Fix exception when deleting a device with interface connections when an interfaces webhook is defined</li> <li>#4222 - Escape double quotes on encapsulated values during CSV export</li> <li>#4224 - Fix display of rear device image if front image is not defined</li> <li>#4228 - Improve fit of device images in rack elevations</li> <li>#4230 - Fix rack units filtering on elevation endpoint</li> <li>#4232 - Enforce consistent background striping in rack elevations</li> <li>#4235 - Fix API representation of <code>content_type</code> for export templates</li> <li>#4239 - Fix exception when selecting all filtered objects during bulk edit</li> <li>#4240 - Fix exception when filtering foreign keys by NULL</li> <li>#4241 - Correct IP address hyperlinks on interface view</li> <li>#4246 - Fix duplication of field attributes when multiple IPNetworkVars are present in a script</li> <li>#4252 - Fix power port assignment for power outlet templates created via REST API</li> <li>#4272 - Interface type should be required by API serializer</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v277-2020-02-20",
      "title": "v2.7.7 (2020-02-20)",
      "text": "<p>Note: This release fixes a bug affecting the natural ordering of interfaces. If any interfaces appear unordered in NetBox, run the following management command to recalculate their naturalized values after upgrading:</p> <pre><code>python3 manage.py renaturalize dcim.Interface\n</code></pre>"
    },
    {
      "location": "release-notes/version-2.7/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#1529 - Enable display of device images in rack elevations</li> <li>#2511 - Compare object change to the previous change</li> <li>#3810 - Preserve slug value when editing existing objects</li> <li>#3840 - Enhance search function when selecting VLANs for interface assignment</li> <li>#4170 - Improve color contrast in rack elevation drawings</li> <li>#4206 - Add RJ-11 console port type</li> <li>#4209 - Enable filtering interfaces list view by enabled</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2519 - Avoid race condition when provisioning \"next available\" IPs/prefixes via the API</li> <li>#3967 - Fix missing migration for interface templates of type \"other\"</li> <li>#4168 - Role is not required when creating a virtual machine</li> <li>#4175 - Fix potential exception when bulk editing objects from a filtered list</li> <li>#4179 - Site is required when creating a rack group or power panel</li> <li>#4183 - Fix representation of NaturalOrderingField values in change log</li> <li>#4194 - Role field should not be required when searching/filtering secrets</li> <li>#4196 - Fix exception when viewing LLDP neighbors page</li> <li>#4202 - Prevent reassignment to master device when bulk editing VC member interfaces</li> <li>#4204 - Fix assignment of mask length when bulk editing prefixes</li> <li>#4211 - Include trailing text when naturalizing interface names</li> <li>#4213 - Restore display of tags and custom fields on power feed view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v276-2020-02-13",
      "title": "v2.7.6 (2020-02-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4166 - Fix schema migrations to enforce maximum character length for naturalized fields</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v275-2020-02-13",
      "title": "v2.7.5 (2020-02-13)",
      "text": "<p>Note: This release includes several database schema migrations that calculate and store copies of names for certain objects to improve natural ordering performance (see #3799). These migrations may take a few minutes to run if you have a very large number of objects defined in NetBox.</p>"
    },
    {
      "location": "release-notes/version-2.7/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#3766 - Allow custom script authors to specify the form widget for each variable</li> <li>#3799 - Greatly improve performance when ordering device components</li> <li>#3984 - Add support for Redis Sentinel</li> <li>#3986 - Include position numbers in SVG image when rendering rack elevations</li> <li>#4093 - Add more status choices for virtual machines</li> <li>#4100 - Add device filter to component list views</li> <li>#4113 - Add bulk edit functionality for device type components</li> <li>#4116 - Enable bulk edit and delete functions for device component list views</li> <li>#4129 - Add buttons to delete individual device type components</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3507 - Fix filtering IP addresses by multiple devices</li> <li>#3995 - Make dropdown menus in the navigation bar scrollable on small screens</li> <li>#4083 - Permit nullifying applicable choice fields via API requests</li> <li>#4089 - Selection of power outlet type during bulk update is optional</li> <li>#4090 - Render URL custom fields as links under object view</li> <li>#4091 - Fix filtering of objects by custom fields using UI search form</li> <li>#4099 - Linkify interfaces on global interfaces list</li> <li>#4108 - Avoid extraneous database queries when rendering search forms</li> <li>#4134 - Device power ports and outlets should inherit type from the parent device type</li> <li>#4137 - Disable occupied terminations when connecting a cable to a circuit</li> <li>#4138 - Restore device bay counts in rack elevation diagrams</li> <li>#4146 - Fix enforcement of secret role assignment for secret decryption</li> <li>#4150 - Correct YAML rendering of config contexts</li> <li>#4159 - Fix implementation of Redis caching configuration</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v274-2020-02-04",
      "title": "v2.7.4 (2020-02-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#568 - Allow custom fields to be imported and exported using CSV</li> <li>#2921 - Replace tags filter with Select2 widget</li> <li>#3313 - Toggle config context display between JSON and YAML</li> <li>#3886 - Enable assigning config contexts by cluster and cluster group</li> <li>#4051 - Disable the <code>makemigrations</code> management command</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4030 - Fix exception when bulk editing interfaces (revised)</li> <li>#4043 - Fix toggling of required fields in custom scripts</li> <li>#4049 - Restore missing <code>tags</code> field in IPAM service serializer</li> <li>#4052 - Fix error when bulk importing interfaces to virtual machines</li> <li>#4056 - Repair schema migration for Rack.outer_unit (from #3569)</li> <li>#4067 - Correct permission checked when creating a rack (vs. editing)</li> <li>#4071 - Enforce \"view tag\" permission on individual tag view</li> <li>#4079 - Fix assignment of power panel when bulk editing power feeds</li> <li>#4084 - Fix exception when creating an interface with tagged VLANs</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v273-2020-01-28",
      "title": "v2.7.3 (2020-01-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#3310 - Pre-select site/rack for B side when creating a new cable</li> <li>#3338 - Include circuit terminations in API representation of circuits</li> <li>#3509 - Add IP address variables for custom scripts</li> <li>#3978 - Add VRF filtering to search NAT IP</li> <li>#4005 - Include timezone context in webhook timestamps</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3950 - Automatically select parent manufacturer when specifying initial device type during device creation</li> <li>#3982 - Restore tooltip for reservations on rack elevations</li> <li>#3983 - Permit the creation of multiple unnamed devices</li> <li>#3989 - Correct HTTP content type assignment for webhooks</li> <li>#3999 - Do not filter child results by null if non-required parent fields are blank</li> <li>#4008 - Toggle rack elevation face using front/rear strings</li> <li>#4017 - Remove redundant tenant field from cluster form</li> <li>#4019 - Restore border around background devices in rack elevations</li> <li>#4022 - Fix display of assigned IPs when filtering device interfaces</li> <li>#4025 - Correct display of cable status (various places)</li> <li>#4027 - Repair schema migration for #3569 to convert IP addresses with DHCP status</li> <li>#4028 - Correct URL patterns to match Unicode characters in tag slugs</li> <li>#4030 - Fix exception when setting interfaces to tagged mode in bulk</li> <li>#4033 - Restore missing comments field label of various bulk edit forms</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v272-2020-01-21",
      "title": "v2.7.2 (2020-01-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#3135 - Documented power modelling</li> <li>#3842 - Add 802.11ax interface type</li> <li>#3954 - Add <code>device_bays</code> filter for devices and device types</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3721 - Allow Unicode characters in tag slugs</li> <li>#3923 - Indicate validation failure when using SSH-style RSA keys</li> <li>#3951 - Fix exception in webhook worker due to missing constant</li> <li>#3953 - Fix validation error when creating child devices</li> <li>#3960 - Fix legacy device status choice</li> <li>#3962 - Fix display of unnamed devices in rack elevations</li> <li>#3963 - Restore tooltip for devices in rack elevations</li> <li>#3964 - Show borders around devices in rack elevations</li> <li>#3965 - Indicate the presence of \"background\" devices in rack elevations</li> <li>#3966 - Fix filtering of device components by region/site</li> <li>#3967 - Resolve migration of \"other\" interface type</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v271-2020-01-16",
      "title": "v2.7.1 (2020-01-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_11",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3941 - Fixed exception when attempting to assign IP to interface</li> <li>#3943 - Prevent rack elevation links from opening new tabs/windows</li> <li>#3944 - Fix AttributeError exception when viewing prefixes list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#v270-2020-01-16",
      "title": "v2.7.0 (2020-01-16)",
      "text": "<p>Note: This release completely removes the topology map feature (#2745).</p> <p>Note: NetBox v2.7 is the last major release that will support Python 3.5. Beginning with NetBox v2.8, Python 3.6 or higher will be required.</p>"
    },
    {
      "location": "release-notes/version-2.7/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#enhanced-device-type-import-451",
      "title": "Enhanced Device Type Import (#451)",
      "text": "<p>NetBox now supports the import of device types and related component templates using definitions written in YAML or JSON. For example, the following will create a new device type with four network interfaces, two power ports, and a console port:</p> <pre><code>manufacturer: Acme\nmodel: Packet Shooter 9000\nslug: packet-shooter-9000\nu_height: 1\ninterfaces:\n  - name: ge-0/0/0\n    type: 1000base-t\n  - name: ge-0/0/1\n    type: 1000base-t\n  - name: ge-0/0/2\n    type: 1000base-t\n  - name: ge-0/0/3\n    type: 1000base-t\npower-ports:\n  - name: PSU0\n  - name: PSU1\nconsole-ports:\n  - name: Console\n</code></pre> <p>This new functionality replaces the old CSV-based import form, which did not allow for bulk import of component templates.</p>"
    },
    {
      "location": "release-notes/version-2.7/#bulk-import-of-device-components-822",
      "title": "Bulk Import of Device Components (#822)",
      "text": "<p>Device components such as console ports, power ports, and interfaces can now be imported in bulk to multiple devices in CSV format. Here's an example showing the bulk import of interfaces to several devices:</p> <pre><code>device,name,type\nSwitch1,Vlan100,Virtual\nSwitch1,Vlan200,Virtual\nSwitch2,Vlan100,Virtual\nSwitch2,Vlan200,Virtual\n</code></pre> <p>The import form for each type of device component is available under the \"Devices\" item in the navigation menu.</p>"
    },
    {
      "location": "release-notes/version-2.7/#external-file-storage-1814",
      "title": "External File Storage (#1814)",
      "text": "<p>In prior releases, the only option for storing uploaded files (e.g. image attachments) was to save them to the local filesystem on the NetBox server. This release introduces support for several remote storage backends provided by the <code>django-storages</code> library. These include:</p> <ul> <li>Amazon S3</li> <li>ApacheLibcloud</li> <li>Azure Storage</li> <li>netbox-community Spaces</li> <li>Dropbox</li> <li>FTP</li> <li>Google Cloud Storage</li> <li>SFTP</li> </ul> <p>To enable remote file storage, first install the <code>django-storages</code> package:</p> <pre><code>pip install django-storages\n</code></pre> <p>Then, set the appropriate storage backend and its configuration in <code>configuration.py</code>. Here's an example using Amazon S3:</p> <pre><code>STORAGE_BACKEND = 'storages.backends.s3boto3.S3Boto3Storage'\nSTORAGE_CONFIG = {\n    'AWS_ACCESS_KEY_ID': '&lt;Key&gt;',\n    'AWS_SECRET_ACCESS_KEY': '&lt;Secret&gt;',\n    'AWS_STORAGE_BUCKET_NAME': 'netbox',\n    'AWS_S3_REGION_NAME': 'eu-west-1',\n}\n</code></pre> <p>Thanks to @steffann for contributing this work!</p>"
    },
    {
      "location": "release-notes/version-2.7/#rack-elevations-rendered-via-svg-2248",
      "title": "Rack Elevations Rendered via SVG (#2248)",
      "text": "<p>NetBox v2.7 introduces a new method of rendering rack elevations as an SVG image via a REST API endpoint. This replaces the prior method of rendering elevations using pure HTML and CSS, which was cumbersome and had several shortcomings. Rendering rack elevations as SVG images via the REST API allows users to retrieve and make use of the drawings in their own tooling. This also opens the door to other feature requests related to rack elevations in the NetBox backlog.</p> <p>This feature implements a new REST API endpoint:</p> <pre><code>/api/dcim/racks/&lt;id&gt;/elevation/\n</code></pre> <p>By default, this endpoint returns a paginated JSON response representing each rack unit in the given elevation. This is the same response returned by the existing rack units detail endpoint at <code>/api/dcim/racks/&lt;id&gt;/units/</code>, which will be removed in v2.8 (see #3753).</p> <p>To render the elevation as an SVG image, include the <code>render=svg</code> query parameter in the request. You may also control the width and height of the elevation drawing (in pixels) by passing the <code>unit_width</code> and <code>unit_height</code> parameters. (The default values for these parameters are 230 and 20, respectively.) Additionally, the <code>face</code> parameter may be used to request either the <code>front</code> or <code>rear</code> of the elevation. Below is in example request:</p> <pre><code>/api/dcim/racks/&lt;id&gt;/elevation/?render=svg&amp;face=rear&amp;unit_width=300&amp;unit_height=35\n</code></pre> <p>Thanks to @hellerve for doing the heavy lifting on this!</p>"
    },
    {
      "location": "release-notes/version-2.7/#changes",
      "title": "Changes",
      "text": ""
    },
    {
      "location": "release-notes/version-2.7/#topology-maps-removed-2745",
      "title": "Topology Maps Removed (#2745)",
      "text": "<p>The topology maps feature has been removed to help focus NetBox development efforts. Please replicate any required data to another source before upgrading NetBox to v2.7, as any existing topology maps will be deleted.</p>"
    },
    {
      "location": "release-notes/version-2.7/#supervisor-replaced-with-systemd-2902",
      "title": "Supervisor Replaced with systemd (#2902)",
      "text": "<p>The NetBox installation documentation has been updated to provide instructions for managing the WSGI and RQ services using systemd instead of supervisor. This removes the need to install supervisor and simplifies administration of the processes.</p>"
    },
    {
      "location": "release-notes/version-2.7/#redis-configuration-3282",
      "title": "Redis Configuration (#3282)",
      "text": "<p>NetBox v2.6 introduced request caching and added the <code>CACHE_DATABASE</code> option to the existing <code>REDIS</code> database configuration parameter. This did not, however, allow for using two different Redis connections for the separate caching and webhook queuing functions. This release modifies the <code>REDIS</code> parameter to accept two discrete subsections named <code>webhooks</code> and <code>caching</code>. This requires modification of the <code>REDIS</code> parameter in <code>configuration.py</code> as follows:</p> <p>Old Redis configuration:</p> <pre><code>REDIS = {\n    'HOST': 'localhost',\n    'PORT': 6379,\n    'PASSWORD': '',\n    'DATABASE': 0,\n    'CACHE_DATABASE': 1,\n    'DEFAULT_TIMEOUT': 300,\n    'SSL': False,\n}\n</code></pre> <p>New Redis configuration:</p> <pre><code>REDIS = {\n    'webhooks': {\n        'HOST': 'redis.example.com',\n        'PORT': 1234,\n        'PASSWORD': 'foobar',\n        'DATABASE': 0,\n        'DEFAULT_TIMEOUT': 300,\n        'SSL': False,\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'DEFAULT_TIMEOUT': 300,\n        'SSL': False,\n    }\n}\n</code></pre> <p>Note that the <code>CACHE_DATABASE</code> parameter has been removed and the connection settings have been duplicated for both <code>webhooks</code> and <code>caching</code>. This allows the user to make use of separate Redis instances if desired. It is fine to use the same Redis service for both functions, although the database identifiers should be different.</p>"
    },
    {
      "location": "release-notes/version-2.7/#webhooks_enabled-configuration-setting-removed-3408",
      "title": "WEBHOOKS_ENABLED Configuration Setting Removed (#3408)",
      "text": "<p>As <code>django-rq</code> is now a required library, NetBox assumes that the RQ worker process is running. The installation and upgrade documentation has been updated to reflect this, and the <code>WEBHOOKS_ENABLED</code> configuration parameter is no longer used. Please ensure that both the NetBox WSGI service and the RQ worker process are running on all production installations.</p>"
    },
    {
      "location": "release-notes/version-2.7/#api-choice-fields-now-use-string-values-3569",
      "title": "API Choice Fields Now Use String Values (#3569)",
      "text": "<p>NetBox's REST API presents fields which reference a particular choice as a dictionary with two keys: <code>value</code> and <code>label</code>. In previous versions, <code>value</code> was an integer which represented a particular choice in the database. This has been changed to a more human-friendly \"slug\" string, which is essentially a simplified version of the choice's <code>label</code>.</p> <p>For example, The site model's <code>status</code> field was previously represented as:</p> <pre><code>\"status\": {\n    \"value\": 1,\n    \"label\": \"Active\"\n},\n</code></pre> <p>In NetBox v2.7, it now looks like this:</p> <pre><code>\"status\": {\n    \"value\": \"active\",\n    \"label\": \"Active\",\n    \"id\": 1\n},\n</code></pre> <p>This change allows for much more intuitive representation and manipulation of values, and removes the need for API consumers to maintain local mappings of static integer values.</p> <p>Note that that all v2.7 releases will continue to accept the legacy integer values in write requests (<code>POST</code>, <code>PUT</code>, and <code>PATCH</code>) to maintain backward compatibility. Additionally, the legacy numeric identifier is conveyed in the <code>id</code> field for convenient reference as consumers adopt to the new string values. This behavior will be discontinued in NetBox v2.8.</p>"
    },
    {
      "location": "release-notes/version-2.7/#enhancements_10",
      "title": "Enhancements",
      "text": "<ul> <li>#33 - Add ability to clone objects (pre-populate form fields)</li> <li>#648 - Pre-populate form fields when selecting \"create and   add another\"</li> <li>#792 - Add power port and power outlet types</li> <li>#1865 - Add console port and console server port types</li> <li>#2669 - Relax uniqueness constraint on device and VM names</li> <li>#2902 - Replace <code>supervisord</code> with <code>systemd</code></li> <li>#3455 - Add tenant assignment to virtual machine clusters</li> <li>#3520 - Add Jinja2 template support for graphs</li> <li>#3525 - Enable IP address filtering using multiple address   parameters</li> <li>#3564 - Add list views for all device components</li> <li>#3538 - Introduce a REST API endpoint for executing custom   scripts</li> <li>#3655 - Add <code>description</code> field to organizational models</li> <li>#3664 - Enable applying configuration contexts by tags</li> <li>#3706 - Increase <code>available_power</code> maximum value on   PowerFeed</li> <li>#3731 - Change Graph.type to a ContentType foreign key field</li> <li>#3801 - Use YAML for export of device types</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes_12",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3830 - Ensure deterministic ordering for all models</li> <li>#3900 - Fix exception when deleting device types</li> <li>#3914 - Fix interface filter field when unauthenticated</li> <li>#3919 - Fix utilization graph extending out of bounds when   utilization &gt; 100%</li> <li>#3927 - Fix exception when deleting devices with secrets   assigned</li> <li>#3930 - Fix API rendering of the <code>family</code> field for   aggregates</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#bug-fixes-from-beta",
      "title": "Bug Fixes (From Beta)",
      "text": "<ul> <li>#3868 - Fix creation of interfaces for virtual machines</li> <li>#3878 - Fix database migration for cable status field</li> </ul>"
    },
    {
      "location": "release-notes/version-2.7/#api-changes",
      "title": "API Changes",
      "text": "<ul> <li>Choice fields now use human-friendly strings for their values instead of integers (see   #3569).</li> <li>Introduced the <code>/api/extras/scripts/</code> endpoint for retrieving and executing custom scripts</li> <li>circuits.CircuitType: Added field <code>description</code></li> <li>dcim.ConsolePort: Added field <code>type</code></li> <li>dcim.ConsolePortTemplate: Added field <code>type</code></li> <li>dcim.ConsoleServerPort: Added field <code>type</code></li> <li>dcim.ConsoleServerPortTemplate: Added field <code>type</code></li> <li>dcim.DeviceRole: Added field <code>description</code></li> <li>dcim.PowerPort: Added field <code>type</code></li> <li>dcim.PowerPortTemplate: Added field <code>type</code></li> <li>dcim.PowerOutlet: Added field <code>type</code></li> <li>dcim.PowerOutletTemplate: Added field <code>type</code></li> <li>dcim.RackRole: Added field <code>description</code></li> <li>extras.Graph: Added field <code>template_language</code> (to indicate <code>django</code> or <code>jinja2</code>)</li> <li>extras.Graph: The <code>type</code> field has been changed to a content type foreign key. Models are specified as   <code>&lt;app&gt;.&lt;model&gt;</code>; e.g. <code>dcim.site</code>.</li> <li>ipam.Role: Added field <code>description</code></li> <li>secrets.SecretRole: Added field <code>description</code></li> <li>virtualization.Cluster: Added field <code>tenant</code></li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/",
      "title": "NetBox v2.8",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#v289-2020-08-04",
      "title": "v2.8.9 (2020-08-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#4898 - Add MAC address search field to interfaces list</li> <li>#4899 - Add MAC address column to interfaces table</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4455 - Fix ordering of prefixes beneath aggregate when available space is hidden</li> <li>#4875 - Fix documentation for image attachments</li> <li>#4876 - Fix labels for sites in staging or decommissioning status</li> <li>#4880 - Fix removal of tagged VLANs if not assigned in bulk interface editing</li> <li>#4887 - Don't disable NAPALM tabs when device has no primary IP</li> <li>#4894 - Fix display of device/VM counts on platforms list</li> <li>#4895 - Force UTF-8 encoding when embedding model documentation</li> <li>#4910 - Unpin redis dependency to fix exception in RQ worker</li> <li>#4926 - Fix ordering of VM interfaces in REST API endpoint</li> <li>#4927 - Fix validation error when updating an existing secret</li> <li>#4929 - Correct log message when creating a new object</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v288-2020-07-21",
      "title": "v2.8.8 (2020-07-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#4805 - Improve handling of plugin loading errors</li> <li>#4829 - Add NEMA 15 power port and outlet types</li> <li>#4831 - Allow NAPALM to resolve device name when primary IP is not set</li> <li>#4854 - Add staging and decommissioning statuses for sites</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3240 - Correct OpenAPI definition for available-prefixes endpoint</li> <li>#4595 - Ensure consistent display of non-racked and child devices on rack view</li> <li>#4803 - Return IP family (4 or 6) as integer rather than string</li> <li>#4821 - Restrict group options by selected site when bulk editing VLANs</li> <li>#4835 - Support passing multiple initial values for multiple choice fields</li> <li>#4838 - Fix rack power utilization display for racks without devices</li> <li>#4851 - Show locally connected peer on circuit terminations</li> <li>#4856 - Redirect user back to circuit after connecting a termination</li> <li>#4872 - Enable filtering virtual machine interfaces by tag</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v287-2020-07-02",
      "title": "v2.8.7 (2020-07-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#4796 - Introduce configuration parameters for default rack elevation size</li> <li>#4802 - Allow changing page size when displaying only a single page of results</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4695 - Expose cable termination type choices in OpenAPI spec</li> <li>#4708 - Relax connection constraints for multi-position rear ports</li> <li>#4766 - Fix redirect after login when <code>next</code> is not specified</li> <li>#4771 - Fix add/remove tag population when bulk editing objects</li> <li>#4772 - Fix \"brief\" format for the secrets REST API endpoint</li> <li>#4774 - Fix exception when deleting a device with device bays</li> <li>#4775 - Allow selecting an alternate device type when creating component templates</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v286-2020-06-15",
      "title": "v2.8.6 (2020-06-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#4698 - Improve display of template code for object in admin UI</li> <li>#4717 - Introduce <code>ALLOWED_URL_SCHEMES</code> configuration parameter to mitigate dangerous hyperlinks</li> <li>#4744 - Hide \"IP addresses\" tab when viewing a container prefix</li> <li>#4755 - Enable creation of rack reservations directly from navigation menu</li> <li>#4761 - Enable tag assignment during bulk creation of IP addresses</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4674 - Fix API definition for available prefix and IP address endpoints</li> <li>#4702 - Catch IntegrityError exception when adding a non-unique secret</li> <li>#4707 - Fix <code>prefix_count</code> population on VLAN API serializer</li> <li>#4710 - Fix merging of form fields among custom scripts</li> <li>#4725 - Fix \"brief\" rendering of various REST API endpoints</li> <li>#4736 - Add cable trace endpoints for pass-through ports</li> <li>#4737 - Fix display of role labels in virtual machines table</li> <li>#4743 - Allow users to create \"next available\" IPs without needing permission to create prefixes</li> <li>#4756 - Filter parent group by site when creating rack groups</li> <li>#4760 - Enable power port template assignment when bulk editing power outlet templates</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v285-2020-05-26",
      "title": "v2.8.5 (2020-05-26)",
      "text": "<p>Note: The minimum required version of PostgreSQL is now 9.6.</p>"
    },
    {
      "location": "release-notes/version-2.8/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#4650 - Expose <code>INTERNAL_IPS</code> configuration parameter</li> <li>#4651 - Add <code>csrf_token</code> context for plugin templates</li> <li>#4652 - Add permissions context for plugin templates</li> <li>#4665 - Add NEMA L14 and L21 power port/outlet types</li> <li>#4672 - Set default color for rack and devices roles</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3304 - Fix caching invalidation issue related to device/virtual machine primary IP addresses</li> <li>#4525 - Allow passing initial data to custom script MultiObjectVar</li> <li>#4644 - Fix ordering of services table by parent</li> <li>#4646 - Correct UI link for reports with custom name</li> <li>#4647 - Fix caching invalidation issue related to assigning new IP addresses to interfaces</li> <li>#4648 - Fix bulk CSV import of child devices</li> <li>#4649 - Fix interface assignment for bulk-imported IP addresses</li> <li>#4676 - Set default value of <code>REMOTE_AUTH_AUTO_CREATE_USER</code> as <code>False</code> in docs</li> <li>#4684 - Respect <code>comments</code> field when importing device type in YAML/JSON format</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v284-2020-05-13",
      "title": "v2.8.4 (2020-05-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#4632 - Extend email configuration parameters to support SSL/TLS</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4598 - Display error message when invalid cable length is specified</li> <li>#4604 - Multi-position rear ports may only be connected to other rear ports</li> <li>#4607 - Missing Contextual help for API Tokens</li> <li>#4613 - Fix tag assignment on config contexts (regression from #4527)</li> <li>#4617 - Restore IP prefix depth notation in list view</li> <li>#4629 - Replicate assigned interface when cloning IP addresses</li> <li>#4633 - Bump django-rq to v2.3.2 to fix ImportError with rq 1.4.0</li> <li>#4634 - Inventory Item List view exception caused by incorrect accessor definition </li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v283-2020-05-06",
      "title": "v2.8.3 (2020-05-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4593 - Fix AttributeError exception when viewing object lists as a non-authenticated user</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v282-2020-05-06",
      "title": "v2.8.2 (2020-05-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#492 - Enable toggling and rearranging table columns</li> <li>#3147 - Allow specifying related objects by arbitrary attribute during CSV import</li> <li>#3064 - Include tags in object lists as a toggleable table column</li> <li>#3294 - Implement mechanism for storing user preferences</li> <li>#4421 - Retain user's preference for config context format</li> <li>#4502 - Enable configuration of proxies for outbound HTTP requests</li> <li>#4531 - Retain user's preference for page length</li> <li>#4554 - Add ServerTech's HDOT Cx power outlet type</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4527 - Fix assignment of certain tags to config contexts</li> <li>#4545 - Removed all squashed schema migrations to allow direct upgrades from very old releases</li> <li>#4548 - Fix tracing cables through a single RearPort</li> <li>#4549 - Fix encoding unicode webhook body data</li> <li>#4556 - Update form for adding devices to clusters</li> <li>#4578 - Prevent setting 0U height on device type with racked instances</li> <li>#4584 - Ensure consistent support for filtering objects by <code>id</code> across all REST API endpoints</li> <li>#4588 - Restore ability to add/remove tags on services, virtual chassis in bulk</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v281-2020-04-23",
      "title": "v2.8.1 (2020-04-23)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.8/#notes",
      "title": "Notes",
      "text": "<p>In accordance with the fix in #4459, users that are experiencing invalid nested data with regions, rack groups, or tenant groups can perform a one-time operation using the NetBox shell to rebuild the correct nested relationships after upgrading:</p> <pre><code>$ python netbox/manage.py nbshell\n### NetBox interactive shell (localhost)\n### Python 3.6.4 | Django 3.0.5 | NetBox 2.8.1\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n&gt;&gt;&gt; Region.objects.rebuild()\n&gt;&gt;&gt; RackGroup.objects.rebuild()\n&gt;&gt;&gt; TenantGroup.objects.rebuild()\n</code></pre>"
    },
    {
      "location": "release-notes/version-2.8/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#4464 - Add 21-inch rack width (ETSI)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#2994 - Prevent modifying termination points of existing cable to ensure end-to-end path integrity</li> <li>#3356 - Correct Swagger schema specification for the available prefixes/IPs API endpoints</li> <li>#4139 - Enable assigning all relevant attributes during bulk device/VM component creation</li> <li>#4336 - Ensure interfaces without a subinterface ID are ordered before subinterface zero</li> <li>#4361 - Fix Type of <code>connection_state</code> in Swagger schema</li> <li>#4388 - Fix detection of connected endpoints when connecting rear ports</li> <li>#4459 - Fix caching issue resulting in erroneous nested data for regions, rack groups, and tenant groups</li> <li>#4489 - Fix display of parent/child role on device type view</li> <li>#4496 - Fix exception when validating certain models via REST API</li> <li>#4510 - Enforce address family for device primary IPv4/v6 addresses</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#v280-2020-04-13",
      "title": "v2.8.0 (2020-04-13)",
      "text": "<p>NOTE: Beginning with release 2.8.0, NetBox requires Python 3.6 or later.</p>"
    },
    {
      "location": "release-notes/version-2.8/#new-features-beta",
      "title": "New Features (Beta)",
      "text": "<p>This releases introduces two new features in beta status. While they are expected to be functional, their precise implementation is subject to change during the v2.8 release cycle. It is recommended to wait until NetBox v2.9 to deploy them in production.</p>"
    },
    {
      "location": "release-notes/version-2.8/#remote-authentication-support-2328",
      "title": "Remote Authentication Support (#2328)",
      "text": "<p>Several new configuration parameters provide support for authenticating an incoming request based on the value of a specific HTTP header. This can be leveraged to employ remote authentication via an nginx or Apache plugin, directing NetBox to create and configure a local user account as needed. The configuration parameters are:</p> <ul> <li><code>REMOTE_AUTH_ENABLED</code> - Enables remote authentication (disabled by default)</li> <li><code>REMOTE_AUTH_HEADER</code> - The name of the HTTP header which conveys the username</li> <li><code>REMOTE_AUTH_AUTO_CREATE_USER</code> - Enables the automatic creation of new users (disabled by default)</li> <li><code>REMOTE_AUTH_DEFAULT_GROUPS</code> - A list of groups to assign newly created users</li> <li><code>REMOTE_AUTH_DEFAULT_PERMISSIONS</code> - A list of permissions to assign newly created users</li> </ul> <p>If further customization of remote authentication is desired (for instance, if you want to pass group/permission information via HTTP headers as well), NetBox allows you to inject a custom Django authentication backend to retain full control over the authentication and configuration of remote users.</p>"
    },
    {
      "location": "release-notes/version-2.8/#plugins-3351",
      "title": "Plugins (#3351)",
      "text": "<p>This release introduces support for custom plugins, which can be used to extend NetBox's functionality beyond what the core product provides. For example, plugins can be used to:</p> <ul> <li>Add new Django models</li> <li>Provide new views with custom templates</li> <li>Inject custom template into object views</li> <li>Introduce new API endpoints</li> <li>Add custom request/response middleware</li> </ul> <p>For NetBox plugins to be recognized, they must be installed and added by name to the <code>PLUGINS</code> configuration parameter. (Plugin support is disabled by default.) Plugins can be configured under the <code>PLUGINS_CONFIG</code> parameter. More information can be found the in the plugins documentation.</p>"
    },
    {
      "location": "release-notes/version-2.8/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#1754 - Added support for nested rack groups</li> <li>#3939 - Added support for nested tenant groups</li> <li>#4078 - Standardized description fields across all models</li> <li>#4195 - Enabled application logging (see logging configuration)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4474 - Fix population of device types when bulk editing devices</li> <li>#4476 - Correct typo in slugs for Infiniband interface types</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#api-changes",
      "title": "API Changes",
      "text": "<ul> <li>The <code>_choices</code> API endpoints have been removed. Instead, use an <code>OPTIONS</code> request to a model's endpoint to view the available values for all fields. (#3416)</li> <li>The <code>id__in</code> filter has been removed from all models (#4313). Use the format <code>?id=1&amp;id=2</code> instead.</li> <li>dcim.Manufacturer: Added a <code>description</code> field</li> <li>dcim.Platform: Added a <code>description</code> field</li> <li>dcim.Rack: The <code>/api/dcim/racks/&lt;pk&gt;/units/</code> endpoint has been replaced with <code>/api/dcim/racks/&lt;pk&gt;/elevation/</code>.</li> <li>dcim.RackGroup: Added a <code>description</code> field</li> <li>dcim.Region: Added a <code>description</code> field</li> <li>extras.Tag: Renamed <code>comments</code> to <code>description</code>; truncated length to 200 characters; removed Markdown rendering</li> <li>ipam.RIR: Added a <code>description</code> field</li> <li>ipam.VLANGroup: Added a <code>description</code> field</li> <li>tenancy.TenantGroup: Added a <code>description</code> field</li> <li>virtualization.ClusterGroup: Added a <code>description</code> field</li> <li>virtualization.ClusterType: Added a <code>description</code> field</li> </ul>"
    },
    {
      "location": "release-notes/version-2.8/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#4081 - The <code>family</code> field has been removed from the Aggregate, Prefix, and IPAddress models. The field remains available in the API representations of these models, however the column has been removed from the database table.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/",
      "title": "NetBox v2.9",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#v2911-2020-12-11",
      "title": "v2.9.11 (2020-12-11)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#5424 - Allow passing Python code to <code>nbshell</code> using <code>--command</code></li> <li>#5439 - Add CS and SN fiber port types</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5383 - Fix setting user password via REST API</li> <li>#5396 - Fix uniqueness constraint for virtual machine names</li> <li>#5387 - Fix error when rendering config contexts when objects have multiple tags assigned</li> <li>#5407 - Add direct link to secret on secrets list</li> <li>#5408 - Fix updating secrets without setting new plaintext</li> <li>#5410 - Restore tags field on cable connection forms</li> <li>#5433 - Exclude SVG files from front/rear image upload for device types (currently unsupported)</li> <li>#5436 - Show assigned IP addresses in interfaces list</li> <li>#5446 - Fix validation for plugin version and required settings</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v2910-2020-11-24",
      "title": "v2.9.10 (2020-11-24)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#5319 - Add USB types for power ports and outlets</li> <li>#5337 - Add \"splice\" type for pass-through ports</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5235 - Fix exception when editing IP address with a NAT IP assigned to a non-racked device</li> <li>#5309 - Avoid extraneous database queries when manipulating objects</li> <li>#5345 - Fix non-deterministic ordering of prefixes and IP addresses</li> <li>#5350 - Filter available racks by selected group when creating a rack reservation</li> <li>#5355 - Limit rack groups by selected site when editing a rack</li> <li>#5356 - Populate manufacturer field when adding a device component template</li> <li>#5360 - Clear VLAN assignments when setting interface mode to none</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v299-2020-11-09",
      "title": "v2.9.9 (2020-11-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#5304 - Return server error messages as JSON when handling REST API requests</li> <li>#5310 - Link to rack groups within rack list table</li> <li>#5327 - Be more strict when capturing anticipated ImportError exceptions</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5271 - Fix auto-population of region field when editing a device</li> <li>#5314 - Fix config context rendering when multiple tags are assigned to an object</li> <li>#5316 - Dry running scripts should not trigger webhooks</li> <li>#5324 - Add missing template extension tags for plugins for VM interface view</li> <li>#5328 - Fix CreatedUpdatedFilterTest when running in non-UTC timezone</li> <li>#5331 - Fix filtering of sites by null region</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v298-2020-10-30",
      "title": "v2.9.8 (2020-10-30)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#4559 - Improve device/VM context data rendering performance</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#3672 - Fix a caching issue causing incorrect related object counts in API responses</li> <li>#5113 - Fix incorrect caching of permission object assignments to user groups in the admin panel</li> <li>#5243 - Redirect user to appropriate tab after modifying device components</li> <li>#5273 - Fix exception when validating a new permission with no models selected</li> <li>#5282 - Fix high CPU load when LDAP authentication is enabled</li> <li>#5285 - Plugins no longer need to define <code>app_name</code> for API URLs to be included in the root view</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v297-2020-10-12",
      "title": "v2.9.7 (2020-10-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5231 - Fix KeyError exception when viewing object with custom link and debugging is disabled</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v296-2020-10-09",
      "title": "v2.9.6 (2020-10-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5229 - Fix AttributeError exception when LDAP authentication is enabled</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v295-2020-10-09",
      "title": "v2.9.5 (2020-10-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#5202 - Extend the available context data when rendering custom links</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4523 - Populate site vlan list when bulk editing interfaces under certain circumstances</li> <li>#5174 - Ensure consistent alignment of rack elevations</li> <li>#5175 - Fix toggling of rack elevation order</li> <li>#5184 - Fix missing Power Utilization</li> <li>#5197 - Limit duplicate IPs shown on IP address view</li> <li>#5199 - Change default LDAP logging to INFO</li> <li>#5201 - Fix missing querystring when bulk editing/deleting VLAN Group VLANs when selecting \"select all x items matching query\"</li> <li>#5206 - Apply user pagination preferences to all paginated object lists</li> <li>#5211 - Add missing <code>has_primary_ip</code> filter for virtual machines</li> <li>#5217 - Prevent erroneous removal of prefetched GenericForeignKey data from tables</li> <li>#5218 - Raise validation error if a power port's <code>allocated_draw</code> exceeds its <code>maximum_draw</code></li> <li>#5220 - Fix API patch request against IP Address endpoint with null assigned_object_type </li> <li>#5221 - Fix bulk component creation for virtual machines</li> <li>#5224 - Don't allow a rear port to have fewer positions than the number of mapped front ports</li> <li>#5226 - Custom choice fields should be blank initially if no default choice has been designated</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v294-2020-09-23",
      "title": "v2.9.4 (2020-09-23)",
      "text": "<p>NOTE: This release removes support for the <code>DEFAULT_TIMEOUT</code> parameter under <code>REDIS</code> database configuration. Set <code>RQ_DEFAULT_TIMEOUT</code> as a global configuration parameter instead.</p> <p>NOTE: Any permissions referencing the legacy ReportResult model (e.g. <code>extras.view_reportresult</code>) should be updated to reference the Report model.</p>"
    },
    {
      "location": "release-notes/version-2.9/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#1755 - Toggle order in which rack elevations are displayed</li> <li>#5128 - Increase maximum rear port positions from 64 to 1024</li> <li>#5134 - Display full hierarchy in breadcrumbs for sites/racks</li> <li>#5149 - Add rack group field to device edit form</li> <li>#5164 - Show total rack count per rack group under site view</li> <li>#5171 - Introduce the <code>RQ_DEFAULT_TIMEOUT</code> configuration parameter</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5050 - Fix potential failure on <code>0016_replicate_interfaces</code> schema migration from old release</li> <li>#5066 - Update <code>view_reportresult</code> to <code>view_report</code> permission</li> <li>#5075 - Include a VLAN membership view for VM interfaces</li> <li>#5105 - Validation should fail when reassigning a primary IP from device to VM</li> <li>#5109 - Fix representation of custom choice field values for webhook data</li> <li>#5108 - Fix execution of reports via CLI</li> <li>#5111 - Allow use of tuples when specifying ObjectVar <code>query_params</code></li> <li>#5118 - Specifying an empty list of tags should clear assigned tags (REST API)</li> <li>#5133 - Fix disassociation of an IP address from a VM interface</li> <li>#5136 - Fix exception when bulk editing interface 802.1Q mode</li> <li>#5156 - Add missing \"add\" button to rack reservations list</li> <li>#5167 - Support filtering ObjectChanges by multiple users</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v293-2020-09-04",
      "title": "v2.9.3 (2020-09-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#4977 - Redirect authenticated users from login view</li> <li>#5048 - Show the device/VM name when editing a component</li> <li>#5072 - Add REST API filters for image attachments</li> <li>#5080 - Add 8P6C, 8P4C, 8P2C port types</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5046 - Disabled plugin menu items are no longer clickable</li> <li>#5063 - Fix \"add device\" link in rack elevations for opposite side of half-depth devices</li> <li>#5074 - Fix inclusion of VC member interfaces when viewing VC master</li> <li>#5078 - Fix assignment of existing IP addresses to interfaces via web UI</li> <li>#5081 - Fix exception during webhook processing with custom select field</li> <li>#5085 - Fix ordering by assignment in IP addresses table</li> <li>#5087 - Restore label field when editing console server ports, power ports, and power outlets</li> <li>#5089 - Redirect to device view after editing component</li> <li>#5090 - Fix status display for console/power/interface connections</li> <li>#5091 - Avoid KeyError when handling invalid table preferences</li> <li>#5095 - Show assigned prefixes in VLANs list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v292-2020-08-27",
      "title": "v2.9.2 (2020-08-27)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#5055 - Add tags column to device/VM component list tables</li> <li>#5056 - Add interface and parent columns to IP address list</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4988 - Fix ordering of rack reservations with identical creation times</li> <li>#5002 - Correct OpenAPI definition for <code>available-prefixes</code> endpoint</li> <li>#5035 - Fix exception when modifying an IP address assigned to a VM</li> <li>#5038 - Fix validation of primary IPs assigned to virtual machines</li> <li>#5040 - Limit SLAAC status to IPv6 addresses</li> <li>#5041 - Fix form tabs when assigning an IP to a VM interface</li> <li>#5042 - Fix display of SLAAC label for IP addresses status</li> <li>#5045 - Allow assignment of interfaces to non-master VC peer LAG during import</li> <li>#5058 - Correct URL for front rack elevation images when using external storage</li> <li>#5059 - Fix inclusion of checkboxes for interfaces in virtual machine view</li> <li>#5060 - Fix validation when bulk-importing child devices</li> <li>#5061 - Allow adding/removing tags when bulk editing virtual machine interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v291-2020-08-22",
      "title": "v2.9.1 (2020-08-22)",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#4540 - Add IP address status type for SLAAC</li> <li>#4814 - Allow nested LAG interfaces</li> <li>#4991 - Add Python and NetBox versions to error page</li> <li>#5033 - Support backward compatibility for <code>REMOTE_AUTH_BACKEND</code> configuration parameter</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#v290-2020-08-21",
      "title": "v2.9.0 (2020-08-21)",
      "text": "<p>Note: Redis 4.0 or later is required for this release.</p>"
    },
    {
      "location": "release-notes/version-2.9/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-2.9/#object-based-permissions-554",
      "title": "Object-Based Permissions (#554)",
      "text": "<p>NetBox v2.9 replaces Django's built-in permissions framework with one that supports object-based assignment of permissions using arbitrary constraints. When granting a user or group permission to perform a certain action on one or more types of objects, an administrator can optionally specify a set of constraints. The permission will apply only to objects which match the specified constraints. For example, assigning permission to modify devices with the constraint <code>{\"tenant__group__name\": \"Customers\"}</code> would allow the associated users/groups to perform an action only on devices assigned to a tenant belonging to the \"Customers\" group.</p>"
    },
    {
      "location": "release-notes/version-2.9/#background-execution-of-scripts-reports-2006",
      "title": "Background Execution of Scripts &amp; Reports (#2006)",
      "text": "<p>When running a report or custom script, its execution is now queued for background processing and the user receives an immediate response indicating its status. This prevents long-running scripts from resulting in a timeout error. Once the execution has completed, the page will automatically refresh to display its results. Both scripts and reports now store their output in the new JobResult model. (The ReportResult model has been removed.)</p>"
    },
    {
      "location": "release-notes/version-2.9/#named-virtual-chassis-2018",
      "title": "Named Virtual Chassis (#2018)",
      "text": "<p>The VirtualChassis model now has a mandatory <code>name</code> field. Names are assigned to the virtual chassis itself rather than referencing the master VC member. Additionally, the designation of a master is now optional: a virtual chassis may have only non-master members.</p>"
    },
    {
      "location": "release-notes/version-2.9/#changes-to-tag-creation-3703",
      "title": "Changes to Tag Creation (#3703)",
      "text": "<p>Tags are no longer created automatically: A tag must be created by a user before it can be applied to any object. Additionally, the REST API representation of assigned tags has been expanded to be consistent with other objects.</p>"
    },
    {
      "location": "release-notes/version-2.9/#dedicated-model-for-vm-interfaces-4721",
      "title": "Dedicated Model for VM Interfaces (#4721)",
      "text": "<p>A new model has been introduced to represent virtual machine interfaces. Although this change is largely transparent to the end user, note that the IP address model no longer has a foreign key to the Interface model under the DCIM app. This has been replaced with a generic foreign key named <code>assigned_object</code>.</p>"
    },
    {
      "location": "release-notes/version-2.9/#rest-api-endpoints-for-users-and-groups-4877",
      "title": "REST API Endpoints for Users and Groups (#4877)",
      "text": "<p>Two new REST API endpoints have been added to facilitate the retrieval and manipulation of users and groups:</p> <ul> <li><code>/api/users/groups/</code></li> <li><code>/api/users/users/</code></li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#4615 - Add <code>label</code> field for all device components and component templates</li> <li>#4639 - Improve performance of web UI prefixes list</li> <li>#4742 - Add tagging for cables, power panels, and rack reservations</li> <li>#4788 - Add dedicated views for all device components</li> <li>#4792 - Add bulk rename capability for console and power ports</li> <li>#4793 - Add <code>description</code> field to device component templates</li> <li>#4795 - Add bulk disconnect capability for console and power ports</li> <li>#4806 - Add a <code>url</code> field to all API serializers</li> <li>#4807 - Add bulk edit ability for device bay templates</li> <li>#4817 - Standardize device/VM component <code>name</code> field to 64 characters</li> <li>#4837 - Use dynamic form widget for relationships to MPTT objects (e.g. regions)</li> <li>#4840 - Enable change logging for config contexts</li> <li>#4885 - Add MultiChoiceVar for custom scripts</li> <li>#4940 - Add an <code>occupied</code> field to rack unit representations for rack elevation views</li> <li>#4945 - Add a user-friendly 403 error page</li> <li>#4969 - Replace secret role user/group assignment with object permissions</li> <li>#4982 - Extended ObjectVar to allow filtering API query</li> <li>#4994 - Add <code>cable</code> attribute to PowerFeed API serializer</li> <li>#4997 - The browsable API now lists available endpoints alphabetically</li> <li>#5024 - List available options for choice fields within CSV import forms</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#configuration-changes",
      "title": "Configuration Changes",
      "text": "<ul> <li>If using NetBox's built-in remote authentication backend, update <code>REMOTE_AUTH_BACKEND</code> to <code>'netbox.authentication.RemoteUserBackend'</code>, as the authentication class has moved.</li> <li>If using LDAP authentication, set <code>REMOTE_AUTH_BACKEND</code> to <code>'netbox.authentication.LDAPBackend'</code>. (LDAP configuration parameters in <code>ldap_config.py</code> remain unchanged.)</li> <li><code>REMOTE_AUTH_DEFAULT_PERMISSIONS</code> now takes a dictionary rather than a list. This is a mapping of permission names to a dictionary of constraining attributes, or <code>None</code>. For example, <code>['dcim.add_site', 'dcim.change_site']</code> would become <code>{'dcim.add_site': None, 'dcim.change_site': None}</code>.</li> <li>Backward compatibility for the old <code>webhooks</code> Redis queue name has been dropped. Ensure that your <code>REDIS</code> configuration parameter specifies both the <code>tasks</code> and <code>caching</code> databases.</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Added new endpoints for users, groups, and permissions under <code>/api/users/</code>.</li> <li>A <code>url</code> field is now included on all object representations, identifying the unique REST API URL for each object.</li> <li>The <code>tags</code> field of an object now includes a more complete representation of each tag, rather than just its name.</li> <li>The assignment of tags to an object is now achieved in the same manner as specifying any other related device. The <code>tags</code> field accepts a list of JSON objects each matching a desired tag. (Alternatively, a list of numeric primary keys corresponding to tags may be passed instead.) For example:</li> </ul> <pre><code>\"tags\": [\n  {\"name\": \"First Tag\"},\n  {\"name\": \"Second Tag\"}\n]\n</code></pre> <ul> <li>Legacy numeric values for choice fields are no longer conveyed or accepted.</li> <li>circuits.CircuitTermination: Added <code>cable</code> field</li> <li>dcim.Cable: Added <code>tags</code> field</li> <li>dcim.ConsolePort: Added <code>label</code> field</li> <li>dcim.ConsolePortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.ConsoleServerPort: Added <code>label</code> field</li> <li>dcim.ConsoleServerPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.DeviceBay: Added <code>label</code> field</li> <li>dcim.DeviceBayTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.FrontPort: Added <code>label</code> field</li> <li>dcim.FrontPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.Interface: Added <code>label</code> field</li> <li>dcim.InterfaceTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.PowerFeed: Added <code>cable</code> field</li> <li>dcim.PowerPanel: Added <code>tags</code> field</li> <li>dcim.PowerPort: Added <code>`label</code> field</li> <li>dcim.PowerPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.PowerOutlet: Added <code>label</code> field</li> <li>dcim.PowerOutletTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.Rack: Added an <code>occupied</code> field to rack unit representations for rack elevation views</li> <li>dcim.RackGroup: Added a <code>_depth</code> attribute indicating an object's position in the tree.</li> <li>dcim.RackReservation: Added <code>tags</code> field</li> <li>dcim.RearPort: Added <code>label</code> field</li> <li>dcim.RearPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.Region: Added a <code>_depth</code> attribute indicating an object's position in the tree.</li> <li>dcim.VirtualChassis: Added <code>name</code> field (required)</li> <li>extras.ConfigContext: Added <code>created</code> and <code>last_updated</code> fields</li> <li>extras.JobResult: Added the <code>/api/extras/job-results/</code> endpoint</li> <li>extras.Report: The <code>failed</code> field has been removed. The <code>completed</code> (boolean) and <code>status</code> (string) fields have been introduced to convey the status of a report's most recent execution. Additionally, the <code>result</code> field now conveys the nested representation of a JobResult.</li> <li>extras.Script: Added <code>module</code> and <code>result</code> fields. The <code>result</code> field now conveys the nested representation of a JobResult.</li> <li>extras.Tag: The count of <code>tagged_items</code> is no longer included when viewing the tags list when <code>brief</code> is passed.</li> <li>ipam.IPAddress: Removed <code>interface</code> field; replaced with <code>assigned_object</code> generic foreign key. This may represent either a device interface or a virtual machine interface. Assign an object by setting <code>assigned_object_type</code> and <code>assigned_object_id</code>.</li> <li>ipam.VRF: Added <code>display_name</code></li> <li>tenancy.TenantGroup: Added a <code>_depth</code> attribute indicating an object's position in the tree.</li> <li>users.ObjectPermissions: Added the <code>/api/users/permissions/</code> endpoint</li> <li>virtualization.VMInterface: Removed <code>type</code> field (VM interfaces have no type)</li> </ul>"
    },
    {
      "location": "release-notes/version-2.9/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>A new model, <code>VMInterface</code> has been introduced to represent interfaces assigned to VirtualMachine instances. Previously, these interfaces utilized the DCIM model <code>Interface</code>. Instances will be replicated automatically upon upgrade, however any custom code which references or manipulates virtual machine interfaces will need to be updated accordingly.</li> <li>The <code>secrets.activate_userkey</code> permission no longer exists. Instead, <code>secrets.change_userkey</code> is checked to determine whether a user has the ability to activate a UserKey.</li> <li>The <code>users.delete_token</code> permission is no longer enforced. All users are permitted to delete their own API tokens.</li> <li>Dropped backward compatibility for the <code>webhooks</code> Redis queue configuration (use <code>tasks</code> instead).</li> <li>Dropped backward compatibility for the <code>/admin/webhook-backend-status</code> URL (moved to <code>/admin/background-tasks/</code>).</li> <li>Virtual chassis are now created by navigating to <code>/dcim/virtual-chassis/add/</code> rather than via the devices list.</li> <li>A name is required when creating a virtual chassis.</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/",
      "title": "NetBox v3.0",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#v3012-2021-12-06",
      "title": "v3.0.12 (2021-12-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#7751 - Get API user from LDAP only when <code>FIND_GROUP_PERMS</code> is enabled</li> <li>#7885 - Linkify VLAN name in VLANs table</li> <li>#7892 - Add L22-30 power port &amp; outlet types</li> <li>#7932 - Improve performance of the \"quick find\" function</li> <li>#7941 - Add multi-standard ITA power outlet type</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7823 - Fix issue where <code>return_url</code> is not honored when 'Save &amp; Continue' button is present</li> <li>#7981 - Fix Markdown sanitization regex</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v3011-2021-11-24",
      "title": "v3.0.11 (2021-11-24)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#2101 - Add missing <code>q</code> filters for necessary models</li> <li>#7424 - Add virtual chassis filters for device components</li> <li>#7531 - Add Markdown support for strikethrough formatting</li> <li>#7542 - Add optional VLAN group column to prefixes table</li> <li>#7803 - Improve live reloading of custom scripts</li> <li>#7810 - Add IEEE 802.15.1 interface type</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7399 - Fix excessive CPU utilization when <code>AUTH_LDAP_FIND_GROUP_PERMS</code> is enabled</li> <li>#7657 - Make change logging middleware thread-safe</li> <li>#7720 - Fix initialization of custom script MultiObjectVar field with multiple values</li> <li>#7729 - Fix permissions evaluation when displaying VLAN group VLANs table</li> <li>#7739 - Fix exception when tracing cable across circuit with no far end termination</li> <li>#7813 - Fix handling of errors during export template rendering</li> <li>#7851 - Add missing cluster name filter for virtual machines</li> <li>#7857 - Fix ordering IP addresses by assignment status</li> <li>#7859 - Fix styling of form widgets under cable connection views</li> <li>#7864 - <code>power_port</code> can be null when creating power outlets via REST API</li> <li>#7865 - REST API should support null values for console port speeds</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v3010-2021-11-12",
      "title": "v3.0.10 (2021-11-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#7740 - Add mini-DIN 8 console port type</li> <li>#7760 - Add <code>vid</code> filter field to VLANs list</li> <li>#7767 - Add visual aids to interfaces table for type, enabled status</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7564 - Fix assignment of members to virtual chassis with initial position of zero</li> <li>#7701 - Fix conflation of assigned IP status &amp; role in interface tables</li> <li>#7741 - Fix 404 when attaching multiple images in succession</li> <li>#7752 - Fix minimum version check under Python v3.10</li> <li>#7766 - Add missing outer dimension columns to rack table</li> <li>#7780 - Preserve multi-line values during CSV file import</li> <li>#7783 - Fix indentation of locations under site view</li> <li>#7788 - Improve XSS mitigation in Markdown renderer</li> <li>#7791 - Enable sorting device bays table by installed device status</li> <li>#7802 - Differentiate ID and VID columns in VLANs table</li> <li>#7808 - Fix reference values for content type under custom field import form</li> <li>#7809 - Add missing export template support for various models</li> <li>#7814 - Fix restriction of user &amp; group objects in GraphQL API queries</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v309-2021-11-03",
      "title": "v3.0.9 (2021-11-03)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#6529 - Introduce the <code>runscript</code> management command</li> <li>#6930 - Add an optional \"ID\" column to all tables</li> <li>#7668 - Add \"view elevations\" button to location view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7599 - Improve color mode preference handling</li> <li>#7601 - Correct devices count for locations within global search results</li> <li>#7612 - Strip HTML from custom field descriptions</li> <li>#7628 - Fix <code>load_yaml</code> method for custom scripts</li> <li>#7643 - Fix circuit assignment when creating multiple terminations simultaneously</li> <li>#7644 - Prevent inadvertent deletion of prior change records when deleting objects (#7333 revisited)</li> <li>#7647 - Require interface assignment when designating IP address as primary for device/VM during CSV import</li> <li>#7664 - Preserve initial form data when bulk edit validation fails</li> <li>#7717 - Restore missing tags column on IP range table</li> <li>#7721 - Retain pagination preference when <code>MAX_PAGE_SIZE</code> is zero</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v308-2021-10-20",
      "title": "v3.0.8 (2021-10-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#7551 - Add UI field to filter interfaces by kind</li> <li>#7561 - Add a utilization column to the IP ranges table</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7300 - Fix incorrect Device LLDP interface row coloring</li> <li>#7495 - Fix navigation UI issue that caused improper element overlap</li> <li>#7529 - Restore horizontal scrolling for tables in narrow viewports</li> <li>#7534 - Avoid exception when utilizing \"create and add another\" twice in succession</li> <li>#7544 - Fix multi-value filtering of custom field objects</li> <li>#7545 - Fix incorrect display of update/delete events for webhooks</li> <li>#7550 - Fix rendering of UTF8-encoded data in change records</li> <li>#7556 - Fix display of version when new release is available</li> <li>#7584 - Fix alignment of object identifier under object view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v307-2021-10-08",
      "title": "v3.0.7 (2021-10-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#6879 - Improve ability to toggle images/labels in rack elevations </li> <li>#7485 - Add USB micro AB type</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7051 - Fix permissions evaluation and improve error handling for connected device REST API endpoint</li> <li>#7471 - Correct redirect URL when attaching images via \"add another\" button</li> <li>#7474 - Fix AttributeError exception when rendering a report or custom script</li> <li>#7479 - Fix parent interface choices when bulk editing VM interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v306-2021-10-06",
      "title": "v3.0.6 (2021-10-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#6850 - Default to current user when creating journal entries via REST API</li> <li>#6955 - Include type, ID, and slug on object view</li> <li>#7394 - Enable filtering cables by termination type &amp; ID in REST API</li> <li>#7462 - Include count of assigned virtual machines under platform view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7442 - Fix missing actions column on user-configured tables</li> <li>#7446 - Fix exception when viewing a large number of child IPs within a prefix</li> <li>#7455 - Fix site/provider network validation for circuit termination API serializer</li> <li>#7459 - Pre-populate location data when adding a device to a rack</li> <li>#7460 - Fix filtering connections by site ID</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v305-2021-10-04",
      "title": "v3.0.5 (2021-10-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#5925 - Always show IP addresses tab under prefix view</li> <li>#6423 - Cache rendered REST API specifications</li> <li>#6708 - Add image attachment support for circuits, power panels</li> <li>#7387 - Enable arbitrary ordering of custom scripts</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6433 - Fix bulk editing of child prefixes under aggregate view</li> <li>#6817 - Custom field columns should be removed from tables upon their deletion</li> <li>#6895 - Remove errant markup for null values in CSV export</li> <li>#7215 - Prevent rack elevations from overlapping when higher width is specified</li> <li>#7373 - Fix flashing when server, client, and browser color-mode preferences are mismatched</li> <li>#7397 - Fix AttributeError exception when rendering export template for devices via REST API</li> <li>#7401 - Pin <code>jsonschema</code> package to v3.2.0 to fix REST API docs rendering</li> <li>#7411 - Fix exception in UI when adding member devices to virtual chassis</li> <li>#7412 - Fix exception in UI when adding child device to device bay</li> <li>#7417 - Prevent exception when filtering objects list by invalid tag</li> <li>#7425 - Housekeeping command should honor zero verbosity</li> <li>#7427 - Don't select hidden rows when selecting all in a table</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v304-2021-09-29",
      "title": "v3.0.4 (2021-09-29)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#6917 - Make IP assigned checkmark in IP table link to interface</li> <li>#6973 - Enable custom ordering of reports</li> <li>#7022 - Add ITA type C (CEE 7/16) power port type</li> <li>#7118 - Render URL custom fields as hyperlinks in object tables</li> <li>#7314 - Add SMA 905/906 fiber port types</li> <li>#7323 - Add serial filter field for racks &amp; devices</li> <li>#7372 - Link to local docs for model from object add/edit views</li> <li>#7389 - Linkify tenant group in tenants list</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7252 - Validate IP range size does not exceed max supported value</li> <li>#7294 - Fix SVG rendering for cable traces ending at unoccupied front ports</li> <li>#7304 - Require explicit values for all required choice fields during CSV import</li> <li>#7321 - Don't overwrite multi-select custom fields during bulk edit</li> <li>#7324 - Fix TypeError exception in web UI when filtering objects using single-choice filters</li> <li>#7333 - Prevent inadvertent deletion of prior change records when deleting objects</li> <li>#7341 - Fix incorrect URL in circuit breadcrumbs</li> <li>#7353 - Fix bulk creation of device/VM components via list view</li> <li>#7356 - Fix display of model documentation when adding device components</li> <li>#7358 - Add missing <code>choices</code> column to custom field CSV import form</li> <li>#7360 - Correct redirection URL after removing child device from device bay</li> <li>#7365 - Optimize performance when calculating prefix utilization</li> <li>#7374 - Add missing <code>face</code> parameter to API elevations request when editing device</li> <li>#7392 - Fix \"help\" links for custom fields, other models</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v303-2021-09-20",
      "title": "v3.0.3 (2021-09-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#5775 - Enable synchronization of groups for remote authentication backend</li> <li>#6387 - Add xDSL interface type</li> <li>#6988 - Order tenants alphabetically without regard to group assignment</li> <li>#7032 - Add URM port types</li> <li>#7087 - Add <code>local_context_data</code> filter for virtual machines list</li> <li>#7208 - Add navigation breadcrumbs for custom scripts &amp; reports</li> <li>#7210 - Add search/filter forms for all organizational models</li> <li>#7239 - Redirect global search to filtered object list when an object type is selected</li> <li>#7284 - Include comments field in table/export for all appropriate models</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7167 - Ensure consistent font size when using monospace formatting</li> <li>#7226 - Exempt GraphQL API requests from CSRF inspection</li> <li>#7228 - Improve temperature conversions under device status</li> <li>#7248 - Fix global search results section links</li> <li>#7266 - Tweak font color for form field placeholder text</li> <li>#7273 - Fix natural ordering of device components in UI form fields</li> <li>#7279 - Fix exception when tracing cable with no associated path</li> <li>#7282 - Fix KeyError exception when <code>INSECURE_SKIP_TLS_VERIFY</code> is true</li> <li>#7298 - Restore missing object names from applied object list filters</li> <li>#7301 - Fix exception when deleting a large number of child prefixes</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v302-2021-09-08",
      "title": "v3.0.2 (2021-09-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7131 - Fix issue where Site fields were hidden when editing a VLAN group</li> <li>#7148 - Fix issue where static query parameters with multiple values were not queried properly</li> <li>#7153 - Allow clearing of assigned device type images</li> <li>#7162 - Ensure consistent treatment of <code>BASE_PATH</code> for UI-driven API requests</li> <li>#7164 - Fix styling of \"decommissioned\" label for circuits</li> <li>#7169 - Fix CSV import file upload</li> <li>#7176 - Fix issue where query parameters were duplicated across different forms of the same type</li> <li>#7179 - Prevent obscuring \"connect\" pop-up for interfaces under device view</li> <li>#7188 - Fix issue where select fields with <code>null_option</code> did not render or send the null option</li> <li>#7189 - Set connection factory for django-redis when Sentinel is in use</li> <li>#7191 - Fix issue where API-backed multi-select elements cleared selected options when adding new options</li> <li>#7193 - Fix prefix (flat) template issue when viewing child prefixes with prefixes available</li> <li>#7205 - Fix issue where selected fields with <code>null_option</code> set were not added to applied filters</li> <li>#7209 - Allow unlimited API results when <code>MAX_PAGE_SIZE</code> is disabled</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v301-2021-09-01",
      "title": "v3.0.1 (2021-09-01)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes_11",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7041 - Properly format JSON config object returned from a NAPALM device</li> <li>#7070 - Fix exception when filtering by prefix max length in UI</li> <li>#7071 - Fix exception when removing a primary IP from a device/VM</li> <li>#7072 - Fix table configuration under prefix child object views</li> <li>#7075 - Fix UI bug when a custom field has a space in the name</li> <li>#7080 - Fix missing image previews</li> <li>#7081 - Fix UI bug that did not properly request and handle paginated data</li> <li>#7082 - Avoid exception when referencing invalid content type in table</li> <li>#7083 - Correct labeling for VM memory attribute</li> <li>#7084 - Fix KeyError exception when editing access VLAN on an interface</li> <li>#7084 - Fix issue where hidden VLAN form fields were incorrectly included in the form submission</li> <li>#7089 - Fix filtering of change log by content type</li> <li>#7090 - Allow decimal input on length field when bulk editing cables</li> <li>#7091 - Ensure API requests from the UI are aware of <code>BASE_PATH</code></li> <li>#7092 - Fix missing bulk edit buttons on Prefix IP Addresses table</li> <li>#7093 - Multi-select custom field filters should employ exact match</li> <li>#7096 - Home links should honor <code>BASE_PATH</code> configuration</li> <li>#7101 - Enforce <code>MAX_PAGE_SIZE</code> for table and REST API pagination</li> <li>#7106 - Fix incorrect \"Map It\" button URL on a site's physical address field</li> <li>#7107 - Fix missing search button and search results in IP address assignment \"Assign IP\" tab</li> <li>#7109 - Ensure human readability of exceptions raised during REST API requests</li> <li>#7113 - Show bulk edit/delete actions for prefix child objects</li> <li>#7123 - Remove \"Global\" placeholder for null VRF field</li> <li>#7124 - Fix duplicate static query param values in API Select</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#v300-2021-08-30",
      "title": "v3.0.0 (2021-08-30)",
      "text": "<p>Existing Deployments Must Upgrade from v2.11</p> <p>Upgrading an existing NetBox deployment to version 3.0 must be done from version 2.11.0 or later. If attempting to upgrade a deployment of NetBox v2.10 or earlier, first upgrade to a NetBox v2.11 release, and then upgrade from v2.11 to v3.0. This will avoid any problems with the database migration optimizations implemented in version 3.0. (This is not necessary for new installations.)</p>"
    },
    {
      "location": "release-notes/version-3.0/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Python 3.6 is no longer supported. NetBox v3.0 supports Python 3.7, 3.8, and 3.9.</li> <li>The secrets functionality present in prior releases of NetBox has been removed. The NetBox maintainers strongly recommend the adoption of Hashicorp Vault in place of this feature. Development of a NetBox plugin to replace the legacy secrets functionality is also underway.</li> <li>The default CSV export format for all objects now includes all available data from the object list. Additionally, the CSV headers now use human-friendly titles rather than raw field names. If backward compatibility with the old format is desired, export templates can be written to reproduce it.</li> <li>The <code>invalidate</code> management command (which clears cached database queries) is no longer needed and has been removed (see #6639).</li> <li>Support for queryset caching configuration (<code>caching_config</code>) has been removed from the plugins API (see #6639).</li> <li>The <code>cacheops_*</code> metrics have been removed from the Prometheus exporter (see #6639).</li> <li>The <code>display_field</code> keyword argument has been removed from custom script ObjectVar and MultiObjectVar fields. These widgets will use the <code>display</code> value provided by the REST API.</li> <li>The deprecated <code>display_name</code> field has been removed from all REST API serializers. (API clients should reference the <code>display</code> field instead.)</li> <li>The redundant REST API endpoints for console, power, and interface connections have been removed. The same data can be retrieved by querying the respective model endpoints with the <code>?connected=True</code> filter applied.</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.0/#updated-user-interface-5893",
      "title": "Updated User Interface (#5893)",
      "text": "<p>The NetBox user interface has been completely overhauled with a fresh new look! Beyond the cosmetic improvements, this initiative has allowed us to modernize the entire front end, upgrading from Bootstrap 3 to Bootstrap 5, and eliminating dependencies on outdated libraries such as jQuery and jQuery-UI. The new user interface also features a dark mode option.</p> <p></p> <p>A huge thank you to NetBox maintainer Matt Love for his tremendous work on this!</p>"
    },
    {
      "location": "release-notes/version-3.0/#graphql-api-2007",
      "title": "GraphQL API (#2007)",
      "text": "<p>A new GraphQL API has been added to complement NetBox's REST API. GraphQL allows the client to specify which fields of the available data to return in each request. NetBox's implementation, which employs Graphene, also includes a user-friendly query interface known as GraphiQL.</p> <p>Here's an example GraphQL request:</p> <pre><code>{\n  circuit_list {\n    cid\n    provider {\n      name\n    }\n    termination_a {\n      id\n    }\n    termination_z {\n      id\n    }\n  }\n}\n</code></pre> <p>And the response:</p> <pre><code>{\n  \"data\": {\n    \"circuit_list\": [\n      {\n        \"cid\": \"1002840283\",\n        \"provider\": {\n          \"name\": \"CenturyLink\"\n        },\n        \"termination_a\": null,\n        \"termination_z\": {\n          \"id\": \"23\"\n        }\n      },\n...\n</code></pre> <p>All GraphQL requests are made at the <code>/graphql</code> URL (which also serves the GraphiQL UI). The API is currently read-only, however users who wish to disable it until needed can do so by setting the <code>GRAPHQL_ENABLED</code> configuration parameter to False. For more detail on NetBox's GraphQL implementation, see the GraphQL API documentation.</p>"
    },
    {
      "location": "release-notes/version-3.0/#ip-ranges-834",
      "title": "IP Ranges (#834)",
      "text": "<p>NetBox now supports modeling arbitrary IP ranges, which are defined by specifying a starting and ending IP address (e.g. to denote DHCP pools). Similar to prefixes, each IP range may optionally be assigned to a VRF and/or tenant, and can be assigned a functional role. An IP range must be assigned a status of active, reserved, or deprecated. The REST API implementation for this model also includes an \"available IPs\" endpoint which functions similarly to the endpoint for prefixes.</p> <p>More information about IP ranges is available in the documentation.</p>"
    },
    {
      "location": "release-notes/version-3.0/#custom-model-validation-5963",
      "title": "Custom Model Validation (#5963)",
      "text": "<p>This release introduces the <code>CUSTOM_VALIDATORS</code> configuration parameter, which allows administrators to map NetBox models to custom validator classes to enforce custom validation logic. For example, the following configuration requires every site to have a name of at least ten characters and a description:</p> <pre><code>from extras.validators import CustomValidator\n\nCUSTOM_VALIDATORS = {\n    'dcim.site': (\n        CustomValidator({\n            'name': {\n                'min_length': 10,\n            },\n            'description': {\n                'required': True,\n            }\n        }),\n    )\n}\n</code></pre> <p>CustomValidator can also be subclassed to enforce more complex logic by overriding its <code>validate()</code> method. See the custom validation documentation for more details.</p>"
    },
    {
      "location": "release-notes/version-3.0/#svg-cable-traces-6000",
      "title": "SVG Cable Traces (#6000)",
      "text": "<p>Cable trace diagrams are now rendered as atomic SVG images, similar to rack elevations. These images are embedded in the UI and can be easily downloaded for use outside NetBox. SVG images can also be generated directly through the REST API, by specifying SVG as the render format for the <code>trace</code> endpoint on a cable termination:</p> <pre><code>GET /api/dcim/interfaces/&lt;ID&gt;&gt;/trace/?render=svg\n</code></pre> <p>The width of the rendered image in pixels may optionally be specified by appending the <code>&amp;width=&lt;width&gt;</code> parameter to the request. The default width is 400px.</p>"
    },
    {
      "location": "release-notes/version-3.0/#new-views-for-models-previously-under-the-admin-ui-6466",
      "title": "New Views for Models Previously Under the Admin UI (#6466)",
      "text": "<p>New UI views have been introduced to manage the following models:</p> <ul> <li>Custom fields</li> <li>Custom links</li> <li>Export templates</li> <li>Webhooks</li> </ul> <p>These models were previously managed under the admin section of the UI. Moving them to dedicated views ensures a more consistent and convenient user experience.</p>"
    },
    {
      "location": "release-notes/version-3.0/#rest-api-token-provisioning-5264",
      "title": "REST API Token Provisioning (#5264)",
      "text": "<p>The new REST API endpoint <code>/api/users/tokens/</code> has been added, which includes a child endpoint for provisioning new REST API tokens using a username and password. This allows a user to gain REST API access without needing to first create a token via the web UI.</p> <pre><code>$ curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/users/tokens/provision/ \\\n--data '{\n    \"username\": \"hankhill\",\n    \"password: \"I&lt;3C3H8\",\n}'\n</code></pre> <p>If the supplied credentials are valid, NetBox will create and return a new token for the user.</p>"
    },
    {
      "location": "release-notes/version-3.0/#new-housekeeping-command-6590",
      "title": "New Housekeeping Command (#6590)",
      "text": "<p>A new management command has been added: <code>manage.py housekeeping</code>. This command is intended to be run nightly via a system cron job. It performs the following tasks:</p> <ul> <li>Clear expired authentication sessions from the database</li> <li>Delete change log records which have surpassed the configured retention period (if configured)</li> <li>Check for new NetBox releases (if enabled)</li> </ul> <p>A convenience script for calling this command via an automated scheduler has been included at <code>/contrib/netbox-housekeeping.sh</code>. Please see the housekeeping documentation for further details.</p>"
    },
    {
      "location": "release-notes/version-3.0/#custom-queue-support-for-plugins-6651",
      "title": "Custom Queue Support for Plugins (#6651)",
      "text": "<p>NetBox uses Redis and Django-RQ for background task queuing. Whereas previous releases employed only a single default queue, NetBox now provides a high-, medium- (default), and low-priority queue for use by plugins. (These will also likely be used internally as new functionality is added in future releases.)</p> <p>Plugins can also now create their own custom queues by defining a <code>queues</code> list within their PluginConfig class:</p> <pre><code>class MyPluginConfig(PluginConfig):\n    name = 'myplugin'\n    ...\n    queues = [\n        'queue1',\n        'queue2',\n        'queue-whatever-the-name'\n    ]\n</code></pre> <p>Note that NetBox's <code>rqworker</code> process will not service custom queues by default, since it has no way to infer the priority of each queue. Plugin authors should be diligent in including instructions for proper worker configuration in their plugin's documentation.</p>"
    },
    {
      "location": "release-notes/version-3.0/#enhancements_10",
      "title": "Enhancements",
      "text": "<ul> <li>#2434 - Add option to assign IP address upon creating a new interface</li> <li>#3665 - Enable rendering export templates via REST API</li> <li>#3682 - Add <code>color</code> field to front and rear ports</li> <li>#4609 - Allow marking prefixes as fully utilized</li> <li>#5203 - Remember user preference when toggling display of device images in rack elevations</li> <li>#5806 - Add kilometer and mile as choices for cable length unit</li> <li>#6154 - Allow decimal values for cable lengths</li> <li>#6328 - Build and serve documentation locally</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#bug-fixes-from-v30-beta2",
      "title": "Bug Fixes (from v3.0-beta2)",
      "text": "<ul> <li>#6977 - Truncate global search dropdown on small screens</li> <li>#6979 - Hide \"create &amp; add another\" button for circuit terminations</li> <li>#6982 - Fix styling of empty dropdown list under dark mode</li> <li>#6996 - Global search bar should be full width on mobile</li> <li>#7001 - Fix page focus on load</li> <li>#7034 - Fix toggling of VLAN group scope selector fields</li> <li>#7045 - Fix navigation menu rendering under Chrome</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#5223 - Remove the console/power/interface connections REST API endpoints</li> <li>#5278 - Remove the secrets functionality from NetBox core</li> <li>#5532 - Drop support for Python 3.6</li> <li>#5994 - Drop support for <code>display_field</code> argument on ObjectVar</li> <li>#6068 - Drop support for legacy static CSV export</li> <li>#6338 - Decimal fields are no longer coerced to strings in REST API</li> <li>#6471 - Optimize database migrations</li> <li>#6639 - Drop support for queryset caching (django-cacheops)</li> <li>#6713 - Checking for new releases is now done as part of the housekeeping routine</li> <li>#6767 - Add support for Python 3.9</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#configuration-changes",
      "title": "Configuration Changes",
      "text": "<ul> <li>The <code>CACHE_TIMEOUT</code> configuration parameter has been removed.</li> <li>The <code>RELEASE_CHECK_TIMEOUT</code> configuration parameter has been removed.</li> </ul>"
    },
    {
      "location": "release-notes/version-3.0/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Removed all endpoints related to the secrets functionality:<ul> <li><code>/api/secrets/generate-rsa-key-pair/</code></li> <li><code>/api/secrets/get-session-key/</code></li> <li><code>/api/secrets/secrets/</code></li> <li><code>/api/secrets/secret-roles/</code></li> </ul> </li> <li>Removed the following \"connections\" endpoints:<ul> <li><code>/api/dcim/console-connections/</code></li> <li><code>/api/dcim/power-connections/</code></li> <li><code>/api/dcim/interface-connections/</code></li> </ul> </li> <li>Added the <code>/api/ipam/ip-ranges/</code> endpoint</li> <li>Added the <code>/api/users/tokens/</code> endpoint<ul> <li>The <code>provision/</code> child endpoint can be used to provision new REST API tokens by supplying a valid username and password</li> </ul> </li> <li>dcim.Cable<ul> <li><code>length</code> is now a decimal value</li> </ul> </li> <li>dcim.Device<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>dcim.FrontPort<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.FrontPortTemplate<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.Rack<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>dcim.RearPort<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.RearPortTemplate<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.Site<ul> <li><code>latitude</code> and <code>longitude</code> are now decimal fields rather than strings</li> </ul> </li> <li>extras.ContentType<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>ipam.Prefix<ul> <li>Added the <code>mark_utilized</code> boolean field</li> </ul> </li> <li>ipam.VLAN<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>ipam.VRF<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li><code>vcpus</code> is now a decimal field rather than a string</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/",
      "title": "NetBox v3.1",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#v3111-2022-04-05",
      "title": "v3.1.11 (2022-04-05)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#8163 - Show bridge interface members under interface view</li> <li>#8365 - Enable filtering child devices by parent device ID</li> <li>#8785 - Permit wildcard values in IP address DNS names</li> <li>#8790 - Include site and prefixes columns in VLAN group VLANs table</li> <li>#8830 - Add Checkpoint ClusterXL protocol for FHRP groups</li> <li>#8974 - Use monospace font for text areas in config revision form</li> <li>#9012 - Linkify circuits count in providers list</li> <li>#9036 - Add bulk edit capability for site contact fields</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8866 - Prevent exception when searching for a rack position with no rack specified under device edit view</li> <li>#9009 - Fix device count for racks in global search results</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v3110-2022-03-25",
      "title": "v3.1.10 (2022-03-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#8232 - Use a different color for 100% utilization bars</li> <li>#8457 - Enable adding non-racked devices from site &amp; location views</li> <li>#8553 - Add missing object types to global search form</li> <li>#8575 - Add rack columns to cables list</li> <li>#8645 - Enable filtering objects by assigned contacts &amp; contact roles</li> <li>#8926 - Add device type, role columns to device bay table</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8696 - Fix help link under FHRP group assigment creation view</li> <li>#8813 - Retain global search bar query after submitting</li> <li>#8820 - Fix navbar background color in dark mode</li> <li>#8850 - Show airflow field on device REST API serializer when config context data is included</li> <li>#8905 - Disable ordering by assigned tags to prevent erroneous results</li> <li>#8919 - Fix filtering of VLAN groups by site under prefix edit form</li> <li>#8924 - Improve load time of custom script list</li> <li>#8932 - Fix error when setting null value for interface <code>rf_role</code> via REST API</li> <li>#8935 - Correct ordering of next/previous racks to use naturalized names</li> <li>#8947 - Retain filter parameters when handling an export template exception</li> <li>#8951 - Allow changing device type &amp; platform to different manufacturer simultaneously</li> <li>#8952 - Device images in rear rack elevations should be hyperlinked</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v319-2022-03-07",
      "title": "v3.1.9 (2022-03-07)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#8594 - Enable filtering by exact description match for all applicable models</li> <li>#8629 - Add description to tag table search function</li> <li>#8664 - Show assigned ASNs/sites under list views</li> <li>#8736 - Add PC and UPC fiber end faces for LC/SC/LSH port types</li> <li>#8758 - Allow empty string substitution when renaming objects in bulk</li> <li>#8762 - Link to rack elevations list from site view</li> <li>#8766 - Add SCTP to service protocols list</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8546 - Fix bulk import to restrict bridge, parent, and LAG to device interfaces</li> <li>#8633 - Prevent navigation sidebar pin from disappearing at certain breakpoints</li> <li>#8674 - Fix rendering of tabbed content in documentation</li> <li>#8710 - Fix dynamic scope selection form fields when creating a VLAN group</li> <li>#8713 - Restore missing \"add\" button on services list view</li> <li>#8715 - Avoid returning multiple objects when restricting querysets using multiple tags in permissions</li> <li>#8717 - Fix redirection after bulk edit/delete of prefixes from aggregate view</li> <li>#8724 - Fix exception during device import with invalid device type</li> <li>#8807 - Correct REST API URL for FHRP group assignments</li> <li>#8808 - Fix members count under FHRP group list</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v318-2022-02-15",
      "title": "v3.1.8 (2022-02-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#7150 - Linkify devices on the far side of a rack elevation</li> <li>#8398 - Embiggen configuration form fields for banner message content</li> <li>#8556 - Add full username column to changelog table</li> <li>#8620 - Enable tab completion for <code>nbshell</code></li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8331 - Implement <code>replaceAll</code> string utility function to improve browser compatibility</li> <li>#8391 - Null date columns should return empty strings during CSV export</li> <li>#8548 - Fix display of VC members when position is zero</li> <li>#8561 - Include option to connect a rear port to a console port</li> <li>#8564 - Fix errant table configuration key <code>available_columns</code></li> <li>#8577 - Show contact assignment counts in global search results</li> <li>#8578 - Object change log tables should honor user's configured preferences</li> <li>#8604 - Fix tag filter on config context list filter form</li> <li>#8609 - Display validation error when attempting to assign VLANs to interface with no mode during bulk edit</li> <li>#8611 - Fix bulk editing for certain custom link, webhook, and journal entry fields</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v317-2022-02-03",
      "title": "v3.1.7 (2022-02-03)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#7504 - Include IP range data under IPAM role views</li> <li>#8275 - Introduce alternative ASDOT-formatted column for ASNs</li> <li>#8367 - Add ASNs to global search function</li> <li>#8368 - Enable controlling the order of custom script form fields with <code>field_order</code></li> <li>#8381 - Add contacts to global search function</li> <li>#8462 - Linkify manufacturer column in device type table</li> <li>#8476 - Bring the ASN Web UI up to the standard set by other objects</li> <li>#8494 - Include locations count under tenant view</li> <li>#8517 - Render boolean custom fields as icons in object tables</li> <li>#8530 - Indicate CSV or YAML as format for \"all data\" export</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8315 - Fix display of NAT link for primary IPv4 address under device view</li> <li>#8377 - Fix calculation of absolute cable lengths when specified in fractional units</li> <li>#8425 - Fix exception when viewing change list/records with removed plugins</li> <li>#8456 - Fix redundant display of VRF RD in prefix view</li> <li>#8465 - Accept empty string values for Interface <code>rf_channel</code> in REST API</li> <li>#8498 - Fix display of selected content type filters in object list views</li> <li>#8499 - Content types REST API endpoint should not require model permission</li> <li>#8512 - Correct file permissions to allow execution of housekeeping script</li> <li>#8527 - Fix display of changelog retention period</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v316-2022-01-17",
      "title": "v3.1.6 (2022-01-17)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#8246 - Show human-friendly values for commit rates in circuits table</li> <li>#8262 - Add cable count to tenant stats</li> <li>#8265 - Add Stackwise-n interface types</li> <li>#8293 - Show 4-byte ASNs in ASDOT notation</li> <li>#8302 - Linkify role column in device &amp; VM tables</li> <li>#8337 - Enable sorting object tables by created &amp; updated times</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8279 - Fix display of virtual chassis members in rack elevations</li> <li>#8285 - Fix <code>cluster_count</code> under tenant REST API serializer</li> <li>#8287 - Correct label in export template form</li> <li>#8301 - Fix delete button for various object children views</li> <li>#8305 - Fix assignment of custom field data to FHRP groups via UI</li> <li>#8306 - Redirect user to previous page after login</li> <li>#8314 - Prevent custom fields with default values from appearing as applied filters erroneously</li> <li>#8317 - Fix CSV import of multi-select custom field values</li> <li>#8319 - Custom URL fields should honor <code>ALLOWED_URL_SCHEMES</code> config parameter</li> <li>#8342 - Restore <code>created</code> &amp; <code>last_updated</code> fields missing from several REST API serializers</li> <li>#8357 - Add missing tags field to location filter form</li> <li>#8358 - Fix inconsistent styling of custom fields on filter &amp; bulk edit forms</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v315-2022-01-06",
      "title": "v3.1.5 (2022-01-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#8231 - Use in-page dialogs for confirming object deletion</li> <li>#8244 - Add length &amp; length unit fields to cable filter form</li> <li>#8252 - Linkify type and group columns in clusters table</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8213 - Fix ValueError exception under prefix IP addresses view</li> <li>#8224 - Fix KeyError exception when creating FHRP group with IP address and protocol \"other\"</li> <li>#8226 - Honor return URL after populating a device bay</li> <li>#8228 - Optional ChoiceVar fields should not force a selection</li> <li>#8255 - Fix bulk editing of authentication parameters for wireless LANs and links</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v314-2022-01-03",
      "title": "v3.1.4 (2022-01-03)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#8192 - Add \"add prefix\" button to aggregate child prefixes view</li> <li>#8194 - Enable bulk user assignment to groups under admin UI</li> <li>#8197 - Allow filtering sites by group when connecting a cable</li> <li>#8210 - Establish <code>netbox/local/</code> as a path for local resources</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8187 - Fix rendering of tags column in object tables</li> <li>#8191 - Fix return URL when adding IP addresses to VM interfaces</li> <li>#8196 - Fix IndexError exception when viewing large IPv6 prefixes in UI</li> <li>#8201 - Custom integer fields should allow negative integers as minimum/maximum values</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v313-2021-12-29",
      "title": "v3.1.3 (2021-12-29)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#6782 - Enable the inclusion of custom links in tables</li> <li>#7600 - Include count of available IPs on prefix view</li> <li>#8034 - Enable specifying custom field validators during CSV import</li> <li>#8100 - Add \"other\" choice for FHRP group protocol</li> <li>#8175 - Display parent object when attaching an image</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7246 - Don't attempt to URL-decode NAPALM response payloads</li> <li>#7290 - Defer loading API-backed form fields</li> <li>#7887 - Forward <code>HTTP_X_FORWARDED_FOR</code> to custom scripts</li> <li>#7962 - Fix user menu under report/script result view</li> <li>#7972 - Standardize name of <code>RemoteUserBackend</code> logger</li> <li>#8097 - Fix styling of Markdown tables</li> <li>#8127 - Fix disassociation of interface under IP address edit view</li> <li>#8131 - Restore annotation of available IPs under prefix IPs view</li> <li>#8134 - Fix bulk editing of objects within dynamic tables</li> <li>#8139 - Fix rendering of table configuration form under VM interfaces view</li> <li>#8140 - Restore missing fields on wireless LAN &amp; link REST API serializers</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v312-2021-12-20",
      "title": "v3.1.2 (2021-12-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#7661 - Remove forced styling of custom banners</li> <li>#7665 - Add toggle to show only available child prefixes</li> <li>#7999 - Add 6 GHz and 60 GHz wireless channels</li> <li>#8057 - Dynamic object tables using HTMX</li> <li>#8080 - Link to NAT IPs for device/VM primary IPs</li> <li>#8081 - Allow creating services directly from navigation menu</li> <li>#8083 - Removed \"related devices\" panel from device view</li> <li>#8108 - Improve breadcrumb links for device/VM components</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7674 - Fix inadvertent application of device type context to virtual machines</li> <li>#8074 - Ordering VMs by name should reference naturalized value</li> <li>#8077 - Fix exception when attaching image to location, circuit, or power panel</li> <li>#8078 - Add missing wireless models to <code>lsmodels()</code> in <code>nbshell</code></li> <li>#8079 - Fix validation of LLDP neighbors when connected device has an asset tag</li> <li>#8088 - Improve legibility of text in labels with light-colored backgrounds</li> <li>#8092 - Rack elevations should not include device asset tags</li> <li>#8096 - Fix DataError during change logging of objects with very long string representations</li> <li>#8101 - Preserve return URL when using \"create and add another\" button</li> <li>#8102 - Raise validation error when attempting to assign an IP address to multiple objects</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v311-2021-12-13",
      "title": "v3.1.1 (2021-12-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#enhancements_10",
      "title": "Enhancements",
      "text": "<ul> <li>#8047 - Display sorting indicator in table column headers</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#5869 - Fix permissions evaluation under available prefix/IP REST API endpoints</li> <li>#7519 - Return a 409 status for unfulfillable available prefix/IP requests</li> <li>#7690 - Fix custom field integer support for MultiValueNumberFilter</li> <li>#7990 - Fix <code>title</code> display on contact detail view</li> <li>#7996 - Show WWN field in interface creation form</li> <li>#8001 - Correct verbose name for wireless LAN group model</li> <li>#8003 - Fix cable tracing across bridged interfaces with no cable</li> <li>#8005 - Fix contact email display</li> <li>#8009 - Validate IP addresses for uniqueness when creating an FHRP group</li> <li>#8010 - Allow filtering devices by multiple serial numbers</li> <li>#8019 - Exclude metrics endpoint when <code>LOGIN_REQUIRED</code> is true</li> <li>#8030 - Validate custom field names</li> <li>#8033 - Fix display of zero values for custom integer fields in tables</li> <li>#8035 - Redirect back to parent prefix after creating IP address(es) where applicable</li> <li>#8038 - Placeholder filter should display zero integer values</li> <li>#8042 - Fix filtering cables list by site slug or rack name</li> <li>#8051 - Contact group parent assignment should not be required under REST API</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#v310-2021-12-06",
      "title": "v3.1.0 (2021-12-06)",
      "text": "<p>PostgreSQL 10 Required</p> <p>NetBox v3.1 requires PostgreSQL 10 or later.</p>"
    },
    {
      "location": "release-notes/version-3.1/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>The <code>tenant</code> and <code>tenant_id</code> filters for the Cable model now filter on the tenant assigned directly to each cable, rather than on the parent object of either termination.</li> <li>The <code>cable_peer</code> and <code>cable_peer_type</code> attributes of cable termination models have been renamed to <code>link_peer</code> and <code>link_peer_type</code>, respectively, to accommodate wireless links between interfaces.</li> <li>Exported webhooks and custom fields now reference associated content types by raw string value (e.g. \"dcim.site\") rather than by human-friendly name.</li> <li>The 128GFC interface type has been corrected from <code>128gfc-sfp28</code> to <code>128gfc-qsfp28</code>.</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.1/#contact-objects-1344",
      "title": "Contact Objects (#1344)",
      "text": "<p>A set of new models for tracking contact information has been introduced within the tenancy app. Users may now create individual contact objects to be associated with various models within NetBox. Each contact has a name, title, email address, etc. Contacts can be arranged in hierarchical groups for ease of management.</p> <p>When assigning a contact to an object, the user must select a predefined role (e.g. \"billing\" or \"technical\") and may optionally indicate a priority relative to other contacts associated with the object. There is no limit on how many contacts can be assigned to an object, nor on how many objects to which a contact can be assigned.</p>"
    },
    {
      "location": "release-notes/version-3.1/#wireless-networks-3979",
      "title": "Wireless Networks (#3979)",
      "text": "<p>This release introduces two new models to represent wireless networks:</p> <ul> <li>Wireless LAN - A multi-access wireless segment to which any number of wireless interfaces may be attached</li> <li>Wireless Link - A point-to-point connection between exactly two wireless interfaces</li> </ul> <p>Both types of connection include SSID and authentication attributes. Additionally, the interface model has been extended to include several attributes pertinent to wireless operation:</p> <ul> <li>Wireless role - Access point or station</li> <li>Channel - A predefined channel within a standardized band</li> <li>Channel frequency &amp; width - Customizable channel attributes (e.g. for licensed bands)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#dynamic-configuration-updates-5883",
      "title": "Dynamic Configuration Updates (#5883)",
      "text": "<p>Some parameters of NetBox's configuration are now accessible via the admin UI. These parameters can be modified by an administrator and take effect immediately upon application: There is no need to restart NetBox. Additionally, each iteration of the dynamic configuration is preserved in the database, and can be restored by an administrator at any time.</p> <p>Dynamic configuration parameters may also still be defined within <code>configuration.py</code>, and the settings defined here take precedence over those defined via the user interface.</p>"
    },
    {
      "location": "release-notes/version-3.1/#first-hop-redundancy-protocol-fhrp-groups-6235",
      "title": "First Hop Redundancy Protocol (FHRP) Groups (#6235)",
      "text": "<p>A new FHRP group model has been introduced to aid in modeling the configurations of protocols such as HSRP, VRRP, and GLBP. Each FHRP group may be assigned one or more virtual IP addresses, as well as an authentication type and key. Member device and VM interfaces may be associated with one or more FHRP groups, with each assignment receiving a numeric priority designation.</p>"
    },
    {
      "location": "release-notes/version-3.1/#conditional-webhooks-6238",
      "title": "Conditional Webhooks (#6238)",
      "text": "<p>Webhooks now include a <code>conditions</code> field, which may be used to specify conditions under which a webhook triggers. For example, you may wish to generate outgoing requests for a device webhook only when its status is \"active\" or \"staged\". This can be done by declaring conditional logic in JSON:</p> <pre><code>{\n  \"attr\": \"status.value\",\n  \"op\": \"in\",\n  \"value\": [\"active\", \"staged\"]\n}\n</code></pre> <p>Multiple conditions may be nested using AND/OR logic as well. For more information, please see the conditional logic documentation. </p>"
    },
    {
      "location": "release-notes/version-3.1/#interface-bridging-6346",
      "title": "Interface Bridging (#6346)",
      "text": "<p>A <code>bridge</code> field has been added to the interface model for devices and virtual machines. This can be set to reference another interface on the same parent device/VM to indicate a direct layer two bridging adjacency. Additionally, \"bridge\" has been added as an interface type. (However, interfaces of any type may be designated as bridged.)</p> <p>Multiple interfaces can be bridged to a single virtual interface to effect a bridge group. Alternatively, two physical interfaces can be bridged to one another, to effect an internal cross-connect.</p>"
    },
    {
      "location": "release-notes/version-3.1/#multiple-asns-per-site-6732",
      "title": "Multiple ASNs per Site (#6732)",
      "text": "<p>With the introduction of the new ASN model, NetBox now supports the assignment of multiple ASNs per site. Each ASN instance must have a 32-bit AS number, and may optionally be assigned to a RIR and/or Tenant.</p> <p>The <code>asn</code> integer field on the site model has been preserved to maintain backward compatability until a later release.</p>"
    },
    {
      "location": "release-notes/version-3.1/#single-sign-on-sso-authentication-7649",
      "title": "Single Sign-On (SSO) Authentication (#7649)",
      "text": "<p>Support for single sign-on (SSO) authentication has been added via the python-social-auth library. NetBox administrators can configure one of the supported authentication backends to enable SSO authentication for users.</p>"
    },
    {
      "location": "release-notes/version-3.1/#enhancements_11",
      "title": "Enhancements",
      "text": "<ul> <li>#1337 - Add WWN field to interfaces</li> <li>#1943 - Relax uniqueness constraint on cluster names</li> <li>#3839 - Add <code>airflow</code> field for devices types and devices</li> <li>#5143 - Include a device's asset tag in its display value</li> <li>#6497 - Extend tag support to organizational models</li> <li>#6615 - Add filter lookups for custom fields</li> <li>#6711 - Add <code>longtext</code> custom field type with Markdown support</li> <li>#6715 - Add tenant assignment for cables</li> <li>#6874 - Add tenant assignment for locations</li> <li>#7354 - Relax uniqueness constraints on region, site group, and location names</li> <li>#7452 - Add <code>json</code> custom field type</li> <li>#7530 - Move device type component lists to separate views</li> <li>#7606 - Model transmit power for interfaces</li> <li>#7619 - Permit custom validation rules to be defined as plain data or dotted path to class</li> <li>#7761 - Extend cable tracing across bridged interfaces</li> <li>#7812 - Enable change logging for image attachments</li> <li>#7858 - Standardize the representation of content types across import &amp; export functions</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#bug-fixes_11",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7589 - Correct 128GFC interface type identifier</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#7318 - Raise minimum required PostgreSQL version from 9.6 to 10</li> </ul>"
    },
    {
      "location": "release-notes/version-3.1/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Added the following endpoints for ASNs:<ul> <li><code>/api/ipam/asn/</code></li> </ul> </li> <li>Added the following endpoints for FHRP groups:<ul> <li><code>/api/ipam/fhrp-groups/</code></li> <li><code>/api/ipam/fhrp-group-assignments/</code></li> </ul> </li> <li>Added the following endpoints for contacts:<ul> <li><code>/api/tenancy/contact-assignments/</code></li> <li><code>/api/tenancy/contact-groups/</code></li> <li><code>/api/tenancy/contact-roles/</code></li> <li><code>/api/tenancy/contacts/</code></li> </ul> </li> <li>Added the following endpoints for wireless networks:<ul> <li><code>/api/wireless/wireless-lans/</code></li> <li><code>/api/wireless/wireless-lan-groups/</code></li> <li><code>/api/wireless/wireless-links/</code></li> </ul> </li> <li>Added <code>tags</code> field to the following models:<ul> <li>circuits.CircuitType</li> <li>dcim.DeviceRole</li> <li>dcim.Location</li> <li>dcim.Manufacturer</li> <li>dcim.Platform</li> <li>dcim.RackRole</li> <li>dcim.Region</li> <li>dcim.SiteGroup</li> <li>ipam.RIR</li> <li>ipam.Role</li> <li>ipam.VLANGroup</li> <li>tenancy.ContactGroup</li> <li>tenancy.ContactRole</li> <li>tenancy.TenantGroup</li> <li>virtualization.ClusterGroup</li> <li>virtualization.ClusterType</li> </ul> </li> <li>circuits.CircuitTermination<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Cable<ul> <li>Added <code>tenant</code> field</li> </ul> </li> <li>dcim.ConsolePort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.ConsoleServerPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Device<ul> <li>The <code>display</code> field now includes the device's asset tag, if set</li> <li>Added <code>airflow</code> field</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Added <code>airflow</code> field </li> </ul> </li> <li>dcim.FrontPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Interface<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> <li>Added <code>bridge</code> field</li> <li>Added <code>rf_channel</code> field</li> <li>Added <code>rf_channel_frequency</code> field</li> <li>Added <code>rf_channel_width</code> field</li> <li>Added <code>rf_role</code> field</li> <li>Added <code>tx_power</code> field</li> <li>Added <code>wireless_link</code> field</li> <li>Added <code>wwn</code> field</li> <li>Added <code>count_fhrp_groups</code> read-only field</li> </ul> </li> <li>dcim.Location<ul> <li>Added <code>tenant</code> field</li> </ul> </li> <li>dcim.PowerFeed<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.PowerOutlet<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.PowerPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.RearPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Site<ul> <li>Added <code>asns</code> relationship to ipam.ASN</li> </ul> </li> <li>extras.ImageAttachment<ul> <li>Added the <code>last_updated</code> field</li> </ul> </li> <li>extras.Webhook<ul> <li>Added the <code>conditions</code> field</li> </ul> </li> <li>virtualization.VMInterface<ul> <li>Added <code>bridge</code> field</li> <li>Added <code>count_fhrp_groups</code> read-only field</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/",
      "title": "NetBox v3.2",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#v329-2022-08-16",
      "title": "v3.2.9 (2022-08-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#8595 - Add PON interface types</li> <li>#8723 - Enable bulk renaming of devices</li> <li>#9161 - Pretty print JSON custom field data when editing</li> <li>#9505 - Display extra addressing details for IPv4 prefixes</li> <li>#9625 - Add phone &amp; email details to contacts panel</li> <li>#9857 - Add clear button to quick search fields</li> <li>#9933 - Add DOCSIS interface type</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9491 - Remove button for adding inventory item templates to module type components</li> <li>#9979 - Fix Markdown rendering for custom fields in table columns</li> <li>#9986 - Workaround for upstream timezone data bug</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v328-2022-08-08",
      "title": "v3.2.8 (2022-08-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#9062 - Add/edit {module} substitution to help text for component template name</li> <li>#9637 - Add site group field to rack reservation form</li> <li>#9762 - Add <code>nat_outside</code> column to the IPAddress table</li> <li>#9825 - Add contacts column to virtual machines table</li> <li>#9881 - Increase granularity in utilization graph values</li> <li>#9882 - Add manufacturer column to modules table</li> <li>#9883 - Linkify location column in power panels table</li> <li>#9906 - Include <code>color</code> attribute in front &amp; rear port YAML import/export</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9827 - Fix assignment of module bay position during bulk creation</li> <li>#9871 - Fix utilization graph value alignments</li> <li>#9884 - Prevent querying assigned VRF on prefix object init</li> <li>#9885 - Fix child prefix counts when editing/deleting aggregates in bulk</li> <li>#9891 - Ensure consistent ordering for tags during object serialization</li> <li>#9919 - Fix potential XSS avenue via linked objects in tables</li> <li>#9948 - Fix TypeError exception when requesting API tokens list as non-authenticated user</li> <li>#9949 - Fix KeyError exception resulting from invalid API token provisioning request</li> <li>#9950 - Prevent redirection to arbitrary URLs via <code>next</code> parameter on login URL</li> <li>#9952 - Prevent InvalidMove when attempting to assign a nested child object as parent</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v327-2022-07-20",
      "title": "v3.2.7 (2022-07-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#9705 - Support filter expressions for the <code>serial</code> field on racks, devices, and inventory items</li> <li>#9741 - Check for UserConfig instance during user login</li> <li>#9745 - Add wireless LANs and links to global search</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9437 - Standardize form submission buttons and behavior when using enter key</li> <li>#9499 - Fix filtered bulk deletion of VM Interfaces</li> <li>#9634 - Fix image URLs in rack elevations when using external storage</li> <li>#9715 - Fix <code>SOCIAL_AUTH_PIPELINE</code> config parameter not taking effect</li> <li>#9754 - Fix regression introduced by #9632</li> <li>#9746 - Permit filtering interfaces by arbitrary speed value in UI</li> <li>#9749 - Retain original slug values when modifying object names</li> <li>#9775 - Fix exception when viewing a report with no description</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v326-2022-07-11",
      "title": "v3.2.6 (2022-07-11)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#7702 - Enable dynamic configuration for default powerfeed attributes</li> <li>#9396 - Allow filtering modules by bay ID</li> <li>#9403 - Enable modifying virtual chassis properties when creating/editing a device</li> <li>#9540 - Add filters for assigned device &amp; VM to IP addresses list</li> <li>#9686 - Add tenant group column for all object tables with tenant assignments</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8854 - Fix <code>REMOTE_AUTH_DEFAULT_GROUPS</code> for social-auth backends</li> <li>#9575 - Fix AttributeError exception for FHRP group with an IP address assigned</li> <li>#9597 - Include <code>installed_module</code> in module bay REST API serializer</li> <li>#9632 - Automatically focus on search box when expanding dropdowns</li> <li>#9657 - Fix filtering for custom fields and webhooks in the UI</li> <li>#9682 - Fix bulk assignment of ASNs to sites</li> <li>#9687 - Don't restrict custom text field lengths when entering via UI form</li> <li>#9704 - Include <code>last_updated</code> field on JournalEntry REST API serializer</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v325-2022-06-20",
      "title": "v3.2.5 (2022-06-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#8704 - Shift-click to select multiple objects in a list</li> <li>#8882 - Support filtering IP addresses by multiple parent prefixes</li> <li>#8893 - Include count of IP ranges under tenant view</li> <li>#9417 - Initialize manufacturer selection when inserting a new module</li> <li>#9501 - Add support for custom Jinja2 filters</li> <li>#9517 - Linkify related power port on power outlet view</li> <li>#9525 - Provide one-click edit link for objects in tables</li> <li>#9533 - Move Markdown reference to local documentation</li> <li>#9534 - Add VLAN group selector to interface bulk edit forms</li> <li>#9556 - Leave dropdown open upon selection for multi-select fields</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8944 - Fix rendering of Markdown links with colons</li> <li>#9108 - Fix rendering of bracketed Markdown links</li> <li>#9374 - Improve performance when retrieving devices/VMs with config context data</li> <li>#9466 - Avoid sending webhooks after script/report failure</li> <li>#9480 - Fix sorting services &amp; service templates by port numbers</li> <li>#9484 - Include services listening on \"all IPs\" under IP address view</li> <li>#9486 - Fix redirect URL when adding device components from the module view</li> <li>#9495 - Correct link to contacts in contact groups table column</li> <li>#9503 - Hyperlinks in rack elevation SVGs must always use absolute URLs</li> <li>#9512 - Fix duplicate site results when searching by ASN</li> <li>#9524 - Correct order of VLAN fields under VM interface creation form</li> <li>#9537 - Ensure consistent use of placeholder tag throughout UI</li> <li>#9549 - Fix device counts for rack list under rack role view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v324-2022-05-31",
      "title": "v3.2.4 (2022-05-31)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#8374 - Display device type and asset tag if name is blank but asset tag is populated</li> <li>#8922 - Add service list to IP address view</li> <li>#9098 - Add \"other\" types for power ports/outlets, pass-through ports</li> <li>#9239 - Enable filtering by contact group for all models which support contact assignment</li> <li>#9277 - Introduce <code>CSRF_COOKIE_NAME</code> configuration parameter</li> <li>#9347 - Include services in global search</li> <li>#9379 - Redirect to virtual chassis view after adding a member device</li> <li>#9451 - Add <code>export_raw</code> argument for TemplateColumn</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9094 - Fix partial address search within Prefix and Aggregate filters</li> <li>#9291 - Improve data validation for MultiObjectVar script fields</li> <li>#9358 - Annotate circuit count for providers list under ASN view</li> <li>#9387 - Ensure ActionsColumn <code>extra_buttons</code> are always displayed</li> <li>#9402 - Fix custom field population when creating a virtual chassis</li> <li>#9407 - Clean up display of prefixes values when exporting prefixes list</li> <li>#9420 - Fix custom script class inheritance</li> <li>#9425 - Fix bulk import for object and multi-object custom fields</li> <li>#9430 - Fix passing of initial form data for DynamicModelChoiceFields</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v323-2022-05-12",
      "title": "v3.2.3 (2022-05-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#8805 - Add \"mixed\" option for device airflow indication</li> <li>#8894 - Include full names when listing users</li> <li>#8998 - Enable filtering racks &amp; reservations by site group</li> <li>#9122 - Introduce <code>clearcache</code> management command &amp; clear cache during upgrade</li> <li>#9221 - Add definition list support for Markdown</li> <li>#9260 - Apply user preferences to tables under object detail views</li> <li>#9278 - Linkify device types count under manufacturers list</li> <li>#9280 - Allow adopting existing components when installing a module</li> <li>#9314 - Add device and VM filters for FHRP group assignments</li> <li>#9340 - Introduce support for error reporting via Sentry</li> <li>#9343 - Add Ubiquiti SmartPower power outlet type</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9190 - Prevent exception when attempting to instantiate module components which already exist on the parent device</li> <li>#9267 - Remove invalid entry in IP address role choices</li> <li>#9296 - Improve Markdown link sanitization</li> <li>#9306 - Include VC master interfaces when selecting a LAG/bridge for a VC member interface</li> <li>#9311 - Permit creating contact assignment without a priority via the REST API</li> <li>#9313 - Remove HTML code from CSV output of many-to-many relationships</li> <li>#9330 - Add missing <code>module_type</code> field to REST API serializers for modular device component templates</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v322-2022-04-28",
      "title": "v3.2.2 (2022-04-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#9060 - Add device type filters for device bays, module bays, and inventory items</li> <li>#9152 - Annotate related object type under custom field view</li> <li>#9192 - Add Ubiquiti SmartPower connector type</li> <li>#9214 - Linkify cluster counts in cluster type &amp; group tables</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#4264 - Treat 0th IP as unusable for IPv6 prefixes (excluding /127s)</li> <li>#8941 - Fix dynamic dropdown behavior when browser is zoomed</li> <li>#8959 - Prevent exception when refreshing scripts list (avoid race condition)</li> <li>#9132 - Limit location options by selected site when creating a wireless link</li> <li>#9133 - Upgrade script should require Python 3.8 or later</li> <li>#9138 - Avoid inadvertent form submission when utilizing quick search field on object lists</li> <li>#9151 - Child prefix counts not annotated on aggregates list under RIR view</li> <li>#9156 - Fix loading UserConfig data from fixtures</li> <li>#9158 - Do not list tags field for CSV forms which do not support tag assignment</li> <li>#9194 - Support position assignment when add module bays to multiple devices</li> <li>#9206 - Show header for comments field under module &amp; module type creation views</li> <li>#9222 - Fix circuit ID display under cable view</li> <li>#9227 - Fix related object assignment when recording change record for interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v321-2022-04-14",
      "title": "v3.2.1 (2022-04-14)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#5479 - Allow custom job timeouts for scripts &amp; reports</li> <li>#8543 - Improve filtering for wireless LAN VLAN selection</li> <li>#8920 - Limit number of non-racked devices displayed</li> <li>#8956 - Retain old script/report results for configured lifetime</li> <li>#8973 - Display VLAN group count under site view</li> <li>#9081 - Add <code>fhrpgroup_id</code> filter for IP addresses</li> <li>#9099 - Enable display of installed module serial &amp; asset tag in module bays list</li> <li>#9110 - Add Neutrik proprietary power connectors</li> <li>#9123 - Improve appearance of SSO login providers</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#8931 - Copy assigned tenant when cloning a location</li> <li>#9055 - Restore ability to move inventory item to other device</li> <li>#9057 - Fix missing instance counts for module types</li> <li>#9061 - Fix general search for device components</li> <li>#9065 - Min/max VID should not be required when filtering VLAN groups</li> <li>#9079 - Fail validation when an inventory item is assigned as its own parent</li> <li>#9096 - Remove duplicate filter tag when filtering by \"none\"</li> <li>#9100 - Include position field in module type YAML export</li> <li>#9116 - <code>assigned_to_interface</code> filter for IP addresses should not match FHRP group assignments</li> <li>#9118 - Fix validation error when importing VM child interfaces</li> <li>#9128 - Resolve component labels per module bay position when installing modules</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#v320-2022-04-05",
      "title": "v3.2.0 (2022-04-05)",
      "text": "<p>Python 3.8 or Later Required</p> <p>NetBox v3.2 requires Python 3.8 or later.</p> <p>Deletion of Legacy Data</p> <p>This release includes a database migration that will remove the <code>asn</code>, <code>contact_name</code>, <code>contact_phone</code>, and <code>contact_email</code> fields from the site model. (These fields have been superseded by the ASN and contact models introduced in NetBox v3.1.) To protect against the accidental destruction of data, the upgrade process will fail if any sites still have data in any of these fields. To bypass this safeguard, set the <code>NETBOX_DELETE_LEGACY_DATA</code> environment variable when running the upgrade script, which will permit the destruction of legacy data.</p> <p>Migration Scripts</p> <p>A set of migration scripts is available to assist with the migration of legacy site data.</p>"
    },
    {
      "location": "release-notes/version-3.2/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Automatic redirection of legacy slug-based URL paths has been removed. URL-based slugs were changed to use numeric IDs in v2.11.0.</li> <li>The <code>asn</code> field has been removed from the site model. Please replicate any site ASN assignments to the ASN model introduced in NetBox v3.1 prior to upgrading.</li> <li>The <code>asn</code> query filter for sites now matches against the AS number of assigned ASN objects.</li> <li>The <code>contact_name</code>, <code>contact_phone</code>, and <code>contact_email</code> fields have been removed from the site model. Please replicate any data remaining in these fields to the contact model introduced in NetBox v3.1 prior to upgrading.</li> <li>The <code>created</code> field of all change-logged models now conveys a full datetime object, rather than only a date. (Previous date-only values will receive a timestamp of 00:00.) While this change is largely unconcerning, strictly-typed API consumers may need to be updated.</li> <li>A <code>pre_run()</code> method has been added to the base Report class. Although unlikely to affect most installations, you may need to alter any reports which already use this name for a method.</li> <li>Webhook URLs now support Jinja2 templating. Although this is unlikely to introduce any issues, it's possible that an unusual URL might trigger a Jinja2 rendering error, in which case the URL would need to be properly escaped.</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.2/#plugins-framework-extensions-8333",
      "title": "Plugins Framework Extensions (#8333)",
      "text": "<p>NetBox's plugins framework has been extended considerably in this release. Additions include:</p> <ul> <li>Officially-supported generic view classes for common CRUD operations:<ul> <li><code>ObjectView</code></li> <li><code>ObjectEditView</code></li> <li><code>ObjectDeleteView</code></li> <li><code>ObjectListView</code></li> <li><code>BulkImportView</code></li> <li><code>BulkEditView</code></li> <li><code>BulkDeleteView</code></li> </ul> </li> <li>The <code>NetBoxModel</code> base class, which enables various NetBox features, including:<ul> <li>Change logging</li> <li>Custom fields</li> <li>Custom links</li> <li>Custom validation</li> <li>Export templates</li> <li>Journaling</li> <li>Tags</li> <li>Webhooks</li> </ul> </li> <li>Four base form classes for manipulating objects via the UI:<ul> <li><code>NetBoxModelForm</code></li> <li><code>NetBoxModelCSVForm</code></li> <li><code>NetBoxModelBulkEditForm</code></li> <li><code>NetBoxModelFilterSetForm</code></li> </ul> </li> <li>The <code>NetBoxModelFilterSet</code> base class for plugin filter sets</li> <li>The <code>NetBoxTable</code> base class for rendering object tables with <code>django-tables2</code>, as well as various custom column classes</li> <li>Function-specific templates (for generic views)</li> <li>Various custom template tags and filters</li> <li><code>NetBoxModelViewSet</code> and several base serializer classes now provide enhanced REST API functionality</li> <li>Plugins can now extend NetBox's GraphQL API with their own schema</li> </ul> <p>No breaking changes to previously supported components have been introduced in this release. However, plugin authors are encouraged to audit their existing code for misuse of unsupported components, as much of NetBox's internal code base has been reorganized.</p>"
    },
    {
      "location": "release-notes/version-3.2/#modules-module-types-7844",
      "title": "Modules &amp; Module Types (#7844)",
      "text": "<p>Several new models have been added to represent field-replaceable device modules, such as line cards installed within a chassis-based switch or router. Similar to devices, each module is instantiated from a user-defined module type, and can have components (interfaces, console ports, etc.) associated with it. These components become available to the parent device once the module has been installed within a module bay. This provides a convenient mechanism to effect the addition and deletion of device components as modules are installed and removed.</p> <p>Automatic renaming of module components is also supported. When a new module is created, any occurrence of the string <code>{module}</code> in a component name will be replaced with the position of the module bay into which the module is being installed.</p> <p>As with device types, the NetBox community offers a selection of curated real-world module type definitions in our device type library. These YAML files can be imported directly to NetBox for your convenience.</p>"
    },
    {
      "location": "release-notes/version-3.2/#custom-object-fields-7006",
      "title": "Custom Object Fields (#7006)",
      "text": "<p>Two new types of custom field have been introduced: object and multi-object. These can be used to associate an object in NetBox with some other arbitrary object(s) regardless of its type. For example, you might create a custom field named <code>primary_site</code> on the tenant model so that each tenant can have particular site designated as its primary. The multi-object custom field type allows for the assignment of multiple objects of the same type.</p> <p>Custom field object assignment is fully supported in the REST API, and functions similarly to built-in foreign key relations. Nested representations are provided automatically for each custom field object.</p>"
    },
    {
      "location": "release-notes/version-3.2/#custom-status-choices-8054",
      "title": "Custom Status Choices (#8054)",
      "text": "<p>Custom choices can be now added to most object status fields in NetBox. This is done by defining the <code>FIELD_CHOICES</code> configuration parameter to map field identifiers to an iterable of custom choices an (optionally) colors. These choices are populated automatically when NetBox initializes. For example, the following configuration will add three custom choices for the site status field, each with a designated color:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status': (\n        ('foo', 'Foo', 'red'),\n        ('bar', 'Bar', 'green'),\n        ('baz', 'Baz', 'blue'),\n    )\n}\n</code></pre> <p>This will replace all default choices for this field with those listed. If instead the intent is to extend the set of default choices, this can be done by appending a plus sign (<code>+</code>) to the end of the field identifier. For example, the following will add a single extra choice while retaining the defaults provided by NetBox:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status+': (\n        ('fubar', 'FUBAR', 'red'),\n    )\n}\n</code></pre>"
    },
    {
      "location": "release-notes/version-3.2/#improved-user-preferences-7759",
      "title": "Improved User Preferences (#7759)",
      "text": "<p>A robust new mechanism for managing user preferences is included in this release. The user preferences form has been improved for better usability, and administrators can now define default preferences for all users with the <code>DEFAULT_USER_PREFERENCES</code> configuration parameter. For example, this can be used to define the columns which appear by default in a table:</p> <pre><code>DEFAULT_USER_PREFERENCES = {\n    'tables': {\n        'IPAddressTable': {\n            'columns': ['address', 'status', 'created', 'description']\n        }\n    }\n}\n</code></pre> <p>Users can adjust their own preferences under their user profile. A complete list of supported preferences is available in NetBox's developer documentation.</p>"
    },
    {
      "location": "release-notes/version-3.2/#inventory-item-roles-3087",
      "title": "Inventory Item Roles (#3087)",
      "text": "<p>A new model has been introduced to represent functional roles for inventory items, similar to device roles. The assignment of roles to inventory items is optional.</p>"
    },
    {
      "location": "release-notes/version-3.2/#inventory-item-templates-8118",
      "title": "Inventory Item Templates (#8118)",
      "text": "<p>Inventory items can now be templatized on a device type similar to other components (such as interfaces or console ports). This enables users to better pre-model fixed hardware components such as power supplies or hard disks.</p> <p>Inventory item templates can be arranged hierarchically within a device type, and may be assigned to other templated components. These relationships will be mirrored when instantiating inventory items on a newly-created device (see #7846). For example, if defining an optic assigned to an interface template on a device type, the instantiated device will mimic this relationship between the optic and interface.</p>"
    },
    {
      "location": "release-notes/version-3.2/#service-templates-1591",
      "title": "Service Templates (#1591)",
      "text": "<p>A new service template model has been introduced to assist in standardizing the definition and association of applications with devices and virtual machines. As an alternative to manually defining a name, protocol, and port(s) each time a service is created, a user now has the option of selecting a pre-defined template from which these values will be populated.</p>"
    },
    {
      "location": "release-notes/version-3.2/#automatic-provisioning-of-next-available-vlans-2658",
      "title": "Automatic Provisioning of Next Available VLANs (#2658)",
      "text": "<p>A new REST API endpoint has been added at <code>/api/ipam/vlan-groups/&lt;id&gt;/available-vlans/</code>. A GET request to this endpoint will return a list of available VLANs within the group. A POST request can be made specifying the name(s) of one or more VLANs to create within the group, and their VLAN IDs will be assigned automatically from the available pool.</p> <p>Where it is desired to limit the range of available VLANs within a group, users can define a minimum and/or maximum VLAN ID per group (see #8168).</p>"
    },
    {
      "location": "release-notes/version-3.2/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#5429 - Enable toggling the placement of table pagination controls</li> <li>#6954 - Remember users' table ordering preferences</li> <li>#7650 - Expose <code>AUTH_PASSWORD_VALIDATORS</code> setting to enforce password validation for local accounts</li> <li>#7679 - Add actions menu to all object tables</li> <li>#7681 - Add <code>service_id</code> field for provider networks</li> <li>#7784 - Support cluster type assignment for config contexts</li> <li>#7846 - Enable associating inventory items with device components</li> <li>#7852 - Enable the assignment of interfaces to VRFs</li> <li>#7853 - Add <code>speed</code> and <code>duplex</code> fields to device interface model</li> <li>#8168 - Add <code>min_vid</code> and <code>max_vid</code> fields to VLAN group</li> <li>#8295 - Jinja2 rendering is now supported for webhook URLs</li> <li>#8296 - Allow disabling custom links</li> <li>#8307 - Add <code>data_type</code> indicator to REST API serializer for custom fields</li> <li>#8463 - Change the <code>created</code> field on all change-logged models from date to datetime</li> <li>#8496 - Enable assigning multiple ASNs to a provider</li> <li>#8572 - Add a <code>pre_run()</code> method for reports</li> <li>#8593 - Add a <code>link</code> field for contacts</li> <li>#8649 - Enable customization of configuration module using <code>NETBOX_CONFIGURATION</code> environment variable</li> <li>#9006 - Enable custom fields, custom links, and tags for journal entries</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#bug-fixes-from-beta2",
      "title": "Bug Fixes (From Beta2)",
      "text": "<ul> <li>#8658 - Fix display of assigned components under inventory item lists</li> <li>#8838 - Fix FieldError exception during global search</li> <li>#8845 - Correct default ASN formatting in table</li> <li>#8869 - Fix NoReverseMatch exception when displaying tag w/assignments</li> <li>#8872 - Enable filtering by custom object fields</li> <li>#8970 - Permit nested inventory item templates on device types</li> <li>#8976 - Add missing <code>object_type</code> field on CustomField REST API serializer</li> <li>#8978 - Fix instantiation of front ports when provisioning a module</li> <li>#9007 - Fix FieldError exception when instantiating a device type with nested inventory items</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#7731 - Require Python 3.8 or later</li> <li>#7743 - Remove legacy ASN field from site model</li> <li>#7748 - Remove legacy contact fields from site model</li> <li>#8031 - Remove automatic redirection of legacy slug-based URLs</li> <li>#8195, #8454 - Use 64-bit integers for all primary keys</li> <li>#8509 - <code>CSRF_TRUSTED_ORIGINS</code> is now a discrete configuration parameter (rather than being populated from <code>ALLOWED_HOSTS</code>)</li> <li>#8684 - Change custom link template context variable <code>obj</code> to <code>object</code> (backward-compatible)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.2/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Added the following endpoints:<ul> <li><code>/api/dcim/inventory-item-roles/</code></li> <li><code>/api/dcim/inventory-item-templates/</code></li> <li><code>/api/dcim/modules/</code></li> <li><code>/api/dcim/module-bays/</code></li> <li><code>/api/dcim/module-bay-templates/</code></li> <li><code>/api/dcim/module-types/</code></li> <li><code>/api/ipam/service-templates/</code></li> <li><code>/api/ipam/vlan-groups/&lt;id&gt;/available-vlans/</code></li> </ul> </li> <li>circuits.Provider<ul> <li>Added <code>asns</code> field</li> </ul> </li> <li>circuits.ProviderNetwork<ul> <li>Added <code>service_id</code> field</li> </ul> </li> <li>dcim.ConsolePort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.ConsoleServerPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.FrontPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.Interface<ul> <li>Added <code>module</code>, <code>speed</code>, <code>duplex</code>, and <code>vrf</code> fields</li> </ul> </li> <li>dcim.InventoryItem<ul> <li>Added <code>component_type</code>, <code>component_id</code>, and <code>role</code> fields</li> <li>Added read-only <code>component</code> field (GFK)</li> </ul> </li> <li>dcim.PowerPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.PowerOutlet<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.RearPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.Site<ul> <li>Removed the <code>asn</code>, <code>contact_name</code>, <code>contact_phone</code>, and <code>contact_email</code> fields</li> </ul> </li> <li>extras.ConfigContext<ul> <li>Add <code>cluster_types</code> field</li> </ul> </li> <li>extras.CustomField<ul> <li>Added <code>data_type</code> and <code>object_type</code> fields</li> </ul> </li> <li>extras.CustomLink<ul> <li>Added <code>enabled</code> field</li> </ul> </li> <li>extras.JournalEntry<ul> <li>Added <code>custom_fields</code> and <code>tags</code> fields</li> </ul> </li> <li>ipam.ASN<ul> <li>Added <code>provider_count</code> field</li> </ul> </li> <li>ipam.VLANGroup<ul> <li>Added the <code>/availables-vlans/</code> endpoint</li> <li>Added <code>min_vid</code> and <code>max_vid</code> fields</li> </ul> </li> <li>tenancy.Contact<ul> <li>Added <code>link</code> field</li> </ul> </li> <li>virtualization.VMInterface<ul> <li>Added <code>vrf</code> field</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/",
      "title": "NetBox v3.3",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#v3310-2022-12-13",
      "title": "v3.3.10 (2022-12-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#9361 - Add replication controls for module bulk import</li> <li>#10255 - Introduce <code>LOGOUT_REDIRECT_URL</code> config parameter to control redirection of user after logout</li> <li>#10447 - Enable reassigning an inventory item from one device to another</li> <li>#10516 - Add vertical frame &amp; cabinet rack types</li> <li>#10748 - Add provider selection field for provider networks to circuit termination edit view</li> <li>#11089 - Permit whitespace in MAC addresses</li> <li>#11119 - Enable filtering L2VPNs by slug</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11041 - Correct power utilization percentage precision</li> <li>#11077 - Honor configured date format when displaying date custom field values in tables</li> <li>#11087 - Fix background color of bottom banner content</li> <li>#11101 - Correct circuits count under site view</li> <li>#11109 - Fix nullification of custom object &amp; multi-object fields via REST API</li> <li>#11128 - Disable ordering changelog table by object to avoid exception</li> <li>#11142 - Correct available choices for status under IP range filter form</li> <li>#11168 - Honor <code>RQ_DEFAULT_TIMEOUT</code> config parameter when using Redis Sentinel</li> <li>#11173 - Enable missing tags columns for contact, L2VPN lists</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v339-2022-11-30",
      "title": "v3.3.9 (2022-11-30)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#10653 - Ensure logging of failed login attempts</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#6389 - Call <code>snapshot()</code> on object when processing deletions</li> <li>#9223 - Fix serialization of array field values in change log</li> <li>#9878 - Fix spurious error message when rendering REST API docs</li> <li>#10236 - Fix TypeError exception when viewing PDU configured for three-phase power</li> <li>#10241 - Support referencing custom field related objects by attribute in addition to PK</li> <li>#10579 - Mark cable traces terminating to a provider network as complete</li> <li>#10721 - Disable ordering by custom object field columns</li> <li>#10929 - Raise validation error when attempting to create a duplicate cable termination</li> <li>#10936 - Permit demotion of device/VM primary IP via IP address edit form</li> <li>#10938 - <code>render_field</code> template tag should respect <code>label</code> kwarg</li> <li>#10969 - Update cable paths ending at associated rear port when creating new front ports</li> <li>#10996 - Hide checkboxes on child object lists when no bulk operations are available</li> <li>#10997 - Fix exception when editing NAT IP for VM with no cluster</li> <li>#11014 - Use natural ordering when sorting rack elevations by name</li> <li>#11028 - Enable bulk clearing of color attribute of pass-through ports</li> <li>#11047 - Cloning a rack reservation should replicate rack &amp; user</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v338-2022-11-16",
      "title": "v3.3.8 (2022-11-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#10356 - Add backplane Ethernet interface types</li> <li>#10902 - Add location selector to power feed form</li> <li>#10904 - Use front/rear port colors in cable trace SVG</li> <li>#10914 - Include \"add module type\" button on manufacturer view</li> <li>#10915 - Add count of L2VPNs to tenant view</li> <li>#10919 - Include device location under cable view</li> <li>#10920 - Include request cookies when queuing a custom script</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9439 - Ensure thread safety of change logging functions</li> <li>#10709 - Correct UI display for <code>azuread-v2-tenant-oauth2</code> SSO backend</li> <li>#10829 - Fix bulk edit/delete buttons ad top of object lists</li> <li>#10837 - Correct cookie paths when <code>BASE_PATH</code> is set</li> <li>#10874 - Remove erroneous link for contact assignment count</li> <li>#10881 - Fix dark mode coloring for data on device status page</li> <li>#10891 - Populate tag selection list for service filter form</li> <li>#10897 - Fix form widget styling on FHRP group form</li> <li>#10910 - Fix cable creation links on power port view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v337-2022-11-01",
      "title": "v3.3.7 (2022-11-01)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#10282 - Enforce advisory locks when allocating available IP addresses to prevent race conditions</li> <li>#10770 - Fix social authentication for new users</li> <li>#10791 - Permit nullifying VLAN group <code>scope_type</code> via REST API</li> <li>#10803 - Fix exception when ordering contacts by number of assignments</li> <li>#10809 - Permit nullifying site <code>time_zone</code> via REST API</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v336-2022-10-26",
      "title": "v3.3.6 (2022-10-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#9584 - Enable filtering devices by device type slug</li> <li>#9722 - Add LDAP configuration parameters to specify certificates</li> <li>#10580 - Link \"assigned\" checkbox in IP address table to assigned interface</li> <li>#10639 - Set cookie paths according to configured <code>BASE_PATH</code></li> <li>#10685 - Position A/Z termination cards above the fold under circuit view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9669 - Strip colons from usernames when using remote authentication</li> <li>#10575 - Include OIDC dependencies for python-social-auth</li> <li>#10584 - Fix service clone link</li> <li>#10610 - Allow assignment of VC member to LAG on non-master peer</li> <li>#10643 - Ensure consistent display of custom fields for all model forms</li> <li>#10646 - Fix filtering of power feed by power panel when connecting a cable</li> <li>#10655 - Correct display of assigned contacts in object tables</li> <li>#10666 - Re-evaluate disabled LDAP user when processing API requests</li> <li>#10682 - Correct home view links to connection lists</li> <li>#10712 - Fix ModuleNotFoundError exception when generating API schema under Python 3.9+</li> <li>#10716 - Add left/right page plugin content embeds for tag view</li> <li>#10719 - Prevent user without sufficient permission from creating an IP address via FHRP group creation</li> <li>#10723 - Distinguish between inside/outside NAT assignments for device/VM primary IPs</li> <li>#10745 - Correct display of status field in clusters list</li> <li>#10746 - Add missing status attribute to cluster view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v335-2022-10-05",
      "title": "v3.3.5 (2022-10-05)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#8424 - Include rack elevation under device view</li> <li>#10352 - Omit extraneous URL query attributes during search</li> <li>#10465 - Improve formatting of device heights and rack positions</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9497 - Adjust non-racked device filter on site and location detailed view</li> <li>#10408 - Fix validation when attempting to add redundant contact assignments</li> <li>#10423 - Enforce object type validation when creating journal entries</li> <li>#10435 - Fix exception when filtering VLANs by virtual machine with no cluster assigned</li> <li>#10439 - Fix form widget styling for DeviceType airflow field</li> <li>#10445 - Avoid rounding virtual machine memory values</li> <li>#10460 - Restore missing connection details for device components</li> <li>#10461 - Enable filtering by read-only custom fields in the UI</li> <li>#10470 - Omit read-only custom fields from CSV import forms</li> <li>#10480 - Cable trace SVG links should not force a new window</li> <li>#10491 - Clarify representation of blocking contact assignments during contact deletion</li> <li>#10513 - Disable the reassignment of a module to a new device</li> <li>#10517 - Automatically inherit site assignment from cluster when creating a virtual machine</li> <li>#10559 - Permit the pinning of a VM to a particular device within a cluster which has no site assignment</li> <li>#10562 - Correct URL for contacts table tags column</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v334-2022-09-16",
      "title": "v3.3.4 (2022-09-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#10383 - Fix assignment of component templates to module types via web UI</li> <li>#10387 - Fix <code>MultiValueDictKeyError</code> exception when editing a device interface</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v333-2022-09-15",
      "title": "v3.3.3 (2022-09-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#8580 - Add <code>occupied</code> filter for cabled objects to filter by cable or <code>mark_connected</code></li> <li>#9577 - Add <code>has_front_image</code> and <code>has_rear_image</code> filters for device types</li> <li>#10268 - Omit trailing \".0\" in device positions within UI</li> <li>#10359 - Add region and site group columns to the devices table</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9231 - Fix <code>empty</code> lookup expression for string filters</li> <li>#10247 - Allow changing the pre-populated device/VM when creating new components</li> <li>#10250 - Fix exception when CableTermination validation fails during bulk import of cables</li> <li>#10258 - Enable the use of reports &amp; scripts packaged in submodules</li> <li>#10259 - Fix <code>NoReverseMatch</code> exception when listing available prefixes with \"flat\" column displayed</li> <li>#10270 - Fix custom field validation when creating new services</li> <li>#10278 - Fix \"create &amp; add another\" for image attachments</li> <li>#10294 - Fix spurious changelog diff for interface WWN field</li> <li>#10304 - Enable cloning for custom fields &amp; custom links</li> <li>#10305 - Fix Virtual Chassis master field cannot be null according to the API</li> <li>#10307 - Correct value for \"Passive 48V (4-pair)\" PoE type selection</li> <li>#10333 - Show available values for <code>ui_visibility</code> field of CustomField for CSV import</li> <li>#10337 - Display SSO links when local authentication fails</li> <li>#10353 - Table action buttons should reserve return URL parameters</li> <li>#10362 - Correct display of custom fields when editing an L2VPN termination</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v332-2022-09-02",
      "title": "v3.3.2 (2022-09-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#9477 - Enable clearing applied table column ordering</li> <li>#10034 - Add L2VPN column to interface and VLAN tables</li> <li>#10043 - Add support for <code>limit</code> query parameter to available VLANs API endpoint</li> <li>#10060 - Add journal entries to global search</li> <li>#10195 - Enable filtering of device components by rack</li> <li>#10233 - Enable sorting rack elevations by facility ID</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9328 - Hide available IPs when non-default ordering is applied</li> <li>#9481 - Update child device location when parent location changes</li> <li>#9832 - Improve error message when validating rack reservation units</li> <li>#9895 - Various corrections to OpenAPI spec</li> <li>#9962 - SSO login should respect <code>next</code> URL query parameter</li> <li>#9963 - Fix support for custom <code>CSRF_COOKIE_NAME</code> value</li> <li>#10155 - Fix rear port display when editing front port template for module type </li> <li>#10156 - Avoid forcing SVG image links to open in a new window</li> <li>#10161 - Restore \"set null\" option for custom fields during bulk edit</li> <li>#10176 - Correct utilization display for empty racks</li> <li>#10177 - Correct display of custom fields when editing VM interfaces</li> <li>#10178 - Display manufacturer name alongside device type under device view</li> <li>#10181 - Restore MultiPartParser (regression from #10031)</li> <li>#10184 - Fix vertical alignment when displaying object attributes with buttons</li> <li>#10208 - Fix permissions evaluation for interface actions dropdown menu</li> <li>#10217 - Handle exception when trace splits to multiple rear ports</li> <li>#10220 - Validate IP version when assigning primary IPs to a virtual machine</li> <li>#10231 - Correct API schema definition for several serializer fields</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v331-2022-08-25",
      "title": "v3.3.1 (2022-08-25)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#6454 - Include contextual help when creating first objects in UI</li> <li>#9935 - Add 802.11ay and \"other\" wireless interface types</li> <li>#10031 - Enforce <code>application/json</code> content type for REST API requests</li> <li>#10033 - Disable \"add termination\" button for point-to-point L2VPNs with two terminations</li> <li>#10037 - Add \"child interface\" option to actions dropdown in interfaces list</li> <li>#10038 - Add \"L2VPN termination\" option to actions dropdown in interfaces list</li> <li>#10039 - Add \"assign FHRP group\" option to actions dropdown in interfaces list</li> <li>#10061 - Replicate type when cloning L2VPN instances</li> <li>#10066 - Use fixed column widths for custom field values in UI</li> <li>#10133 - Enable nullifying device location during bulk edit</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#9663 - Omit available IP annotations when filtering prefix child IPs list</li> <li>#10040 - Fix exception when ordering prefixes by flat representation</li> <li>#10053 - Custom fields header should not be displayed when editing circuit terminations with no custom fields</li> <li>#10055 - Fix extraneous NAT indicator by device primary IP</li> <li>#10057 - Fix AttributeError exception when global search results include rack reservations</li> <li>#10059 - Add identifier column to L2VPN table</li> <li>#10070 - Add unique constraint for L2VPN slug</li> <li>#10087 - Correct display of far end in console/power/interface connections tables</li> <li>#10089 - <code>linkify</code> template filter should escape object representation</li> <li>#10094 - Fix 404 when using \"create and add another\" to add contact assignments</li> <li>#10108 - Linkify inside NAT IPs for primary device IPs in UI</li> <li>#10109 - Fix available prefixes calculation for container prefixes in the global table</li> <li>#10111 - Fix ValueError exception when searching for L2VPN objects</li> <li>#10118 - Fix display of connected LLDP neighbors for devices</li> <li>#10134 - Custom fields data serializer should return a 400 response for invalid data</li> <li>#10135 - Fix SSO support for SAML2 IDPs</li> <li>#10147 - Permit the creation of 0U device types via REST API</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#v330-2022-08-17",
      "title": "v3.3.0 (2022-08-17)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Device position, device type height, and rack unit values are now reported as decimals (e.g. <code>1.0</code> or <code>1.5</code>) to support modeling half-height rack units.</li> <li>The <code>nat_outside</code> relation on the IP address model now returns a list of zero or more related IP addresses, rather than a single instance (or None).</li> <li>Several fields on the cable API serializers have been altered or removed to support multiple-object cable terminations:</li> </ul> Old Name Old Type New Name New Type <code>termination_a_type</code> string Removed - <code>termination_b_type</code> string Removed - <code>termination_a_id</code> integer Removed - <code>termination_b_id</code> integer Removed - <code>termination_a</code> object <code>a_terminations</code> list <code>termination_b</code> object <code>b_terminations</code> list <ul> <li>As with the cable model, several API fields on all objects to which cables can be connected (interfaces, circuit terminations, etc.) have been changed:</li> </ul> Old Name Old Type New Name New Type <code>link_peer</code> object <code>link_peers</code> list <code>link_peer_type</code> string <code>link_peers_type</code> string <code>connected_endpoint</code> object <code>connected_endpoints</code> list <code>connected_endpoint_type</code> string <code>connected_endpoints_type</code> string <code>connected_endpoint_reachable</code> boolean <code>connected_endpoints_reachable</code> boolean <ul> <li>The cable path serialization returned by the <code>/paths/</code> endpoint for pass-through ports has been simplified, and the following fields removed: <code>origin_type</code>, <code>origin</code>, <code>destination_type</code>, <code>destination</code>. (Additionally, <code>is_complete</code> has been added.)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.3/#multi-object-cable-terminations-9102",
      "title": "Multi-object Cable Terminations (#9102)",
      "text": "<p>When creating a cable in NetBox, each end can now be attached to multiple termination points. This allows accurate modeling of duplex fiber connections to individual termination ports and breakout cables, for example. (Note that all terminations attached to one end of a cable must be the same object type, but do not need to connect to the same parent object.) Additionally, cable terminations can now be modified without needing to delete and recreate the cable.</p>"
    },
    {
      "location": "release-notes/version-3.3/#l2vpn-modeling-8157",
      "title": "L2VPN Modeling (#8157)",
      "text": "<p>NetBox can now model a variety of L2 VPN technologies, including VXLAN, VPLS, and others. Interfaces and VLANs can be attached to L2VPNs to track connectivity across an overlay. Similarly to VRFs, each L2VPN can also have import and export route targets associated with it.</p>"
    },
    {
      "location": "release-notes/version-3.3/#poe-interface-attributes-1099",
      "title": "PoE Interface Attributes (#1099)",
      "text": "<p>Two new fields have been added to the device interface model to track Power over Ethernet (PoE) capabilities:</p> <ul> <li>PoE mode: Power supplying equipment (PSE) or powered device (PD)</li> <li>PoE type: Applicable IEEE standard or other power type </li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#half-height-rack-units-51",
      "title": "Half-Height Rack Units (#51)",
      "text": "<p>Device type height can now be specified in 0.5U increments, allowing for the creation of devices consume partial rack units. Additionally, a device can be installed at the half-unit mark within a rack (e.g. U2.5). For example, two half-height devices positioned in sequence will consume a single rack unit; two consecutive 1.5U devices will consume 3U of space.</p>"
    },
    {
      "location": "release-notes/version-3.3/#restrict-api-tokens-by-client-ip-8233",
      "title": "Restrict API Tokens by Client IP (#8233)",
      "text": "<p>API tokens can now be restricted to use by certain client IP addresses or networks. For example, an API token with its <code>allowed_ips</code> list set to <code>[192.0.2.0/24]</code> will permit authentication only from API clients within that network; requests from other sources will fail authentication. This enables administrators to restrict the use of a token to specific clients.</p>"
    },
    {
      "location": "release-notes/version-3.3/#reference-user-in-permission-constraints-9074",
      "title": "Reference User in Permission Constraints (#9074)",
      "text": "<p>NetBox's permission constraints have been expanded to support referencing the current user associated with a request using the special <code>$user</code> token. As an example, this enables an administrator to efficiently grant each user to edit his or her own journal entries, but not those created by other users.</p> <pre><code>{\n  \"created_by\": \"$user\"\n}\n</code></pre>"
    },
    {
      "location": "release-notes/version-3.3/#custom-field-grouping-8495",
      "title": "Custom Field Grouping (#8495)",
      "text": "<p>A <code>group_name</code> field has been added to the custom field model to enable organizing related custom fields by group. Similarly to custom links, custom fields which have been assigned to the same group will be rendered within that group when viewing an object in the UI. (Custom field grouping has no effect on API operation.)</p>"
    },
    {
      "location": "release-notes/version-3.3/#toggle-custom-field-visibility-9166",
      "title": "Toggle Custom Field Visibility (#9166)",
      "text": "<p>The behavior of each custom field within the NetBox UI can now be controlled individually by toggling its UI visibility. Three options are available:</p> <ul> <li>Read/write: The custom field is included when viewing and editing objects (default).</li> <li>Read-only: The custom field is displayed when viewing an object, but it cannot be edited via the UI. (It will appear in the form as a read-only field.)</li> <li>Hidden: The custom field will never be displayed within the UI. This option is recommended for fields which are not intended for use by human users.</li> </ul> <p>Custom field UI visibility has no impact on API operation.</p>"
    },
    {
      "location": "release-notes/version-3.3/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#1202 - Support overlapping assignment of NAT IP addresses</li> <li>#4350 - Illustrate reservations vertically alongside rack elevations</li> <li>#4434 - Enable highlighting devices within rack elevations</li> <li>#5303 - A virtual machine may be assigned to a site and/or cluster</li> <li>#7120 - Add <code>termination_date</code> field to Circuit</li> <li>#7744 - Add <code>status</code> field to Location</li> <li>#8171 - Populate next available address when cloning an IP</li> <li>#8222 - Enable the assignment of a VM to a specific host device within a cluster</li> <li>#8471 - Add <code>status</code> field to Cluster</li> <li>#8511 - Enable custom fields and tags for circuit terminations</li> <li>#8995 - Enable arbitrary ordering of REST API results</li> <li>#9070 - Hide navigation menu items based on user permissions</li> <li>#9177 - Add tenant assignment for wireless LANs &amp; links</li> <li>#9391 - Remove 500-character limit for custom link text &amp; URL fields</li> <li>#9536 - Track API token usage times</li> <li>#9582 - Enable assigning config contexts based on device location</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#bug-fixes-from-beta2",
      "title": "Bug Fixes (from Beta2)",
      "text": "<ul> <li>#9758 - Display parent object of connected termination</li> <li>#9900 - Pre-populate site &amp; rack fields for cable connection form</li> <li>#9938 - Exclude virtual interfaces from terminations list when connecting a cable</li> <li>#9939 - Fix list of next nodes for split paths under trace view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#plugins-api",
      "title": "Plugins API",
      "text": "<ul> <li>#9075 - Introduce <code>AbortRequest</code> exception for cleanly interrupting object mutations</li> <li>#9092 - Add support for <code>ObjectChildrenView</code> generic view</li> <li>#9228 - Subclasses of <code>ChangeLoggingMixin</code> can override <code>serialize_object()</code> to control JSON serialization for change logging</li> <li>#9414 - Add <code>clone()</code> method to NetBoxModel for copying instance attributes</li> <li>#9647 - Introduce <code>customfield_value</code> template tag</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#9261 - <code>NetBoxTable</code> no longer automatically clears pre-existing calls to <code>prefetch_related()</code> on its queryset</li> <li>#9434 - Enabled <code>django-rich</code> test runner for more user-friendly output</li> <li>#9903 - Implement a mechanism for automatically updating denormalized fields</li> </ul>"
    },
    {
      "location": "release-notes/version-3.3/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>List results can now be ordered by field, by appending <code>?ordering={fieldname}</code> to the query. Multiple fields can be specified by separating the field names with a comma, e.g. <code>?ordering=site,name</code>. To invert the ordering, prepend a hyphen to the field name, e.g. <code>?ordering=-name</code>.</li> <li>Added the following endpoints:<ul> <li><code>/api/dcim/cable-terminations/</code></li> <li><code>/api/ipam/l2vpns/</code></li> <li><code>/api/ipam/l2vpn-terminations/</code></li> </ul> </li> <li>circuits.Circuit<ul> <li>Added optional <code>termination_date</code> field</li> </ul> </li> <li>circuits.CircuitTermination<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> <li>Added <code>custom_fields</code> and <code>tags</code> fields</li> </ul> </li> <li>dcim.Cable<ul> <li><code>termination_a_type</code> has been renamed to <code>a_terminations_type</code></li> <li><code>termination_b_type</code> has been renamed to <code>b_terminations_type</code></li> <li><code>termination_a</code> renamed to <code>a_terminations</code> and now returns a list of objects</li> <li><code>termination_b</code> renamed to <code>b_terminations</code> and now returns a list of objects</li> <li><code>termination_a_id</code> has been removed</li> <li><code>termination_b_id</code> has been removed</li> </ul> </li> <li>dcim.ConsolePort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.ConsoleServerPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.Device<ul> <li>The <code>position</code> field has been changed from an integer to a decimal</li> </ul> </li> <li>dcim.DeviceType<ul> <li>The <code>u_height</code> field has been changed from an integer to a decimal</li> </ul> </li> <li>dcim.FrontPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.Interface<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> <li>Added the optional <code>poe_mode</code> and <code>poe_type</code> fields</li> <li>Added the <code>l2vpn_termination</code> read-only field</li> </ul> </li> <li>dcim.InterfaceTemplate<ul> <li>Added the optional <code>poe_mode</code> and <code>poe_type</code> fields</li> </ul> </li> <li>dcim.Location<ul> <li>Added required <code>status</code> field (default value: <code>active</code>)</li> </ul> </li> <li>dcim.PowerOutlet<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.PowerFeed<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.PowerPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.Rack<ul> <li>The <code>elevation</code> endpoint now includes half-height rack units, and utilizes decimal values for the ID and name of each unit</li> </ul> </li> <li>dcim.RearPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>extras.ConfigContext<ul> <li>Added the <code>locations</code> many-to-many field to track the assignment of ConfigContexts to Locations</li> </ul> </li> <li>extras.CustomField<ul> <li>Added <code>group_name</code> and <code>ui_visibility</code> fields</li> </ul> </li> <li>ipam.IPAddress<ul> <li>The <code>nat_inside</code> field no longer requires a unique value</li> <li>The <code>nat_outside</code> field has changed from a single IP address instance to a list of multiple IP addresses</li> </ul> </li> <li>ipam.VLAN<ul> <li>Added the <code>l2vpn_termination</code> read-only field</li> </ul> </li> <li>users.Token<ul> <li>Added the <code>allowed_ips</code> array field</li> <li>Added the read-only <code>last_used</code> datetime field</li> </ul> </li> <li>virtualization.Cluster<ul> <li>Added required <code>status</code> field (default value: <code>active</code>)</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li>The <code>site</code> field is now directly writable (rather than being inferred from the assigned cluster)</li> <li>The <code>cluster</code> field is now optional. A virtual machine must have a site and/or cluster assigned.</li> <li>Added the optional <code>device</code> field</li> <li>Added the <code>l2vpn_termination</code> read-only field</li> </ul> </li> <li>wireless.WirelessLAN<ul> <li>Added <code>tenant</code> field</li> </ul> </li> <li>wireless.WirelessLink<ul> <li>Added <code>tenant</code> field</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/",
      "title": "NetBox v3.4",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#v3410-2023-04-27",
      "title": "v3.4.10 (2023-04-27)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11607 - Fix custom object field assignments made via REST API for for cables</li> <li>#12252 - Fix ordering of search results when sorting by object name</li> <li>#12355 - Fix escaping of certain characters in URL when rendering custom links</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v349-2023-04-26",
      "title": "v3.4.9 (2023-04-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#10987 - Show peer racks as a dropdown list under rack view</li> <li>#11386 - Introduce <code>CSRF_COOKIE_SECURE</code>, <code>SECURE_SSL_REDIRECT</code>, and <code>SESSION_COOKIE_SECURE</code> configuration parameters</li> <li>#11623 - Hide PSK strings under wireless LAN &amp; link views</li> <li>#12205 - Sanitize rendered custom links to mitigate malicious links</li> <li>#12226 - Enable setting user name &amp; email values via remote authenticate headers</li> <li>#12337 - Enable anonymized reporting of census data</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11383 - Fix ordering of global search results by object type</li> <li>#11902 - Fix import of inventory items for devices with duplicated names</li> <li>#12238 - Improve error message for API token IP prefix validation failures</li> <li>#12255 - Restore the ability to move inventory items among devices</li> <li>#12270 - Fix pre-population of list values when creating a saved filter</li> <li>#12296 - Fix \"mark connected\" form field for bulk editing front &amp; rear ports</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v348-2023-04-12",
      "title": "v3.4.8 (2023-04-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#10414 - Enable general purpose image attachments for device types</li> <li>#10600 - Allow custom object fields to reference a user or group</li> <li>#11015 - Remove unit from commit rate column header in circuits table</li> <li>#11431 - Disallow changing custom field type after creation</li> <li>#11453 - Display a warning banner when <code>DEBUG</code> is enabled</li> <li>#12007 - Enable filtering of VM Interfaces by assigned VLAN</li> <li>#12095 - Specify UTF-8 encoding for default export template MIME type</li> <li>#12207 - Introduce the <code>grant_token</code> permission for controlling the creation of API tokens on behalf of other users</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#10221 - Validate generic foreign key relations assigned via REST API requests</li> <li>#11432 - Prevent existing components &amp; component templates from being reassigned to different devices/device types via the REST API</li> <li>#11454 - Raise validation error if generic foreign key assignment does not specify both object type and ID</li> <li>#11746 - Fix cleanup of object data when deleting a custom field</li> <li>#12011 - Fix KeyError exception when attempting to add module bays in bulk</li> <li>#12040 - Display relevant UI tab upon bulk import validation failure</li> <li>#12074 - Fix the automatic assignment of racks to devices via the REST API</li> <li>#12084 - Fix exception when attempting to create a saved filter for applied filters</li> <li>#12087 - Fix bulk editing of many-to-many relationships</li> <li>#12117 - Hide clone button for objects with no clonable attributes</li> <li>#12118 - Fix instantiation of nested inventory item templates when creating a device</li> <li>#12184 - Fix filtered bulk deletion for various models</li> <li>#12190 - Fix form layout for plugin textarea fields</li> <li>#12227 - Fix tenant assignment on bulk import of L2VPNs</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v347-2023-03-28",
      "title": "v3.4.7 (2023-03-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#11645 - Automatically set the scheduled time when executing reports/scripts at a recurring interval</li> <li>#11833 - Add fieldset support for custom script forms</li> <li>#11973 - Use SSID for representing wireless links, if set</li> <li>#11977 - Support designating multiple backends via <code>REMOTE_AUTH_BACKEND</code> config parameter</li> <li>#11990 - Improve error reporting for duplicate CSV column headings</li> <li>#11991 - Enable VDC assignment during bulk import/edit of interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11914 - Include parameters when exporting saved filters</li> <li>#11933 - Fix cloning of saved filters</li> <li>#11984 - Remove erroneous 802.3az PoE type</li> <li>#11979 - Correct URL for tags in route targets list</li> <li>#12008 - Enable cloning of export templates</li> <li>#12029 - Restore missing description field on virtual chassis form</li> <li>#12038 - Correct display of zero values for virtual chassis member priority</li> <li>#12048 - Enable cloning of tags</li> <li>#12058 - Enable cloning of config contexts</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v346-2023-03-13",
      "title": "v3.4.6 (2023-03-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#10058 - Enable searching for devices/VMs by primary IP address</li> <li>#11011 - Add ability to toggle visibility of virtual interfaces under device view</li> <li>#11294 - Enable live preview of Markdown content</li> <li>#11807 - Restore default page size when navigating between views</li> <li>#11817 - Add <code>connected_endpoints</code> field to GraphQL API for cabled objects</li> <li>#11851 - Include IP version in GraphQL API representations of aggregates, prefixes, and IP addresses</li> <li>#11862 - Add Cisco StackWise 1T interface type</li> <li>#11871 - Add IEEE 802.3az PoE type for interfaces</li> <li>#11929 - Strip whitespace from CSV headers prior to validation</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11470 - Avoid raising exception when filtering IPs by an invalid address</li> <li>#11565 - Apply custom field defaults to IP address created during FHRP group creation</li> <li>#11631 - Fix filtering changelog &amp; journal entries by multiple content type IDs</li> <li>#11758 - Support non-URL-safe characters in plugin menu titles</li> <li>#11796 - When importing devices, restrict rack by location only if the location field is specified</li> <li>#11819 - Fix filtering of cable terminations by object type</li> <li>#11850 - Fix loading of CSV files containing a byte order mark</li> <li>#11903 - Fix escaping of return URL values for action buttons in tables</li> <li>#11927 - Correct loading of plugin resources with custom paths</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v345-2023-02-21",
      "title": "v3.4.5 (2023-02-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#11110 - Add <code>start_address</code> and <code>end_address</code> filters for IP ranges</li> <li>#11592 - Introduce <code>FILE_UPLOAD_MAX_MEMORY_SIZE</code> configuration parameter</li> <li>#11685 - Match on containing prefixes and aggregates when querying for IP addresses using global search</li> <li>#11787 - Upgrade script will automatically rebuild missing search cache</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11032 - Fix false custom validation errors during component creation</li> <li>#11226 - Ensure scripts and reports within submodules are automatically reloaded</li> <li>#11459 - Enable evaluating null values in custom validation rules</li> <li>#11473 - GraphQL requests specifying an invalid filter should return an empty queryset</li> <li>#11582 - Ensure form validation errors are displayed when adding virtual chassis members</li> <li>#11601 - Fix partial matching of start/end addresses for IP range search</li> <li>#11683 - Fix CSV header attribute detection when auto-detecting import format</li> <li>#11711 - Fix CSV import for multiple-object custom fields</li> <li>#11723 - Circuit terminations should link to their associated circuits (rather than site or provider network)</li> <li>#11775 - Skip checking for old search cache records when creating a new object</li> <li>#11786 - List only applicable object types in form widget when filtering custom fields</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v344-2023-02-02",
      "title": "v3.4.4 (2023-02-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#10762 - Permit selection custom fields to have only one choice</li> <li>#11152 - Introduce AbortScript exception to elegantly abort scripts</li> <li>#11554 - Add module types count to manufacturers list</li> <li>#11585 - Add IP address filters for services</li> <li>#11598 - Add buttons to easily switch between rack list and elevations views</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11267 - Avoid catching ImportErrors when loading plugin resources</li> <li>#11487 - Remove \"set null\" option from non-writable custom fields during bulk edit</li> <li>#11491 - Show edit/delete buttons in user tokens table</li> <li>#11528 - Permit import of devices using uploaded file</li> <li>#11555 - Avoid inadvertent interpretation of search query as regular expression under global search (previously #11516)</li> <li>#11562 - Correct ordering of virtual chassis interfaces with duplicate names</li> <li>#11574 - Fix exception when attempting to schedule reports/scripts</li> <li>#11620 - Correct available filter choices for interface PoE type</li> <li>#11635 - Pre-populate assigned VRF when following \"first available IP\" link from prefix view</li> <li>#11650 - Display error message when attempting to create device component with duplicate name</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v343-2023-01-20",
      "title": "v3.4.3 (2023-01-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#9996 - Introduce <code>CA_CERT_PATH</code> parameter to define SSL CA path for Redis servers</li> <li>#10486 - Add a cable edit button for connected components in component lists</li> <li>#11118 - Add L2VPN filters for VLANs and interfaces</li> <li>#11150 - Add primary IPv4/v6 address filters for devices</li> <li>#11227 - Add 800GE interface types</li> <li>#11228 - List both devices &amp; VMs under device role view</li> <li>#11245 - Enable export templates for journal entries</li> <li>#11371 - Introduce additional 100M Ethernet interface types</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#10201 - Fix AssertionError exception when removing some terminations from an existing cable</li> <li>#11210 - Fix ValueError exception when attempting to bulk import cables attached to occupied terminations</li> <li>#11340 - Avoid flagging cable termination changes erroneously</li> <li>#11379 - Fix TypeError exception when bulk editing custom date fields</li> <li>#11384 - Correct current time display on script &amp; report forms</li> <li>#11402 - Avoid LookupError exception when running scripts with commit disabled</li> <li>#11403 - Fix exception when scheduling a job in the past</li> <li>#11416 - Avoid AttributeError exception when deleting a cabled circuit termination</li> <li>#11433 - Avoid AttributeError exception when generating API schema for views with custom schema</li> <li>#11438 - Fix deletion of scheduled job using non-default queues</li> <li>#11444 - Adding/removing a device from a device bay should record a pre-change snapshot on the device bay</li> <li>#11467 - Correct count on interfaces tab when viewing a VC master device</li> <li>#11483 - Apply configured formatting to custom date fields</li> <li>#11488 - Add missing <code>description</code> fields to several REST API serializers</li> <li>#11497 - Enforce <code>run_script</code> permission when executing scripts via REST API</li> <li>~#11516 - Prevent text highlight utility from interpreting match as regex~</li> <li>#11522 - Correct tag links under contact &amp; tenant list views</li> <li>#11537 - Remove obsolete \"Connection\" column from power feeds table</li> <li>#11544 - Catch ValidationError exception when filtering by invalid MAC address</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v342-2023-01-03",
      "title": "v3.4.2 (2023-01-03)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#9285 - Enable specifying assigned component during bulk import of inventory items</li> <li>#10700 - Match device name when using modules quick search</li> <li>#11121 - Add VM resource totals to cluster view</li> <li>#11156 - Enable selecting assigned component when editing inventory item in UI</li> <li>#11223 - <code>reindex</code> management command should accept app label without model name</li> <li>#11244 - Add controls for saved filters to rack elevations list</li> <li>#11248 - Fix database migration when plugin with search indexer is enabled</li> <li>#11259 - Add support for Redis username configuration</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11280 - Fix errant newlines when exporting interfaces with multiple IP addresses assigned</li> <li>#11290 - Correct reporting of scheduled job duration</li> <li>#11232 - Enable partial &amp; regular expression matching for non-string types in global search</li> <li>#11342 - Correct cable trace URL under \"connection\" tab for device components</li> <li>#11345 - Fix form validation for bulk import of modules</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v341-2022-12-16",
      "title": "v3.4.1 (2022-12-16)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#9971 - Enable ordering of nested group models by name</li> <li>#11214 - Introduce the <code>DEFAULT_LANGUAGE</code> configuration parameter</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11175 - Fix cloning of fields containing special characters</li> <li>#11178 - Pressing enter in quick search box should not trigger bulk operations</li> <li>#11184 - Correct visualization of cable path which splits across multiple circuit terminations</li> <li>#11185 - Fix TemplateSyntaxError when viewing custom script results</li> <li>#11189 - Fix localization of dates &amp; numbers</li> <li>#11205 - Correct cloning behavior for recursively-nested models</li> <li>#11206 - Avoid clearing assigned groups if <code>REMOTE_AUTH_DEFAULT_GROUPS</code> is invalid</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#v340-2022-12-14",
      "title": "v3.4.0 (2022-12-14)",
      "text": "<p>PostgreSQL 11 Required</p> <p>NetBox v3.4 requires PostgreSQL 11 or later.</p>"
    },
    {
      "location": "release-notes/version-3.4/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Device and virtual machine names are no longer case-sensitive. Attempting to create e.g. \"device1\" and \"DEVICE1\" within the same site will raise a validation error.</li> <li>The <code>asn</code>, <code>noc_contact</code>, <code>admin_contact</code>, and <code>portal_url</code> fields have been removed from the provider model. Please replicate any data remaining in these fields to the ASN and contact models introduced in NetBox v3.1 prior to upgrading.</li> <li>The <code>content_type</code> fields on the CustomLink and ExportTemplate models have been renamed to <code>content_types</code> and now support the assignment of multiple content types per object.</li> <li>Within the Python API, the <code>cf</code> property on an object with custom fields now returns deserialized values. For example, a custom field referencing an object will return the object instance rather than its numeric ID. To access the raw serialized values, reference the object's <code>custom_field_data</code> attribute instead.</li> <li>The <code>NetBoxModelCSVForm</code> class has been renamed to <code>NetBoxModelImportForm</code>. Backward compatability with the previous name has been retained for this release, but will be dropped in NetBox v3.5.</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.4/#new-global-search-10560",
      "title": "New Global Search (#10560)",
      "text": "<p>NetBox's global search functionality has been completely overhauled and replaced by a new cache-based lookup. This new implementation provides a much faster, more intelligent search capability. Results are returned in order of precedence regardless of object type, and matching field values are highlighted in the results. Additionally, custom field values are now included in global search results (where enabled). Plugins can also register their own models with the new global search engine.</p>"
    },
    {
      "location": "release-notes/version-3.4/#virtual-device-contexts-7854",
      "title": "Virtual Device Contexts (#7854)",
      "text": "<p>A new model representing virtual device contexts (VDCs) has been added. VDCs are logical partitions of resources within a device that can be managed independently. A VDC is created within a device and may have device interfaces assigned to it. An interface can be allocated to any number of VDCs on its device.</p>"
    },
    {
      "location": "release-notes/version-3.4/#saved-filters-9623",
      "title": "Saved Filters (#9623)",
      "text": "<p>Object lists can be filtered by a variety of different fields and characteristics. Applied filters can now be saved for reuse. For example, the query string</p> <pre><code>?status=active&amp;region_id=12&amp;tenant=acme\n</code></pre> <p>can be saved and applied to future queries as</p> <pre><code>?filter=my-custom-filter\n</code></pre> <p>Saved filters can be kept private, or shared among NetBox users. They can be applied to both UI and REST API searches.</p>"
    },
    {
      "location": "release-notes/version-3.4/#jsonyaml-bulk-imports-4347",
      "title": "JSON/YAML Bulk Imports (#4347)",
      "text": "<p>NetBox's bulk import feature, which was previously limited to CSV-formatted data for most types of objects, has been extended to accept data formatted in JSON or YAML as well. This enables users to directly import objects from a variety of sources without needing to first convert data to CSV. NetBox will attempt to automatically determine the format of import data if not specified by the user.</p>"
    },
    {
      "location": "release-notes/version-3.4/#update-existing-objects-via-bulk-import-7961",
      "title": "Update Existing Objects via Bulk Import (#7961)",
      "text": "<p>NetBox's CSV-based bulk import functionality has been extended to support also modifying existing objects. When an <code>id</code> column is present in the import form, it will be used to infer the object to be modified, rather than a new object being created. All fields (columns) are optional when modifying existing objects.</p>"
    },
    {
      "location": "release-notes/version-3.4/#scheduled-reports-scripts-8366",
      "title": "Scheduled Reports &amp; Scripts (#8366)",
      "text": "<p>Reports and custom scripts can now be scheduled for execution at a desired future time. Background scheduling is handled entirely by the existing RQ workers; there is no need to configure additional tasks to support scheduled jobs. When creating a scheduled job, the user may optionally specify an interval at which the job will run repeatedly (e.g. every 24 hours).</p>"
    },
    {
      "location": "release-notes/version-3.4/#api-for-staged-changes-10851",
      "title": "API for Staged Changes (#10851)",
      "text": "<p>This release introduces a new programmatic API that enables plugins and custom scripts to prepare changes in NetBox without actually committing them to the active database. To stage changes, create and activate a branch using the <code>checkout()</code> context manager. Any changes made within this context will be captured, recorded, and rolled back for future use. Once ready, a branch can be applied to the active database by calling <code>merge()</code>. </p> <p>Experimental Feature</p> <p>This feature is still under active development and considered experimental in nature. Its use in production is strongly discouraged at this time.</p>"
    },
    {
      "location": "release-notes/version-3.4/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#815 - Enable specifying terminations when bulk importing circuits</li> <li>#6003 - Enable the inclusion of custom field values in global search</li> <li>#7376 - Enable the assignment of tags during CSV import</li> <li>#8245 - Enable GraphQL filtering of related objects</li> <li>#8274 - Enable associating a custom link with multiple object types</li> <li>#8485 - Enable journaling for all organizational models</li> <li>#8853 - Introduce the <code>ALLOW_TOKEN_RETRIEVAL</code> config parameter to restrict the display of API tokens</li> <li>#9249 - Device and virtual machine names are no longer case-sensitive</li> <li>#9478 - Add <code>link_peers</code> field to GraphQL types for cabled objects</li> <li>#9654 - Add <code>weight</code> field to racks, device types, and module types</li> <li>#9817 - Add <code>assigned_object</code> field to GraphQL type for IP addresses and L2VPN terminations</li> <li>#9832 - Add <code>mounting_depth</code> field to rack model</li> <li>#9892 - Add optional <code>name</code> field for FHRP groups</li> <li>#10348 - Add decimal custom field type</li> <li>#10371 - Add <code>status</code> field for modules</li> <li>#10545 - Standardize the use of <code>description</code> and <code>comments</code> fields on all primary models</li> <li>#10556 - Include a <code>display</code> field in all GraphQL object types</li> <li>#10595 - Add GraphQL relationships for additional generic foreign key fields</li> <li>#10675 - Add <code>max_weight</code> field to track maximum load capacity for racks</li> <li>#10698 - Omit app label from content type in table columns</li> <li>#10710 - Add <code>status</code> field to WirelessLAN</li> <li>#10761 - Enable associating an export template with multiple object types</li> <li>#10945 - Enable recurring execution of scheduled reports &amp; scripts</li> <li>#11022 - Introduce <code>QUEUE_MAPPINGS</code> configuration parameter to allow customization of background task prioritization</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#bug-fixes-from-v34-beta1",
      "title": "Bug Fixes (from v3.4-beta1)",
      "text": "<ul> <li>#10946 - Fix AttributeError exception when viewing a device with a primary IP and no platform assigned</li> <li>#10948 - Linkify primary IPs for VDCs</li> <li>#10950 - Fix validation of VDC primary IPs</li> <li>#10957 - Add missing VDCs column to interface tables</li> <li>#10973 - Fix device links in VDC table</li> <li>#10980 - Fix view tabs for plugin objects</li> <li>#10982 - Catch <code>NoReverseMatch</code> exception when rendering tabs with no registered URL</li> <li>#10984 - Fix navigation menu expansion for plugin menus comprising multiple words</li> <li>#11000 - Improve validation of YAML-formatted import data</li> <li>#11046 - Fix exception when caching very large field values for search</li> <li>#11154 - Index VM interface MAC address and MTU for global search</li> <li>#11171 - Fix querying of related objects under GraphQL API</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#plugins-api",
      "title": "Plugins API",
      "text": "<ul> <li>#4751 - Enable embedding custom content on core list views via <code>list_buttons()</code> method</li> <li>#8927 - Enable inclusion of plugin models in global search via <code>SearchIndex</code></li> <li>#9071 - Enable plugins to register top-level navigation menus using PluginMenu</li> <li>#9072 - Enable registration of tabbed plugin views for core NetBox models</li> <li>#9880 - Enable plugins to install and register other Django apps via <code>django_apps</code> attribute</li> <li>#9887 - Inspect <code>docs_url</code> property to determine link to model documentation</li> <li>#10314 - Move <code>clone()</code> method from NetBoxModel to CloningMixin</li> <li>#10543 - Introduce <code>get_plugin_config()</code> utility function</li> <li>#10739 - Introduce <code>get_queryset()</code> method on generic views</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#9045 - Remove legacy ASN field from provider model</li> <li>#9046 - Remove legacy contact fields from provider model</li> <li>#10052 - The <code>cf</code> attribute on objects now returns deserialized custom field data</li> <li>#10358 - Raise minimum required PostgreSQL version from 10 to 11</li> <li>#10694 - Emit the <code>post_save</code> signal when creating device components in bulk</li> <li>#10697 - Move application registry into core app</li> <li>#10699 - Remove unused custom <code>import_object()</code> function</li> <li>#10781 - Add support for Python v3.11</li> <li>#10816 - Pass the current request as context when instantiating a FilterSet within UI views</li> <li>#10820 - Switch timezone library from pytz to zoneinfo</li> <li>#10821 - Enable data localization</li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Added the <code>/api/dcim/virtual-device-contexts/</code> endpoint</li> <li>circuits.provider<ul> <li>Removed the <code>asn</code>, <code>noc_contact</code>, <code>admin_contact</code>, and <code>portal_url</code> fields</li> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.Cable<ul> <li>Added <code>description</code> and <code>comments</code> fields</li> </ul> </li> <li>dcim.Device<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Added <code>description</code>, <code>weight</code>, and <code>weight_unit</code> fields</li> </ul> </li> <li>dcim.Module<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.Interface<ul> <li>Added the <code>vdcs</code> field</li> </ul> </li> <li>dcim.Module<ul> <li>Added a required <code>status</code> field</li> </ul> </li> <li>dcim.ModuleType<ul> <li>Added <code>description</code>, <code>weight</code>, and <code>weight_unit</code> fields</li> </ul> </li> <li>dcim.PowerFeed<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.PowerPanel<ul> <li>Added <code>description</code> and <code>comments</code> fields</li> </ul> </li> <li>dcim.Rack<ul> <li>Added <code>description</code>, <code>mounting_depth</code>, <code>weight</code>, <code>max_weight</code>, and <code>weight_unit</code> fields</li> </ul> </li> <li>dcim.RackReservation<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>dcim.VirtualChassis<ul> <li>Added <code>description</code> and <code>comments</code> fields</li> </ul> </li> <li>extras.CustomField<ul> <li>Added a <code>search_weight</code> field</li> </ul> </li> <li>extras.CustomLink<ul> <li>Renamed <code>content_type</code> field to <code>content_types</code></li> </ul> </li> <li>extras.ExportTemplate<ul> <li>Renamed <code>content_type</code> field to <code>content_types</code></li> </ul> </li> <li>extras.JobResult<ul> <li>Added <code>interval</code>, <code>scheduled</code>, and <code>started</code> fields</li> </ul> </li> <li>ipam.Aggregate<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.ASN<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.FHRPGroup<ul> <li>Added <code>name</code> and <code>comments</code> fields</li> </ul> </li> <li>ipam.IPAddress<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.IPRange<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.L2VPN<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.Prefix<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.RouteTarget<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.Service<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.ServiceTemplate<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.VLAN<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.VRF<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>tenancy.Contact<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>virtualization.Cluster<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>wireless.WirelessLAN<ul> <li>Added a required <code>status</code> choice field</li> <li>Added a <code>comments</code> field</li> </ul> </li> <li>wireless.WirelessLink<ul> <li>Added a <code>comments</code> field</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.4/#graphql-api-changes",
      "title": "GraphQL API Changes",
      "text": "<ul> <li>All object types now include a <code>display</code> field</li> <li>All cabled object types now include a <code>link_peers</code> field</li> <li>Add a <code>contacts</code> relationship for all relevant models</li> <li>dcim.Cable<ul> <li>Add A/B terminations fields</li> </ul> </li> <li>dcim.CableTermination<ul> <li>Add <code>termination</code> field</li> </ul> </li> <li>dcim.InventoryItem<ul> <li>Add <code>component</code> field</li> </ul> </li> <li>dcim.InventoryItemTemplate<ul> <li>Add <code>component</code> field</li> </ul> </li> <li>dcim.Rack<ul> <li>Add <code>mounting_depth</code> field</li> </ul> </li> <li>ipam.FHRPGroupAssignment<ul> <li>Add <code>interface</code> field</li> </ul> </li> <li>ipam.IPAddress<ul> <li>Add <code>assigned_object</code> field</li> </ul> </li> <li>ipam.L2VPNTermination<ul> <li>Add <code>assigned_object</code> field</li> </ul> </li> <li>ipam.VLANGroupType<ul> <li>Add <code>scope</code> field</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/",
      "title": "NetBox v3.5",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#v359-2023-08-28",
      "title": "v3.5.9 (2023-08-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#12489 - Dynamically render location and device lists under site and location views</li> <li>#12825 - Display assigned values count per obejct type under custom field view</li> <li>#13313 - Enable filtering IP ranges by containing prefix</li> <li>#13415 - Include request object in custom link renderer on tables</li> <li>#13536 - Move child VLANs list to a separate tab under VLAN group view</li> <li>#13542 - Pass additional HTTP headers through to custom script context</li> <li>#13585 - Introduce <code>empty</code> lookup for numeric value filters</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11272 - Fix localization support for device position field</li> <li>#13358 - Git backend should send HTTP auth headers only if credentials have been defined</li> <li>#13477 - Fix filtering of modified objects after bulk import/update</li> <li>#13478 - Fix filtering of export templates by content type under web UI</li> <li>#13500 - Fix form validation for bulk update of L2VPN terminations via bulk import form</li> <li>#13503 - Fix utilization graph proportions when localization is enabled</li> <li>#13507 - Avoid raising exception for invalid content type during global search</li> <li>#13516 - Plugin utility functions should be importable from <code>extras.plugins</code></li> <li>#13530 - Ensure script log messages can be serialized as JSON data</li> <li>#13543 - Config context tab under device/VM view should not require <code>extras.view_configcontext</code> permission</li> <li>#13544 - Ensure <code>reindex</code> command clears all cached values when not in lazy mode</li> <li>#13556 - Correct REST API representation of VDC status choice</li> <li>#13569 - Fix selection widgets for related interfaces when bulk editing interfaces under device view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v358-2023-08-15",
      "title": "v3.5.8 (2023-08-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#10030 - Ship a validation schema for the device type library with each release</li> <li>#11675 - Add support for specifying import/export route targets during VRF bulk import</li> <li>#11922 - Automatically populate any VDC assignments from the parent when adding a child interface via the UI</li> <li>#12889 - Add 400GE CFP2 interface type</li> <li>#13033 - Add human-friendly speed column to interfaces table</li> <li>#13151 - Add \"assigned\" filter for IP addresses</li> <li>#13368 - List installed plugins on the server error report page</li> <li>#13442 - Add 200 and 400 Gbps speeds to dropdown choices on interface form</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11578 - Fix schema definition for available IP &amp; VLAN REST API endpoints</li> <li>#12639 - Raise validation error for invalid alphanumeric ranges when creating objects</li> <li>#12665 - Avoid escaping semicolons when rendering custom links</li> <li>#12750 - Automatically delete an AutoSyncRecord when its object is deleted</li> <li>#13343 - Fix filtering of circuits under provider network view</li> <li>#13369 - Fix job termination status for failed reports</li> <li>#13414 - Fix support for \"hide-if-unset\" custom fields on bulk import forms</li> <li>#13446 - Don't disable bulk edit/delete buttons after deselecting \"select all\" checkbox</li> <li>#13451 - Disable table ordering for custom link columns</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v357-2023-07-28",
      "title": "v3.5.7 (2023-07-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#11803 - Move non-rack devices list to a separate tab under the rack view</li> <li>#12625 - Mask sensitive parameters when viewing a configured data source</li> <li>#13009 - Add IEC 10609-1 and NBR 14136 power port &amp; outlet types</li> <li>#13097 - Implement a faster initial poll for report &amp; script results</li> <li>#13234 - Add 100GBASE-X-DSFP and 100GBASE-X-SFPDD interface types</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13051 - Fix Markdown support for table cell alignment</li> <li>#13167 - Fix missing script results when fetched via REST API</li> <li>#13233 - Remove extraneous VLAN group field from bulk edit form for interfaces</li> <li>#13237 - Permit unauthenticated access to content types REST API endpoint when <code>LOGIN_REQUIRED</code> is false</li> <li>#13285 - Fix exception when importing device type missing rack unit height value</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v356-2023-07-10",
      "title": "v3.5.6 (2023-07-10)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13061 - Fix display of last result for scripts &amp; reports with a custom name defined</li> <li>#13096 - Hide scheduling fields for all scripts with scheduling disabled</li> <li>#13105 - Fix exception when attempting to allocate next available IP address from prefix marked as utilized</li> <li>#13116 - Catch ProgrammingError exception when starting NetBox without pre-populated content types</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v355-2023-07-06",
      "title": "v3.5.5 (2023-07-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#11738 - Annotate VLAN group utilization</li> <li>#12499 - Add \"copy to clipboard\" buttons in UI for IP addresses</li> <li>#12945 - Add 100GE QSFP-DD interface type</li> <li>#12955 - Include additional contact details on contact assignments table</li> <li>#13065 - Associate contact assignments with their objects in the change log</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11335 - Exclude stale content types when retrieving changelog records</li> <li>#12533 - Fix REST API validation of null values for several interface attributes</li> <li>#12579 - Fix exception when clicking \"create and add another\" to add a cable</li> <li>#12617 - Populate prechange snapshot on parent object when assigning/removing primary IP address</li> <li>#12760 - Avoid rendering partial HTMX responses when restoring browser tabs</li> <li>#12842 - Improve handling of exceptions when loading reports</li> <li>#12849 - Fix LDAP group permissions assignment for API clients</li> <li>#12951 - Display consistent parent information for each termination under cable view</li> <li>#12953 - Fix designation of primary IP addresses during interface assignment</li> <li>#12960 - Fix OpenAPI schema for various choice fields</li> <li>#12961 - Set correct return URL for object contacts tabs</li> <li>#12966 - Avoid catching database exceptions when maintenance mode is disabled</li> <li>#12975 - Correct URL for VirtualDeviceContext API serializer</li> <li>#12977 - Fix URL parameters for object count dashboard widgets</li> <li>#12983 - Avoid erroneously clearing many-to-many assignments during bulk edit</li> <li>#12989 - Fix bulk import of tags for device &amp; module types</li> <li>#13011 - Do not escape commas when rendering custom links</li> <li>#13047 - Correct ASN count under ASN ranges list</li> <li>#13056 - Add <code>config_template</code> field to device API serializer</li> <li>#13092 - Allow nullifying power port max &amp; allocated draw values during bulk edit</li> <li>#13100 - Fix ValueError exception when searching for virtual device context for non-numeric values</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v354-2023-06-20",
      "title": "v3.5.4 (2023-06-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#12828 - Define colors for staged change action choices</li> <li>#12847 - Include \"add\" button on all device &amp; virtual machine component list views</li> <li>#12862 - Add menu navigation button to add wireless links directly</li> <li>#12865 - Add \"add\" buttons for reports &amp; scripts to navigation menu</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#12474 - Update cable terminations when assigning a location to a new site</li> <li>#12622 - Permit the assignment of non-site VLANs to prefixes assigned to a site</li> <li>#12682 - Correct OpenAPI schema for connected device API endpoint</li> <li>#12687 - Allow the assignment of all /31 IP addresses to interfaces</li> <li>#12818 - Fix permissions evaluation when queuing a data sync job</li> <li>#12822 - Fix encoding of whitespace in custom link URLs</li> <li>#12838 - Correct rounding of rack power utilization values</li> <li>#12845 - Fix pagination of objects for related IP addresses table</li> <li>#12850 - Fix table configuration modal for the contact assignments list</li> <li>#12885 - Permit mounting of devices in rack unit 100</li> <li>#12914 - Clear stored ordering from user config when cleared by request</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v353-2023-06-02",
      "title": "v3.5.3 (2023-06-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#9876 - Improve support for matching tags in conditional rules</li> <li>#12015 - Add device type &amp; role filters for device components</li> <li>#12470 - Collapse context data by default when viewing a rendered device configuration</li> <li>#12562 - Record client IP address when logging authentication failures</li> <li>#12597 - Add an option to hide custom fields only if unset</li> <li>#12599 - Apply filter parameters to links in object count dashboard widgets</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#7503 - Improve rack space validation when creating multiple devices via REST API</li> <li>#11539 - Fix exception when applying \"empty\" filter lookup with invalid value</li> <li>#11934 - Prevent reassignment of an IP address designated as primary for its parent object</li> <li>#12538 - Redirect user to originating view after editing/deleting an image attachment</li> <li>#12627 - Restore hover preview for embedded image attachment tables</li> <li>#12694 - Strip leading &amp; trailing whitespace from custom link URL &amp; text</li> <li>#12702 - Fix sizing of rear port selection widget on front port template creation form</li> <li>#12715 - Use contact assignments table to display the contacts assigned to an object</li> <li>#12730 - Fix extraneous contacts listed in object contact assignments view</li> <li>#12742 - Object counts dashboard widget should support URL-compatible query filters</li> <li>#12762 - Fix GraphiQL UI by reverting graphene-django to earlier version</li> <li>#12745 - Escape display text in API-backed selection widgets</li> <li>#12779 - Correct arithmetic for converting inches to meters</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v352-2023-05-22",
      "title": "v3.5.2 (2023-05-22)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#7671 - Introduce <code>REMOTE_AUTH_AUTO_CREATE_GROUPS</code> config parameter to enable the automatic creation of new groups when remote authentication is in use</li> <li>#9068 - Disallow the assignment of network/broadcast IP addresses to interfaces</li> <li>#11017 - Increase the maximum values for allocated and maximum power draws</li> <li>#11233 - Intercept and cleanly report errors upon attempted database writes when maintenance mode is enabled</li> <li>#11599 - Move contacts panels to separate tabs under object views</li> <li>#11670 - Enable setting device type &amp; module type weight via bulk import</li> <li>#11900 - Add an outline to the reservation markers on rack elevations</li> <li>#12131 - Show custom field description as an icon tooltip under object views</li> <li>#12223 - Add columns for parent device bay and position to devices list</li> <li>#12233 - Move related IP addresses table to a separate tab</li> <li>#12286 - Show height and total weight under device view</li> <li>#12323 - Add 100GE CXP interface type</li> <li>#12327 - Introduce the ability to automatically retry failed background jobs</li> <li>#12498 - Hide map button if <code>MAPS_URL</code> is empty</li> <li>#12548 - Optimize REST API performance when retrieving interfaces with L2VPN assignments</li> <li>#12554 - Allow customization or disabling of the maintenance mode banner</li> <li>#12605 - Add LX.5 port types</li> <li>#12629 - Add 400GE CDFP and CFP8 interface types</li> <li>#12678 - Add 200GE QSFP-DD interface type</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#10686 - Enable specifying termination object by virtual chassis master when importing cables</li> <li>#11619 - Enable assigning VLANs without a site to interfaces during bulk edit</li> <li>#12468 - Custom field names should not permit double underscores</li> <li>#12550 - Fix rear port selection widget under front port creation form</li> <li>#12570 - Disable ordering of synchronized object tables by the \"synced\" attribute</li> <li>#12594 - Enable selecting config context as object type in object counts dashboard widget</li> <li>#12642 - Fix bulk tenant assignment via cluster import form</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v351-2023-05-05",
      "title": "v3.5.1 (2023-05-05)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#10759 - Support Markdown rendering for custom field descriptions</li> <li>#11190 - Including systemd service &amp; timer configurations for housekeeping tasks</li> <li>#11422 - Match on power panel name when searching for power feeds</li> <li>#11504 - Add filter to select individual racks under rack elevations view</li> <li>#11652 - Add a module status column to module bay tables</li> <li>#11791 - Enable configuration of custom database backend via <code>ENGINE</code> parameter</li> <li>#11801 - Include device description within rack elevation tooltip</li> <li>#11932 - Introduce a list view for image attachments, orderable by date and other attributes</li> <li>#12122 - Enable bulk import oj journal entries</li> <li>#12245 - Enable the assignment of wireless LANs to interfaces under bulk edit</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#10757 - Simplify IP address interface and NAT IP assignment form fields to avoid confusion</li> <li>#11715 - Prefix within a VRF should list global prefixes as parents only if they are containers</li> <li>#12363 - Fix whitespace for paragraph elements in Markdown-rendered table columns</li> <li>#12367 - Fix <code>RelatedObjectDoesNotExist</code> exception under certain conditions (regression from #11550)</li> <li>#12380 - Allow selecting object change as model under object list widget configuration</li> <li>#12384 - Add a three-second timeout for RSS reader widget</li> <li>#12395 - Fix \"create &amp; add another\" action for objects with custom fields</li> <li>#12396 - Provider account should not be a required field in REST API serializer</li> <li>#12400 - Validate default values for object and multi-object custom fields</li> <li>#12401 - Support the creation of front ports without a pre-populated device ID</li> <li>#12405 - Fix filtering for VLAN groups displayed under site view</li> <li>#12410 - Fix base path for OpenAPI schema (fixes Swagger UI requests)</li> <li>#12416 - Fix <code>FileNotFoundError</code> exception when a managed script file is missing from disk</li> <li>#12412 - Device/VM interface MAC addresses can be nullified via REST API</li> <li>#12415 - Fix <code>ImportError</code> exception when running RQ worker</li> <li>#12433 - Correct the application of URL query parameters for object list dashboard widgets</li> <li>#12436 - Remove extraneous \"add\" button from contact assignments list</li> <li>#12463 - Fix the association of completed jobs with reports &amp; scripts in the REST API</li> <li>#12464 - Apply credentials for git data source only when connecting via HTTP/S</li> <li>#12476 - Fix <code>TypeError</code> exception when running the <code>runscript</code> management command</li> <li>#12483 - Fix git remote data syncing when with HTTP proxies defined</li> <li>#12496 - Remove obsolete account field from provider UI view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#v350-2023-04-27",
      "title": "v3.5.0 (2023-04-27)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>The <code>account</code> field has been removed from the provider model. This information is now tracked using the new provider account model. Multiple accounts can be assigned per provider.</li> <li>A minimum length of 50 characters is now enforced for the <code>SECRET_KEY</code> configuration parameter.</li> <li>The JobResult model has been moved from the <code>extras</code> app to <code>core</code> and renamed to Job. Accordingly, its REST API endpoint has been moved from <code>/api/extras/job-results/</code> to <code>/api/core/jobs/</code>.</li> <li>The <code>obj_type</code> field on the Job model (previously JobResult) has been renamed to <code>object_type</code> for consistency with other models.</li> <li>The <code>JOBRESULT_RETENTION</code> configuration parameter has been renamed to <code>JOB_RETENTION</code>.</li> <li>The <code>obj</code> context variable is no longer passed when rendering custom links: Use <code>object</code> instead.</li> <li>The REST API schema is now generated using the OpenAPI 3.0 spec</li> <li>The URLs for the REST API schema documentation have changed:<ul> <li><code>/api/docs/</code> is now <code>/api/schema/swagger-ui/</code></li> <li><code>/api/redoc/</code> is now <code>/api/schema/redoc/</code></li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.5/#customizable-dashboard-9416",
      "title": "Customizable Dashboard (#9416)",
      "text": "<p>The static home view has been replaced with a fully customizable dashboard. Users can construct and rearrange their own personal dashboard to convey the information most pertinent to them. Supported widgets include object statistics, configurable object lists, RSS feeds, and notes, and we expect to continue adding new widgets over time.</p>"
    },
    {
      "location": "release-notes/version-3.5/#remote-data-sources-11558",
      "title": "Remote Data Sources (#11558)",
      "text": "<p>NetBox now has the ability to synchronize arbitrary data from external sources through the new DataSource and DataFile models. Synchronized files are stored in the PostgreSQL database, and may be referenced and consumed by other NetBox models, such as export templates and config contexts. Currently, replication from local filesystem paths, git repositories, and Amazon S3 buckets is supported, and we expect to introduce additional backends in the near future.</p>"
    },
    {
      "location": "release-notes/version-3.5/#configuration-template-rendering-11559",
      "title": "Configuration Template Rendering (#11559)",
      "text": "<p>This release introduces the ability to render device configurations from Jinja2 templates natively within NetBox, via both the UI and REST API. The new ConfigTemplate model stores template code (which may be defined locally or sourced from remote data files). The rendering engine passes data gleaned from both config contexts and request parameters to generate complete configurations suitable for direct application to network devices.</p>"
    },
    {
      "location": "release-notes/version-3.5/#napalm-integration-plugin-10520",
      "title": "NAPALM Integration Plugin (#10520)",
      "text": "<p>The NAPALM integration feature found in previous NetBox releases has been moved from the core application to a dedicated plugin. This allows greater control over the feature's configuration and will unlock additional potential as a separate project.</p>"
    },
    {
      "location": "release-notes/version-3.5/#asn-ranges-8550",
      "title": "ASN Ranges (#8550)",
      "text": "<p>A new ASN range model has been introduced to facilitate the provisioning of new autonomous system numbers from within a prescribed range. For example, an administrator might define an ASN range of 65000-65099 to be used for internal site identification. This includes a REST API endpoint suitable for automatic provisioning, very similar to the allocation of available prefixes and IP addresses.</p>"
    },
    {
      "location": "release-notes/version-3.5/#provider-accounts-9047",
      "title": "Provider Accounts (#9047)",
      "text": "<p>A new model has been introduced to represent individual accounts within a common circuit provider. This replaces the <code>account</code> field on the provider model, enabling users to track multiple accounts per provider. New provider account instances will be created automatically during upgrade for all providers which currently have an account assigned. The assignment of individual circuits to a provider account remains optional.</p>"
    },
    {
      "location": "release-notes/version-3.5/#job-triggered-webhooks-8958",
      "title": "Job-Triggered Webhooks (#8958)",
      "text": "<p>Two new webhook trigger events have been introduced: <code>job_start</code> and <code>job_end</code>. These enable users to configure webhook to trigger when a background job starts or ends, respectively. This new functionality can be used, for example, to inform a remote system when a custom script has been executed.</p>"
    },
    {
      "location": "release-notes/version-3.5/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#7947 - Enable marking IP ranges as fully utilized</li> <li>#8184 - Employ HTMX to dynamically render tables listing related objects</li> <li>#8272 - Support bridge relationships among device type interfaces</li> <li>#8749 - Support replicating custom field values when cloning an object</li> <li>#9073 - Enable syncing config context data from remote sources</li> <li>#9653 - Enable setting a default platform for device types</li> <li>#10054 - Introduce advanced object selector for UI forms</li> <li>#10242 - Redirect to filtered objects list after bulk import</li> <li>#10374 - Require unique tenant names &amp; slugs per group</li> <li>#10729 - Add date &amp; time custom field type</li> <li>#11029 - Enable change logging for cable terminations</li> <li>#11254 - Introduce the <code>X-Request-ID</code> HTTP header to annotate the unique ID of each request for change logging</li> <li>#11255 - Introduce the <code>scheduling_enabled</code> settings for reports &amp; scripts</li> <li>#11291 - Optimized GraphQL API request handling</li> <li>#11440 - Add an <code>enabled</code> field for device type interfaces</li> <li>#11494 - Enable filtering objects by create/update request IDs</li> <li>#11517 - Standardize the inclusion of related objects across the entire UI</li> <li>#11584 - Add a list view for contact assignments</li> <li>#11625 - Add HTMX support to ObjectEditView</li> <li>#11693 - Enable syncing export template content from remote sources</li> <li>#11780 - Enable loading import data from remote sources</li> <li>#11790 - Create database indexes for all generic foreign keys</li> <li>#11968 - Add navigation menu buttons to create device &amp; VM components</li> <li>#12068 - Enable generic foreign key relationships from jobs to NetBox objects</li> <li>#12085 - Add a file source view for reports</li> <li>#12218 - Provide more relevant API endpoint descriptions in schema</li> <li>#12343 - Enforce a minimum length for <code>SECRET_KEY</code> configuration parameter</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#bug-fixes-from-beta2",
      "title": "Bug Fixes (From Beta2)",
      "text": "<ul> <li>#12149 - Fix OpenAPI schema warnings relating to enum collisions</li> <li>#12195 - Fix exception when setting IP address role to null via REST API</li> <li>#12256 - Fix OpenAPI schema warnings relating to nested serializers</li> <li>#12278 - Fix schema warnings related to IPAddressField</li> <li>#12288 - Include <code>servers</code> definition in OpenAPI spec</li> <li>#12299 - Fix object list widget support for filtering by multiple values</li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#9608 - Upgrade REST API schema to OpenAPI 3.0</li> <li>#10604 - Remove unused <code>extra_tabs</code> block from <code>object.html</code> generic template</li> <li>#10923 - Remove unused <code>NetBoxModelCSVForm</code> class (replaced by <code>NetBoxModelImportForm</code>)</li> <li>#11489 - Consolidated several middleware classes</li> <li>#11611 - Refactor API viewset classes and introduce NetBoxReadOnlyModelViewSet</li> <li>#11694 - Remove obsolete <code>SmallTextarea</code> form widget</li> <li>#11737 - <code>ChangeLoggedModel</code> now inherits <code>WebhooksMixin</code></li> <li>#11765 - Retire the <code>StaticSelect</code> and <code>StaticSelectMultiple</code> form widgets</li> <li>#11955 - Remove the unused <code>CSVDataField</code> and <code>CSVFileField</code> classes</li> <li>#12067 - Move &amp; rename <code>extras.JobResult</code> to <code>core.Job</code></li> </ul>"
    },
    {
      "location": "release-notes/version-3.5/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>All API responses now include a <code>X-Request-ID</code> HTTP header indicating the request's unique ID</li> <li>Introduced new endpoints:<ul> <li><code>/api/circuits/provider-accounts/</code></li> <li><code>/api/core/data-files/</code></li> <li><code>/api/core/data-sources/</code></li> <li><code>/api/dcim/device/&lt;id&gt;/render-config/</code></li> <li><code>/api/extras/config-templates/</code></li> <li><code>/api/ipam/asn-ranges/</code></li> </ul> </li> <li>Removed existing endpoints:<ul> <li><code>/api/dcim/device/&lt;id&gt;/napalm/</code></li> </ul> </li> <li>circuits.Circuit<ul> <li>Added the optional <code>account</code> foreign key to ProviderAccount</li> </ul> </li> <li>circuits.Provider<ul> <li>Removed the <code>account</code> field</li> </ul> </li> <li>dcim.CableTermination<ul> <li>Added <code>default_platform</code> foreign key (optional)</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Added <code>default_platform</code> foreign key (optional)</li> </ul> </li> <li>dcim.InterfaceTemplate<ul> <li>Added <code>enabled</code> boolean field</li> <li>Added optional <code>bridge</code> foreign key (optional)</li> </ul> </li> <li>extras.ConfigContext<ul> <li>Added <code>data_source</code>, <code>data_file</code>, <code>data_path</code>, and <code>data_synced</code> fields to enable syncing data from remote sources</li> </ul> </li> <li>extras.ExportTemplate<ul> <li>Added <code>data_source</code>, <code>data_file</code>, <code>data_path</code>, and <code>data_synced</code> fields to enable syncing content from remote sources</li> </ul> </li> <li>extras.Webhook<ul> <li>Added <code>type_job_start</code> and <code>type_job_end</code> boolean fields</li> </ul> </li> <li>ipam.ASN<ul> <li>The <code>rir</code> field now fully represents the assigned RIR (if any)</li> </ul> </li> <li>ipam.IPRange<ul> <li>Added the <code>mark_utilized</code> boolean field (default: false)</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/",
      "title": "NetBox v3.6",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#v369-2023-12-28",
      "title": "v3.6.9 (2023-12-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#14631 - All models can be filtered and searched by their description field (where applicable)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14482 - Fix validation error when attempting to move a primary IP address to a new parent object</li> <li>#14620 - Permit setting device type U height to 0 during bulk edit</li> <li>#14621 - Fix error when using the device search filter</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v368-2023-12-27",
      "title": "v3.6.8 (2023-12-27)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#11039 - List parent prefixes under IP range view</li> <li>#14507 - Print new NetBox version when running upgrade script</li> <li>#14538 - Add the <code>available_at_site</code> filter for VLANs</li> <li>#14596 - Match against description field when searching for devices</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11816 - Correct display of error message when attempting invalid VLAN site &amp; group assignment</li> <li>#12731 - Fix custom validation for many-to-many fields</li> <li>#13606 - Fix filtering custom multi-choice fields by null</li> <li>#13649 - Correct calculation of absolute lengths for zero-length cables</li> <li>#13812 - Update status of remote data source when syncing fails via <code>syncdatasource</code> management command</li> <li>#13909 - Fix cloning of objects which have a multi-choice custom field</li> <li>#14517 - Ensure reservations tab is always displayed under rack view</li> <li>#14532 - Device/VM change record should accurately reflect when primary/OOB IP is deleted</li> <li>#14549 - Fix association of job results when executing scripts via <code>runscript</code> management command</li> <li>#14560 - Do not escape exclamation marks in custom link URLs</li> <li>#14575 - Fix display of the tags column under VDC table</li> <li>#14613 - Fix display of current configuration parameters in UI</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v367-2023-12-15",
      "title": "v3.6.7 (2023-12-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#12751 - Designate fields to expand by default for object selector widget</li> <li>#14148 - Add tags column to L2VPN terminations column</li> <li>#14390 - Add <code>classes</code> parameter to <code>copy_content</code> template tag</li> <li>#14467 - Change custom field choice delimiter from comma to colon</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13983 - Fix bulk import support for custom field choices</li> <li>#14081 - Ensure accuracy of parent object counters when deleting related objects</li> <li>#14249 - Fix server error when authenticating via IP-restricted API tokens using IPv6</li> <li>#14392 - Fix bulk operations for plugin models under admin UI</li> <li>#14397 - Fix exception on non-JSON request to <code>/available-ips/</code> API endpoints</li> <li>#14401 - Rack <code>starting_unit</code> cannot be zero</li> <li>#14432 - Populate custom field default values for components when creating a device</li> <li>#14448 - Fix exception when creating a power feed with rack and panel in different sites</li> <li>#14505 - Fix the assignment of tags to L2VPN terminations</li> <li>#14512 - Remove unneeded annotations from queries when using REST API brief mode</li> <li>#14515 - Ensure user config is created automatically for all user accounts</li> <li>#14522 - Fix filtering contact assignments by group</li> <li>#14533 - Fix quick search under VLAN group VLANs list</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v366-2023-11-29",
      "title": "v3.6.6 (2023-11-29)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#13735 - Show complete region hierarchy in UI for all relevant objects</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14056 - Record a pre-change snapshot when bulk editing objects via CSV</li> <li>#14187 - Raise a validation error when attempting to create a duplicate script or report</li> <li>#14199 - Fix jobs list for reports with a custom name</li> <li>#14239 - Fix CustomFieldChoiceSet search filter</li> <li>#14242 - Enable export templates for contact assignments</li> <li>#14299 - Webhook timestamps should be in proper ISO 8601 format</li> <li>#14325 - Fix numeric ordering of service ports</li> <li>#14339 - Correctly hash local user password when set via REST API</li> <li>#14343 - Fix ordering ASN table by ASDOT column</li> <li>#14346 - Fix running reports via REST API</li> <li>#14349 - Fix custom validation support for remote data sources</li> <li>#14363 - Fix bulk editing of interfaces assigned to VM with no cluster</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v365-2023-11-09",
      "title": "v3.6.5 (2023-11-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#12741 - Add selector widget to platform field on device &amp; virtual machine forms</li> <li>#13022 - Introduce support for assigning IP addresses when bulk importing services</li> <li>#13587 - Annotate units of measurement on power port table columns</li> <li>#13669 - Add bulk import button to contact assignments list view</li> <li>#13723 - Add inventory items column to interfaces table</li> <li>#13743 - Add site column to power feeds table</li> <li>#13936 - Add primary IPv4 and IPv6 filters for virtual machines and VDCs</li> <li>#13951 - Add device &amp; virtual machine fields to service filter form</li> <li>#14085 - Strip trailing port number from value returned by <code>get_client_ip()</code></li> <li>#14101 - Add greater/less than mask length filters for IP addresses</li> <li>#14112 - Add tab listing child items under inventory item view</li> <li>#14113 - Add optional parent column to inventory items table</li> <li>#14220 - Order available columns alphabetically in table configuration form</li> <li>#14221 - Add contact group column on contact assignments table</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14033 - Avoid exception when attempting to connect both ends of a cable to the same object</li> <li>#14117 - Check that enough rear port positions have been selected to accommodate the number of front ports being created</li> <li>#14166 - Permit user login when maintenance mode is enabled</li> <li>#14182 - Ensure the active configuration is restored upon clearing cache</li> <li>#14195 - Correct permissions evaluation for ASN range child ASNs view</li> <li>#14223 - Disable ordering of jobs by assigned object</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v364-2023-10-17",
      "title": "v3.6.4 (2023-10-17)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#12831 - Include circuit description in cable trace SVG image</li> <li>#12872 - Introduce the <code>DATA_UPLOAD_MAX_MEMORY_SIZE</code> configuration parameter</li> <li>#13950 - Display custom choice field labels rather than values in UI</li> <li>#13957 - Add DNS name filter on IP addresses list</li> <li>#13962 - Add a copy-to-clipboard button for API tokens</li> <li>#13972 - Introduce a filter to find unterminated cables</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11987 - Fix validation of bulk cable updates via bulk import form</li> <li>#12328 - Ensure generic foreign key relationships are populated in REST API serializations of objects</li> <li>#12336 - Employ PostgreSQL advisory locks to avoid duplicate MPTT tree IDs when bulk creating objects</li> <li>#13064 - Fix resetting of checkbox fields triggered by HTMX form re-rendering</li> <li>#13440 - Fix support for assigning a tenant when creating \"next available\" VLANs via the REST API</li> <li>#13746 - Fix support for setting custom field values when creating \"next available\" IP addresses via the REST API</li> <li>#13872 - Add CSV delimiter field to file upload tab under bulk object upload views</li> <li>#13876 - Fix support for assigning an interface when creating \"next available\" IP addresses via the REST API</li> <li>#13910 - Correct \"add device\" button link under platform view</li> <li>#13944 - Correct serialization of several report attributes in the REST API</li> <li>#13966 - Restore \"last login\" column on users table</li> <li>#14013 - Fix device role filter choices under inventory items list filters</li> <li>#14023 - Fix exception when bulk disconnecting interfaces connected to the same cable</li> <li>#14025 - Fix exception when viewing a script that begins with the same name as another</li> <li>#14026 - Optimize the automatic creation of available IP addresses for large prefixes</li> <li>#14042 - Fix duplicated child object count decrements when removing objects in bulk</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v363-2023-09-26",
      "title": "v3.6.3 (2023-09-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#12732 - Add toggle to hide disconnected interfaces under device view</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11079 - Enable tracing cable paths across multiple cables in parallel</li> <li>#11901 - Fix <code>IndexError</code> exception when manipulating terminations for existing cables via REST API</li> <li>#13506 - Enable creating a config template which references a data file via the REST API</li> <li>#13666 - Cleanly handle reports without any test methods defined</li> <li>#13839 - Restore original text color for HTML code elements</li> <li>#13843 - Fix assignment of VLAN group scope during bulk edit</li> <li>#13845 - Fix <code>AttributeError</code> exception when attaching front/rear images to a device type</li> <li>#13849 - Fix <code>KeyError</code> exception when deleting an object which references a configured choice value that has been removed</li> <li>#13859 - Fix invalid response when searching for custom choice field values returns no matches</li> <li>#13864 - Correct default background color for dashboard widget headers</li> <li>#13871 - Fix rack filtering for empty location during device bulk import</li> <li>#13891 - Allow designating an IP address as primary for device/VM while assigning it to an interface</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v362-2023-09-20",
      "title": "v3.6.2 (2023-09-20)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#13245 - Add interface types for QSFP112 and OSFP-RHS</li> <li>#13563 - Add support for other delimiting characters when using CSV import</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11209 - Hide available IP/VLAN listing when sorting under a parent prefix or VLAN range</li> <li>#11617 - Raise validation error on the presence of an unknown CSV header during bulk import</li> <li>#12219 - Fix dashboard widget heading contrast under dark mode</li> <li>#12685 - Render Markdown in custom field help text on object edit forms</li> <li>#13653 - Tweak color of error text to improve legibility</li> <li>#13701 - Correct display of power feed legs under device view</li> <li>#13706 - Restore extra filters dropdown on device interfaces list</li> <li>#13721 - Filter VLAN choices by selected site (if any) when creating a prefix</li> <li>#13727 - Fix exception when viewing rendered config for VM without a role assigned</li> <li>#13745 - Optimize counter field migrations for large databases</li> <li>#13756 - Fix exception when sorting module bay list by installed module status</li> <li>#13757 - Fix RecursionError exception when assigning config context to a device type</li> <li>#13767 - Fix support for comments when creating a new service via web UI</li> <li>#13782 - Fix tag exclusion support for contact assignments</li> <li>#13791 - Preserve whitespace in values when performing bulk rename of objects via web UI</li> <li>#13809 - Avoid TypeError exception when editing active configuration with statically defined <code>CUSTOM_VALIDATORS</code></li> <li>#13813 - Fix member count for newly created virtual chassis</li> <li>#13818 - Restore missing tags field on L2VPN termination edit form</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v361-2023-09-06",
      "title": "v3.6.1 (2023-09-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#12870 - Support setting token expiration time using the provisioning API endpoint</li> <li>#13444 - Add bulk rename functionality to the global device component lists</li> <li>#13638 - Add optional <code>staff_only</code> attribute to MenuItem</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#12553 - Ensure <code>family</code> attribute is always returned when creating aggregates and prefixes via REST API</li> <li>#13619 - Fix exception when viewing IP address assigned to a virtual machine</li> <li>#13596 - Always display \"render config\" tab for devices and virtual machines</li> <li>#13620 - Show admin menu items only for staff users</li> <li>#13622 - Fix exception when viewing current config and no revisions have been created</li> <li>#13626 - Correct filtering of recent activity list under user view</li> <li>#13628 - Remove stale references to obsolete NAPALM integration</li> <li>#13630 - Fix display of active status under user view</li> <li>#13632 - Avoid raising exception when checking if FHRP group IP address is primary</li> <li>#13642 - Suppress warning about unreflected model changes when applying migrations</li> <li>#13657 - Fix decoding of data file content</li> <li>#13674 - Fix retrieving individual report via REST API</li> <li>#13682 - Fix error message returned when validation of custom field default value fails</li> <li>#13684 - Enable modifying the configuration when maintenance mode is enabled</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#v360-2023-08-30",
      "title": "v3.6.0 (2023-08-30)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>PostgreSQL 11 is no longer supported (dropped in Django 4.2). NetBox v3.6 requires PostgreSQL 12 or later.</li> <li>The <code>boto3</code> and <code>dulwich</code> packages are no longer installed automatically. If needed for S3/git remote data backend support, add them to <code>local_requirements.txt</code> to ensure their installation.</li> <li>The <code>device_role</code> field on the Device model has been renamed to <code>role</code>. The <code>device_role</code> field has been temporarily retained on the REST API serializer for devices for backward compatibility, but is read-only.</li> <li>The <code>choices</code> array field has been removed from the CustomField model. Any defined choices are automatically migrated to CustomFieldChoiceSets, accessible via the new <code>choice_set</code> field on the CustomField model.</li> <li>The <code>napalm_driver</code> and <code>napalm_args</code> fields (which were deprecated in v3.5) have been removed from the Platform model.</li> <li>The <code>device</code> and <code>device_id</code> filter for interfaces will no longer include interfaces from virtual chassis peers. Two new filters, <code>virtual_chassis_member</code> and <code>virtual_chassis_member_id</code>, have been introduced to match all interfaces belonging to the specified device's virtual chassis (if any).</li> <li>Reports and scripts are now returned within a <code>results</code> list when fetched via the REST API, consistent with other models.</li> <li>Superusers can no longer retrieve API token keys via the web UI if <code>ALLOW_TOKEN_RETRIEVAL</code> is disabled. (The admin view has been removed per #13044.)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.6/#relocated-admin-ui-views-12589-12590-12591-13044",
      "title": "Relocated Admin UI Views (#12589, #12590, #12591, #13044)",
      "text": "<p>Management views for the following object types, previously available only under the backend admin interface, have been relocated to the primary user interface:</p> <ul> <li>Users</li> <li>Groups</li> <li>Object permissions</li> <li>API tokens</li> <li>Configuration revisions</li> </ul> <p>This migration provides a more consistent user experience and unlocks advanced functionality not feasible using Django's built-in views. The admin UI is scheduled for complete removal in NetBox v4.0.</p>"
    },
    {
      "location": "release-notes/version-3.6/#configurable-default-permissions-13038",
      "title": "Configurable Default Permissions (#13038)",
      "text": "<p>Administrators now have the option of configuring default permissions for all users globally, regardless of explicit permission or group assignments granted in the database. This is accomplished by defining the <code>DEFAULT_PERMISSIONS</code> configuration parameter. By default, all users are granted permission to manage their own bookmarks and API tokens.</p>"
    },
    {
      "location": "release-notes/version-3.6/#user-bookmarks-8248",
      "title": "User Bookmarks (#8248)",
      "text": "<p>Users can now bookmark their favorite objects in NetBox. Bookmarks are accessible under each user's personal bookmarks list, and can also be added as a dashboard widget.</p>"
    },
    {
      "location": "release-notes/version-3.6/#custom-field-choice-sets-12988",
      "title": "Custom Field Choice Sets (#12988)",
      "text": "<p>Selection and multi-select custom fields now employ discrete, reusable choice sets containing the valid options for each field. A choice set may be shared by multiple custom fields. Additionally, each choice within a set can now specify both a raw value and a human-friendly label (see #13241). Pre-existing custom field choices are migrated to choice sets automatically during the upgrade process.</p>"
    },
    {
      "location": "release-notes/version-3.6/#pre-defined-location-choices-for-custom-fields-12194",
      "title": "Pre-Defined Location Choices for Custom Fields (#12194)",
      "text": "<p>Users now have the option to employ one of several pre-defined sets of choices when creating a custom field. These include:</p> <ul> <li>IATA airport codes</li> <li>ISO 3166 country codes</li> <li>UN/LOCODE location identifiers</li> </ul> <p>When defining a choice set, one of the above can be employed as the base set, with the option to define extra, custom choices as well.</p>"
    },
    {
      "location": "release-notes/version-3.6/#restrict-tag-usage-by-object-type-11541",
      "title": "Restrict Tag Usage by Object Type (#11541)",
      "text": "<p>Tags may now be restricted to use with designated object types. Tags that have no specific object types assigned may be used with any object that supports tag assignment.</p>"
    },
    {
      "location": "release-notes/version-3.6/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#6347 - Cache the number of assigned components for devices and virtual machines</li> <li>#8137 - Add a field for designating the out-of-band (OOB) IP address for devices</li> <li>#10197 - Cache the number of member devices on each virtual chassis</li> <li>#11305 - Add GPS coordinate fields to the device model</li> <li>#11478 - Introduce <code>virtual_chassis_member</code> filter for interfaces &amp; restore default behavior for <code>device</code> filter</li> <li>#11519 - Add a SQL index for IP address host values to optimize queries</li> <li>#11732 - Prevent inadvertent overwriting of object attributes by competing users</li> <li>#11936 - Introduce support for tags and custom fields on webhooks</li> <li>#12175 - Permit racks to start numbering at values greater than one</li> <li>#12210 - Add tenancy assignment for power feeds</li> <li>#12461 - Add config template rendering for virtual machines</li> <li>#12814 - Expose NetBox models within ConfigTemplate rendering context</li> <li>#12882 - Add tag support for contact assignments</li> <li>#13037 - Return reports &amp; scripts within a <code>results</code> list when fetched via the REST API</li> <li>#13170 - Add <code>rf_role</code> to InterfaceTemplate</li> <li>#13269 - Cache the number of assigned component templates for device types</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13513 - Prevent exception when rendering bookmarks widget for anonymous user</li> <li>#13599 - Fix errant counter increments when editing device/VM components</li> <li>#13605 - Optimize cached counter migrations to avoid excessive memory consumption</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>Work has begun on introducing translation and localization support in NetBox. This work is being performed in preparation for release 4.0.</li> <li>#6391 - Rename the <code>device_role</code> field on Device to <code>role</code> for consistency with VirtualMachine</li> <li>#9077 - Prevent the errant execution of dangerous instance methods in Django templates</li> <li>#11766 - Remove obsolete custom <code>ChoiceField</code> and <code>MultipleChoiceField</code> classes</li> <li>#12180 - All API endpoints for available objects (e.g. IP addresses) now inherit from a common parent view</li> <li>#12237 - Upgrade Django to v4.2</li> <li>#12320 - Remove obsolete fields <code>napalm_driver</code> and <code>napalm_args</code> from Platform</li> <li>#12794 - Avoid direct imports of Django's stock user model</li> <li>#12906 - The <code>boto3</code> (AWS) and <code>dulwich</code> (git) packages for remote data sources are now optional requirements</li> <li>#12964 - Drop support for PostgreSQL 11</li> <li>#13309 - User account-specific resources have been moved to a new <code>account</code> app for better organization</li> </ul>"
    },
    {
      "location": "release-notes/version-3.6/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Introduced the following endpoints:<ul> <li><code>/api/extras/bookmarks/</code></li> <li><code>/api/extras/custom-field-choice-sets/</code></li> </ul> </li> <li>Added the <code>/api/extras/custom-fields/{id}/choices/</code> endpoint for select and multi-select custom fields</li> <li>dcim.Device<ul> <li>Renamed <code>device_role</code> to <code>device</code>. Added a read-only <code>device_role</code> field for limited backward compatibility.</li> <li>Added the <code>latitude</code> and <code>longitude</code> fields (for GPS coordinates)</li> <li>Added the <code>oob_ip</code> field for out-of-band IP address assignment</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Added read-only counter fields for assigned component templates:<ul> <li><code>console_port_template_count</code></li> <li><code>console_server_port_template_count</code></li> <li><code>power_port_template_count</code></li> <li><code>power_outlet_template_count</code></li> <li><code>interface_template_count</code></li> <li><code>front_port_template_count</code></li> <li><code>rear_port_template_count</code></li> <li><code>device_bay_template_count</code></li> <li><code>module_bay_template_count</code></li> <li><code>inventory_item_template_count</code></li> </ul> </li> </ul> </li> <li>dcim.InterfaceTemplate<ul> <li>Added the <code>rf_role</code> field</li> </ul> </li> <li>dcim.Platform<ul> <li>Removed the <code>napalm_driver</code> and <code>napalm_args</code> fields</li> </ul> </li> <li>dcim.PowerFeed<ul> <li>Added the <code>tenant</code> field</li> </ul> </li> <li>dcim.Rack<ul> <li>Added the <code>starting_unit</code> field</li> </ul> </li> <li>dcim.VirtualChassis<ul> <li>Added the read-only <code>member_count</code> field</li> </ul> </li> <li>extras.CustomField<ul> <li>Removed the <code>choices</code> array field</li> <li>Added the <code>choice_set</code> foreign key field (to ChoiceSet)</li> </ul> </li> <li>extras.Report<ul> <li>Reports are now returned within a <code>results</code> list</li> </ul> </li> <li>extras.Script<ul> <li>Scripts are now returned within a <code>results</code> list</li> </ul> </li> <li>extras.Tag<ul> <li>Added the <code>object_types</code> field for optional restriction to specific object types</li> </ul> </li> <li>extras.Webhook<ul> <li>Added <code>custom_fields</code> and <code>tags</code> support</li> </ul> </li> <li>tenancy.ContactAssignment<ul> <li>Added <code>tags</code> support</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li>Added the <code>oob_ip</code> field for out-of-band IP address assignment</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/",
      "title": "NetBox v3.7",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#v378-2024-05-06",
      "title": "v3.7.8 (2024-05-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#12127 - Enable adding new cables directly from navigation menu</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#15877 - Account for virtual chassis membership when assigning related interfaces via bulk edit</li> <li>#15917 - Fix pagination through search results within dropdown fields</li> <li>#15925 - Fix SVG rendering of cable traces to circuit terminations</li> <li>#15948 - Fix cable trace SVG generation for cables with multiple terminations at both ends</li> <li>#15960 - Replace CSV export formatting for several many-to-many fields</li> <li>#15961 - Fix secret toggle button for IKE policies</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v377-2024-05-01",
      "title": "v3.7.7 (2024-05-01)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#15428 - Show usage counts for associated objects on config template list</li> <li>#15812 - Add Date &amp; DateTime variable types for custom scripts</li> <li>#15894 - Cache the generated API schema definition for shorter loading times</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#11460 - Fix AttributeError exception when editing a cable with only one end terminated</li> <li>#13712 - Fix row highlighting for device interface list display</li> <li>#13806 - Fix \"mark\" button tooltip on button activation for device interface list display</li> <li>#13922 - Fix SVG drawing error on multiple termination trace with multiple devices</li> <li>#14241 - Fix random interface swap when performing cable trace with multiple termination</li> <li>#14852 - Fix NoReverseMatch exception when viewing an event rule which references a deleted custom script</li> <li>#15524 - Fix rounding error when reporting IP range utilization</li> <li>#15548 - Ignore many-to-many mappings when checking dependencies of an object being deleted</li> <li>#15845 - Avoid extraneous database queries when fetching assigned IP addresses via REST API</li> <li>#15872 - <code>BANNER_MAINTENANCE</code> content should permit custom HTML</li> <li>#15891 - Ensure deterministic ordering for scripts &amp; reports</li> <li>#15896 - Fix retention of default value when editing a custom JSON field</li> <li>#15899 - Fix exception when enabling the tags column on the L2VPN terminations table</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v376-2024-04-22",
      "title": "v3.7.6 (2024-04-22)",
      "text": "<p>Warning</p> <p>If remote authentication is in use with Gunicorn v22.0 or later, it may be necessary to configure Gunicorn's <code>header_map</code> setting to preserve authentication headers.</p>"
    },
    {
      "location": "release-notes/version-3.7/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#14690 - Improve rendering of JSON data in configuration form</li> <li>#15427 - Enable compatibility with non-Amazon S3 providers for remote data sources</li> <li>#15640 - Add global search support for L2VPN identifiers</li> <li>#15644 - Introduce new configuration parameters for enabling HTTP Strict Transport Security (HSTS)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#15541 - Restore ability to modify assigned component template when adding/modifying an inventory item template</li> <li>#15582 - Fix permission constraints for synchronization of remote data sources</li> <li>#15588 - Correct OpenAPI schema definitions for read-only fields which may return null values</li> <li>#15635 - Extend plugin removal instruction to include reindexing the global search cache</li> <li>#15654 - Fix <code>AttributeError</code> exception when attempting to save an incomplete tunnel termination</li> <li>#15668 - Fix permission required to display virtual disks tab on virtual machine UI view</li> <li>#15685 - Allow filtering cables by decimal values using UI filter form</li> <li>#15761 - Add missing <code>ike_policy</code> &amp; <code>ike_policy_id</code> filters for IKE proposals</li> <li>#15771 - Include <code>id</code> in list of supported fields for all bulk import forms</li> <li>#15790 - Fix live preview support for EventRule comments</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v375-2024-04-04",
      "title": "v3.7.5 (2024-04-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#14707 - Clarify interface designation when creating tunnel terminations</li> <li>#15039 - Allow API tokens to be cloned</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14799 - Avoid caching modified reports &amp; scripts</li> <li>#15029 - Raise a clean validation error when attempting to make duplicate FHRP group assignments</li> <li>#15102 - Fix usage of selector widget for form fields referencing users/groups</li> <li>#15435 - Correct permissions name to allow adding a module bay to a device via the UI</li> <li>#15502 - Fix KeyError exception when modifying an IP address assigned to a virtual machine</li> <li>#15597 - Restore help modal for <code>button_class</code> field on custom link bulk import form</li> <li>#15598 - Fix exception when creating a device from a device type with one or more child inventory items</li> <li>#15608 - Avoid caching values of null fields in search index</li> <li>#15609 - Fix filtering of the providers list by assigned ASN</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v374-2024-03-13",
      "title": "v3.7.4 (2024-03-13)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#14206 - Add additional FibreChannel SFP+ interface types</li> <li>#14366 - Enable custom links for config contexts &amp; templates</li> <li>#15291 - Add tunnel termination buttons to VM interfaces table</li> <li>#15297 - Linkify platform column in device &amp; virtual machine tables</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13722 - Fix range expansion for comma-separated numerical values</li> <li>#14832 - Enable querying IP addresses for an FHRP group via GraphQL</li> <li>#15220 - Fix validation check when bulk editing the mask length of IP addresses</li> <li>#15232 - Permit user with sufficient permissions to assign an inventory item to a device type</li> <li>#15241 - Restore missing <code>display</code> field on VirtualDisk serialization in REST API</li> <li>#15243 - Correct representation of installed module when listing module bays using REST API brief mode</li> <li>#15316 - Fix selection of 3DES encryption for IKE &amp; IPSec proposals</li> <li>#15322 - Add description field to YAML export for device &amp; module types</li> <li>#15336 - Correct label for recurring scheduled jobs</li> <li>#15347 - Fix querying virtual machine contacts via GraphQL</li> <li>#15356 - Fix assignment of front &amp; rear images to device types via REST API</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v373-2024-02-21",
      "title": "v3.7.3 (2024-02-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#14587 - Display a human-friendly name for the OpenID Connect remote auth backend</li> <li>#14946 - Remove <code>associate_by_email()</code> from default social auth pipeline</li> <li>#14966 - Add PostgreSQL index for object type &amp; ID on CachedValue table to improve performance</li> <li>#15177 - Add \"last login\" time to user display &amp; REST API serializer</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14058 - Limit platform options by manufacturer when editing a device or device type</li> <li>#14064 - Resolving parent location should consider assigned site when bulk importing locations</li> <li>#14079 - Ensure changes are logged on related objects when deleting an object referenced via a many-to-many relationship (e.g. tags)</li> <li>#14405 - Clean up formatting of link peers in bulk CSV export of cable termination objects</li> <li>#14689 - Preserve \"empty\" default values for JSON custom fields</li> <li>#14952 - Update existing AutoSyncRecord when changing the data file of an auto-synced object</li> <li>#15059 - Correct IP address count link in VM interfaces table</li> <li>#15067 - Fix uncaught exception when attempting invalid device bay import</li> <li>#15070 - Fix inclusion of <code>config_template</code> field on REST API serializer for virtual machines</li> <li>#15084 - Fix \"add export template\" link under \"export\" button on object list views</li> <li>#15090 - Ensure protection rules are evaluated prior to enqueueing events when deleting an object</li> <li>#15091 - Fix designation of the active tab for assigned object when modifying an L2VPN termination</li> <li>#15101 - Correct OpenAPI schema for rack elevation REST API endpoint</li> <li>#15115 - Fix unhandled exception with invalid permission constraints</li> <li>#15126 - <code>group</code> field should be optional when creating VPN tunnel via REST API</li> <li>#15127 - Add missing group column to VPN tunnels table</li> <li>#15133 - Fix FHRP group representation on assignments REST API endpoint using brief mode</li> <li>#15174 - Warn that permission constraints are not supported for reports or scripts</li> <li>#15184 - Correct REST API schema definition for <code>front_image</code> &amp; <code>rear_image</code> on DeviceType</li> <li>#15185 - Ensure error messages pertaining to related objects are displayed on the bulk import form</li> <li>#15192 - Fix exception when viewing current config when no history is present</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v372-2024-02-05",
      "title": "v3.7.2 (2024-02-05)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#13729 - Omit sensitive data source parameters from change log data</li> <li>#14645 - Limit the number of assigned IP addresses displayed under interfaces list</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14500 - Optimize calculation of available child prefixes &amp; ranges when viewing a prefix</li> <li>#14511 - Fix GraphQL support for interfaces connected to provider networks</li> <li>#14572 - Correct the number of jobs listed for individual report &amp; script modules</li> <li>#14703 - Revert to the default layout when encountering a misconfigured dashboard</li> <li>#14755 - Fix validation of choice values &amp; labels when creating a custom field choice set via the REST API</li> <li>#14838 - Avoid corrupting JSON data when changing the action type while editing an event rule</li> <li>#14839 - Fix form validation error when attempting to terminate a tunnel to a virtual machine interface</li> <li>#14840 - Fix <code>NoReverseMatch</code> exception when rendering a custom field which references a user</li> <li>#14847 - IKE policy mode may be set inly when IKEv1 is selected</li> <li>#14851 - Automatically remove any associated bookmarks when deleting a user</li> <li>#14879 - Include custom fields in REST API representation of data sources</li> <li>#14885 - Add missing \"group\" field to VPN tunnel creation form</li> <li>#14892 - Fix exception when running report/script via command line due to missing username</li> <li>#14920 - Include button to display available status choices when bulk importing virtual device contexts</li> <li>#14945 - Fix \"select all\" button for device type components</li> <li>#14947 - Ensure that application &amp; removal of tags is always recorded in an object's change log</li> <li>#14962 - Fix config context rendering for VMs assigned directly to a site (rather than via a cluster)</li> <li>#14999 - Fix \"create &amp; add another\" link for interface FHRP group assignment</li> <li>#15015 - Pre-populate assigned tenant when allocating next available IP address under prefix view</li> <li>#15020 - Automatically update all VMs when changing a cluster's assigned site</li> <li>#15025 - The <code>can_add()</code> template filter should accept a model (not an instance)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v371-2024-01-17",
      "title": "v3.7.1 (2024-01-17)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13844 - Use <code>available_at_site</code> filter when filtering VLANs under prefix form</li> <li>#14663 - Fix tunnel creation when setting initial termination to a VM interface</li> <li>#14706 - Relax one-to-one mapping of tunnel termination to IP address</li> <li>#14709 - Fix typo in tunnel termination type choice name</li> <li>#14749 - Remove errant translation wrapper from <code>installed_device</code> on DeviceBay</li> <li>#14778 - Custom field API serializer should accept null values for all optional fields</li> <li>#14791 - Hide available prefixes when searching within a parent prefix</li> <li>#14793 - Add missing Diffie-Hellman group 15</li> <li>#14816 - Ensure default contact assignment ordering is consistent</li> <li>#14817 - Relax required fields for IKE &amp; IPSec models on bulk import</li> <li>#14827 - Ensure all matching event rules are processed in response to an event</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#v370-2023-12-29",
      "title": "v3.7.0 (2023-12-29)",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>The following fields have been removed from the Webhook model: <code>content_types</code>, <code>type_create</code>, <code>type_update</code>, <code>type_delete</code>, <code>type_job_start</code>, <code>type_job_end</code>, <code>enabled</code>, and <code>conditions</code>. Webhooks are now tied to events via event rules. New event rules will be created for any existing webhooks automatically upon upgrade.</li> <li>The <code>ui_visibility</code> field on the custom field model has been replaced with two new fields: <code>ui_visible</code> and <code>ui_editable</code>. These new fields will have their values mapped from the original field automatically upon upgrade.</li> <li>The <code>FeatureQuery</code> class used internally for querying content types by model feature has been removed. It has been replaced by the new <code>with_feature()</code> manager method on NetBox's proxy model for ContentType (<code>core.models.ContentType</code>).</li> <li>The internal ConfigRevision model has moved from <code>extras</code> to <code>core</code>. Configuration history will be retained throughout the upgrade process.</li> <li>The L2VPN and L2VPNTermination models have moved from the <code>ipam</code> app to the new <code>vpn</code> app. All object data will be retained, however please note that the relevant API endpoints have likewise moved to <code>/api/vpn/</code>.</li> <li>The <code>CustomFieldsMixin</code>, <code>SavedFiltersMixin</code>, and <code>TagsMixin</code> classes have moved from the <code>extras.forms.mixins</code> module to <code>netbox.forms.mixins</code>.</li> <li>The <code>netbox.models.features.WebhooksMixin</code> class has been renamed to <code>EventRulesMixin</code>.</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-3.7/#vpn-tunnels-9816",
      "title": "VPN Tunnels (#9816)",
      "text": "<p>Several new models have been introduced to enable VPN tunnel management. Users can now define tunnels with two or more terminations to represent peer-to-peer or hub-and-spoke topologies. Each termination is made to a virtual interface on a device or virtual machine. Additionally, users can define IKE and IPSec proposals and policies, which can be applied to tunnels to document encryption and authentication strategies.</p>"
    },
    {
      "location": "release-notes/version-3.7/#event-rules-14132",
      "title": "Event Rules (#14132)",
      "text": "<p>This release introduces event rules, which can be used to send webhooks or execute custom scripts automatically in response to events that occur in NetBox. For example, it's now possible to run a custom script whenever a new site is created with a particular status or tag.</p> <p>Event rules replace and extend functionality that was previously built into the webhook model. New event rules will be created for any existing webhooks automatically upon upgrade.</p>"
    },
    {
      "location": "release-notes/version-3.7/#virtual-machine-disks-8356",
      "title": "Virtual Machine Disks (#8356)",
      "text": "<p>A new VirtualDisk model has been introduced to enable tracking the assignment of discrete virtual disks to virtual machines. The <code>size</code> field has been retained on the VirtualMachine model, and will be populated automatically with the aggregate size of all assigned virtual disks. (Users who opt to eschew the new model may continue using the VirtualMachine <code>size</code> attribute independently as in previous releases.)</p>"
    },
    {
      "location": "release-notes/version-3.7/#object-protection-rules-10244",
      "title": "Object Protection Rules (#10244)",
      "text": "<p>A new <code>PROTECTION_RULES</code> configuration parameter has been introduced. Similar to how custom validation rules can be used to enforce certain values for object attributes, protection rules guard against the deletion of objects which do not meet specified criteria. This enables an administrator to prevent, for example, the deletion of a site which has a status of \"active.\"</p>"
    },
    {
      "location": "release-notes/version-3.7/#improved-custom-field-visibility-controls-13299",
      "title": "Improved Custom Field Visibility Controls (#13299)",
      "text": "<p>The <code>ui_visible</code> field on the custom field model has been superseded by two new fields, <code>ui_visible</code> and <code>ui_editable</code>, which control how and whether a custom field is displayed when view and editing an object, respectively. Separating these two functions into discrete fields allows more control over how each custom field is presented to users. The values of these fields will be appropriately set automatically during the upgrade process from the value of the original field.</p>"
    },
    {
      "location": "release-notes/version-3.7/#improved-global-search-results-14134",
      "title": "Improved Global Search Results (#14134)",
      "text": "<p>Global search results now include additional context about each object, such as a description, status, and/or related objects. The set of attributes to be displayed is specific to each object type, and is defined by setting <code>display_attrs</code> under the object's SearchIndex class.</p>"
    },
    {
      "location": "release-notes/version-3.7/#table-column-registration-for-plugins-14173",
      "title": "Table Column Registration for Plugins (#14173)",
      "text": "<p>Plugins can now register their own custom columns for inclusion on core NetBox tables. For example, a plugin can register a new column on SiteTable using the new <code>register_table_column()</code> utility function, and it will become available for users to select for display.</p>"
    },
    {
      "location": "release-notes/version-3.7/#data-backend-registration-for-plugins-13381",
      "title": "Data Backend Registration for Plugins (#13381)",
      "text": "<p>Plugins can now register their own data backends for use with synchronized data sources. This enables plugins to introduce new backends in addition to the git, S3, and local path backends provided natively.</p>"
    },
    {
      "location": "release-notes/version-3.7/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#12135 - Avoid orphaned interfaces by preventing the deletion of interfaces which have children assigned</li> <li>#12216 - Add a <code>color</code> field for circuit types</li> <li>#13230 - Allow device types to be excluded from consideration when calculating a rack's utilization</li> <li>#13334 - Add an <code>error</code> field to the Job model to record any errors associated with its execution</li> <li>#13427 - Introduce a mechanism for excluding models from general-purpose lists of object types</li> <li>#13690 - Display any dependent objects to be deleted prior to deleting an object via the web UI</li> <li>#13794 - Any models with a relationship to Tenant are now included automatically in the list of related objects under the tenant view</li> <li>#13808 - Add a <code>/render-config</code> REST API endpoint for virtual machines</li> <li>#14035 - Order objects of equivalent weight by value in global search results to improve readability</li> <li>#14147 - Avoid recording empty changelog entries via the new <code>CHANGELOG_SKIP_EMPTY_CHANGES</code> config parameter</li> <li>#14156 - Enable custom fields for contact assignments</li> <li>#14240 - Increase maximum values for custom field minimum &amp; maximum numeric validators</li> <li>#14361 - Add a <code>description</code> field for webhooks</li> <li>#14365 - Introduce <code>job_start</code> and <code>job_end</code> signals to allow automated plugin actions</li> <li>#14434 - Add model-specific termination object filters for cables (e.g. <code>interface_id</code> and <code>consoleport_id</code>)</li> <li>#14436 - Add PostgreSQL indexes for all GenericForeignKey fields</li> <li>#14579 - Allow users to specify a preferred language for UI translations</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#translations",
      "title": "Translations",
      "text": "<ul> <li>#14075 - Add Spanish translation</li> <li>#14096 - Add French translation</li> <li>#14145 - Add Portuguese translation</li> <li>#14266 - Add Russian translation</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14432 - Fix hyperlinks for global search result attributes</li> <li>#14472 - Fix display of hidden custom fields in object edit forms</li> <li>#14499 - Relax requirements for encryption/auth algorithms on IKE &amp; IPSec proposals</li> <li>#14550 - Fix changing action type of existing event rule</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#13550 - Optimize the format for declaring view actions under <code>ActionsMixin</code> (backward compatibility has been retained)</li> <li>#13645 - Installation of the <code>sentry-sdk</code> Python library is now required only if Sentry reporting is enabled</li> <li>#14036 - Move plugin resources from the <code>extras</code> app into <code>netbox</code> (backward compatibility has been retained)</li> <li>#14153 - Replace <code>FeatureQuery</code> with new <code>with_feature()</code> method on proxy ContentType manager</li> <li>#14311 - Move the L2VPN models from the <code>ipam</code> app to the new <code>vpn</code> app</li> <li>#14312 - Move the ConfigRevision model from the <code>extras</code> app to <code>core</code></li> <li>#14326 - Form feature mixin classes have been moved from the <code>extras</code> app to <code>netbox</code></li> <li>#14395 - Move <code>extras.webhooks_worker.process_webhook()</code> to <code>extras.webhooks.send_webhook()</code> (backward compatibility has been retained)</li> <li>#14424 - Remove change logging functionality from StagedChange</li> <li>#14458 - Remove the obsolete <code>clearcache</code> management command</li> <li>#14536 - Enforce uniqueness by default for non-VRF prefixes &amp; IP addresses (<code>ENFORCE_GLOBAL_UNIQUE</code> now defaults to true)</li> </ul>"
    },
    {
      "location": "release-notes/version-3.7/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Introduced the following endpoints:<ul> <li><code>/api/extras/event-rules/</code></li> <li><code>/api/virtualization/virtual-disks/</code></li> <li><code>/api/vpn/ike-policies/</code></li> <li><code>/api/vpn/ike-proposals/</code></li> <li><code>/api/vpn/ipsec-policies/</code></li> <li><code>/api/vpn/ipsec-profiles/</code></li> <li><code>/api/vpn/ipsec-proposals/</code></li> <li><code>/api/vpn/tunnels/</code></li> <li><code>/api/vpn/tunnel-terminations/</code></li> </ul> </li> <li>The following endpoints have been moved:<ul> <li><code>/api/ipam/l2vpns/</code> -&gt; <code>/api/vpn/l2vpns/</code></li> <li><code>/api/ipam/l2vpn-terminations/</code> -&gt; <code>/api/vpn/l2vpn-terminations/</code></li> </ul> </li> <li>circuits.CircuitType<ul> <li>Added the optional <code>color</code> choice field</li> </ul> </li> <li>core.Job<ul> <li>Added the read-only <code>error</code> character field</li> </ul> </li> <li>extras.Webhook<ul> <li>Removed the following fields (these have been moved to the new <code>EventRule</code> model):<ul> <li><code>content_types</code></li> <li><code>type_create</code></li> <li><code>type_update</code></li> <li><code>type_delete</code></li> <li><code>type_job_start</code></li> <li><code>type_job_end</code></li> <li><code>enabled</code></li> <li><code>conditions</code></li> </ul> </li> <li>Add the optional <code>description</code> field</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Added the <code>exclude_from_utilization</code> boolean field</li> </ul> </li> <li>extras.CustomField<ul> <li>Removed the <code>ui_visibility</code> field</li> <li>Added the <code>ui_visible</code> and <code>ui_editable</code> choice fields</li> </ul> </li> <li>tenancy.ContactAssignment<ul> <li>Added support for custom fields</li> </ul> </li> <li>virtualization.VirtualDisk<ul> <li>Added the read-only <code>virtual_disk_count</code> integer field</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li>Added the <code>/render-config</code> endpoint</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/",
      "title": "NetBox v4.0",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#v4011-2024-09-03",
      "title": "v4.0.11 (2024-09-03)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17310 - Enforce restricted queryset for related objects in GraphQL API requests</li> <li>#17321 - Ensure the job is attributed to the specified user when using the <code>runscript</code> management command</li> <li>#17323 - Associate job with script object when executed using the <code>runscript</code> management command</li> <li>#17337 - Fix ordering of virtual device contexts by device name</li> <li>#17341 - Avoid <code>NoReverseMatch</code> exceptions with specific dashboard widget configurations</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v4010-2024-08-29",
      "title": "v4.0.10 (2024-08-29)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#16857 - Scroll long rendered Markdown content within tables</li> <li>#16905 - Enable filtering of device components by device status</li> <li>#16949 - Add device count column to sites table</li> <li>#17072 - Linkify email addresses &amp; phone numbers in contact assignments list</li> <li>#17177 - Add facility field to locations filter form</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#16292 - Ensure consistent evaluation of queryset for both individual and list GraphQL API queries</li> <li>#16385 - Restore support for white, gray, and black background colors</li> <li>#16640 - Fix potential corruption of JSON values in custom fields that are not UI-editable</li> <li>#16670 - Fix conflicts within OpenAPI schema definition regarding nested serializers</li> <li>#16733 - Fix bulk edit/delete of objects when using \"select all\" widget</li> <li>#16756 - Fix dynamic pagination of custom script results table</li> <li>#16825 - Avoid <code>NoReverseMatch</code> exception when displaying count of related object type with no list view</li> <li>#16946 - GraphQL API requests with an invalid filter should return an empty set</li> <li>#16959 - Fix function of \"reset\" button on objects filter form</li> <li>#16973 - Fix support for evaluating user token (<code>$user</code>) against custom field values in permission constraints</li> <li>#17007 - Center SSO authentication icon when backend is unnamed</li> <li>#17070 - Image height &amp; width values should not be required when creating an image attachment via the REST API</li> <li>#17108 - Ensure template date &amp; time filters always return localtime-aware values</li> <li>#17117 - Work around Safari rendering bug</li> <li>#17186 - Fix display of custom links with default style under dark mode</li> <li>#17219 - Fix system config view exception when custom validator classes are employed</li> <li>#17230 - Ensure consistent rendering for all dashboard widget colors</li> <li>#17256 - Fix VLAN group scope selection for non-English languages</li> <li>#17278 - Ensure hierarchy is recalculated when bulk editing recursively nested object types (e.g. tenant groups)</li> <li>#17279 - Do not regenerate key when updating a token via REST API</li> <li>#17286 - Fix exception when adding member device to virtual chassis via web UI</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v409-2024-08-14",
      "title": "v4.0.9 (2024-08-14)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#16692 - Enable modifying VLAN assignment while bulk editing prefixes</li> <li>#17006 - Add IEEE 802.11be interface type</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13459 - Correct OpenAPI schema type for <code>TreeNodeMultipleChoiceFilter</code></li> <li>#16073 - Respect default values for custom fields during bulk import of objects</li> <li>#16176 - Restore ability to select multiple terminating devices when connecting a cable</li> <li>#16871 - Sanitize device ID query parameter when bulk editing components to prevent exception</li> <li>#17038 - Fix AttributeError exception when attempting to export system status data</li> <li>#17064 - Fix misaligned text within rendered Markdown code blocks</li> <li>#17124 - <code>BaseTable</code> should follow reverse one-to-one relationships when prefetching related objects</li> <li>#17131 - Fix exception when creating object-type custom field without selecting related object type</li> <li>#17144 - Avoid showing duplicated pop-up messages</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v408-2024-07-26",
      "title": "v4.0.8 (2024-07-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#14640 - Add Dutch language support</li> <li>#14792 - Add Polish language support</li> <li>#15375 - Enable customization of SSO backend name &amp; icon</li> <li>#15660 - Add Czech language support</li> <li>#15696 - Add Danish language support</li> <li>#16793 - Add Italian language support</li> <li>#16933 - Enable toggling true/false marks on BooleanColumn</li> <li>#16943 - Expand navigation breadcrumbs on job view to include the parent object</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#16357 - Replicate assigned type &amp; tenant for cable when clicking \"create an add another\"</li> <li>#16402 - Remove inoperative links from report result view</li> <li>#16536 - Revert <code>role</code> &amp; <code>role_id</code> filters for device components to <code>device_role</code> &amp; <code>device_role_id</code> to avoid conflict with inventory item <code>role</code> field</li> <li>#16624 - Correct OpenAPI schema definitions for several fields</li> <li>#16760 - Fix data source syncing using git via a local path</li> <li>#16819 - Highlight parent device in rack when viewing child device</li> <li>#16838 - ActionsColumn should render extra buttons even when no stock actions are enabled</li> <li>#16867 - Fix exception when a dashboard list widget references a model which has been removed</li> <li>#16963 - Fix filtering of \"accounts\" link under providers list</li> <li>#16964 - Ensure configured password validators are enforced</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v407-2024-07-09",
      "title": "v4.0.7 (2024-07-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#14554 - Add support for django-storage-swift storage backend</li> <li>#16424 - Enable filtering of devices by cluster and cluster group</li> <li>#16716 - Display NAT address (if any) for OOB IP address under device view</li> <li>#16725 - Always position the admin section last in the navigation menu</li> <li>#16791 - Add 200 &amp; 400 Gbps selections for circuit termination port speed</li> <li>#16802 - Introduce <code>SENTRY_SEND_DEFAULT_PII</code> configuration parameter and disable PII export by default</li> <li>#16817 - Add 200 &amp; 400 Gbps selections for circuit commit rate</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#16523 - Restore highlighting of current device in virtual chassis members panel</li> <li>#16654 - Fix parent item assignment for inventory item bulk import</li> <li>#16657 - Fix translation of object types in global search</li> <li>#16679 - Avoid overwriting custom JSON fields during bulk edit</li> <li>#16689 - System configuration view should reflect static parameters when no config revisions exist</li> <li>#16714 - Fix cloning of device types with 0U height</li> <li>#16721 - Fix errant API request after deselecting a rack in device edit form</li> <li>#16723 - Fix escaping of path to virtual environment in <code>upgrade.sh</code></li> <li>#16735 - Object list \"results\" tab should show a count of zero when empty</li> <li>#16747 - Avoid clearing entire search cache when manually reindexing specific apps/models</li> <li>#16758 - Ensure manually selected lagnuage persists across browser sessions</li> <li>#16779 - Fix saved filter selection for child object lists</li> <li>#16780 - IKE proposal created via REST API should not require authentication_algorithm</li> <li>#16796 - Allow assignment of VM with no site to a cluster with a site</li> <li>#16806 - Fix redirect URL when creating contact assignments with \"add another\" button</li> <li>#16807 - Fix layout of VLAN edit form when custom fields are present</li> <li>#16808 - Fix event rule triggering in scenario where objects are updated immediately prior to deletion</li> <li>#16813 - Fix AttributeError exception when filtering bookmarks in dashboard widget by object type</li> <li>#16843 - Permit creation of IKE policies via REST API without specifying an IKE mode</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v406-2024-06-24",
      "title": "v4.0.6 (2024-06-24)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#15348 - Show saved filters alongside quick search on object list views</li> <li>#15794 - Dynamically populate related objects in UI views</li> <li>#16256 - Enable alphabetical ordering of bookmarks on dashboard</li> <li>#16307 - Enable calling <code>log_*()</code> methods on Script without passing a message</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13925 - Fix support for \"zulu\" (UTC) timestamps for custom fields</li> <li>#14829 - Fix support for simple conditions (without AND/OR) in event rules</li> <li>#15717 - Allow assigning a device/VM in a site to a cluster with no site assigned</li> <li>#16143 - Display timestamps in tables in the configured timezone</li> <li>#16149 - Fix object linking in custom script logs</li> <li>#16252 - Fix total count in tab at top of rack elevations view</li> <li>#16273 - Restore global search bar on mobile</li> <li>#16416 - Retain dark/light mode toggle on mobile view</li> <li>#16444 - Disable ordering circuits list by A/Z termination</li> <li>#16450 - Searching for rack unit in form dropdown should be case-insensitive</li> <li>#16452 - Fix sizing of buttons within object attribute panels</li> <li>#16454 - Address DNS lookup bug in `django-debug-toolbar</li> <li>#16460 - Omit spaces from telephone number URLs</li> <li>#16512 - Restore a user's preferred language (if any) on login</li> <li>#16542 - Fix bulk form operations when HTMX is enabled</li> <li>#16702 - Fix validation of <code>return_url</code> query parameter</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v405-2024-06-06",
      "title": "v4.0.5 (2024-06-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#14810 - Enable contact assignment for services</li> <li>#15489 - Add 1000Base-TX interface type</li> <li>#15873 - Improve readability of allocates resource numbers for clusters</li> <li>#16290 - Capture entire object in changelog data (but continue to display only non-internal attributes)</li> <li>#16353 - Enable plugins to extend object change view with custom content</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13422 - Rebuild MPTT trees for applicable models after merging staged changes</li> <li>#14567 - Apply active quicksearch value when exporting \"current view\" from object list</li> <li>#15194 - Avoid enqueuing duplicate event triggers for a modified object</li> <li>#16039 - Fix row highlighting for front &amp; rear port connections under device view</li> <li>#16050 - Fix display of names &amp; descriptions defined for custom scripts</li> <li>#16083 - Disable font ligatures to avoid peculiarities in rendered text</li> <li>#16202 - Fix site map button URL for certain localizations</li> <li>#16261 - Fix GraphQL filtering for certain multi-value filters</li> <li>#16286 - Fix global search support for provider accounts</li> <li>#16312 - Fix object list navigation for dashboard widgets</li> <li>#16315 - Fix filtering change log &amp; journal entries by object type in UI</li> <li>#16376 - Update change log for the terminating object (e.g. interface) when attaching a cable</li> <li>#16400 - Fix AttributeError when attempting to restore a previous configuration revision after deleting the current one</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v403-2024-05-22",
      "title": "v4.0.3 (2024-05-22)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#12984 - Add Molex Micro-Fit power port &amp; outlet types</li> <li>#13764 - Enable contact assignments for aggregates, prefixes, IP ranges, and IP addresses</li> <li>#14639 - Add Ukrainian translation support</li> <li>#14653 - Add an inventory items table column for all device components</li> <li>#14686 - Add German translation support</li> <li>#14855 - Add Chinese translation support</li> <li>#14948 - Introduce the <code>has_virtual_device_context</code> filter for devices</li> <li>#15353 - Improve error reporting when custom scripts fail to load</li> <li>#15496 - Implement dedicated views for management of circuit terminations</li> <li>#15603 - Add 4G &amp; 5G cellular interface types</li> <li>#15962 - Enable UNIX socket connections for Redis</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#13293 - Limit interface selector for IP address to current device/VM</li> <li>#14953 - Ensure annotated count fields are present in REST API response data when creating new objects</li> <li>#14982 - Fix OpenAPI schema definition for SerializedPKRelatedFields</li> <li>#15082 - Strip whitespace from choice values &amp; labels when creating a custom field choice set</li> <li>#16138 - Fix support for referencing users &amp; groups in object permissions</li> <li>#16145 - Restore ability to reference custom scripts via module &amp; name in REST API</li> <li>#16164 - Correct display of selected values in UI when filtering object list by a null value</li> <li>#16173 - Fix TypeError exception when viewing object list with no pagination preference defined</li> <li>#16228 - Fix permissions enforcement for GraphQL queries of users &amp; groups</li> <li>#16232 - Preserve bulk action checkboxes on dynamic tables when using pagination</li> <li>#16240 - Fixed NoReverseMatch exception when adding circuit terminations to an object counts dashboard widget</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v402-2024-05-14",
      "title": "v4.0.2 (2024-05-14)",
      "text": "<p>Important</p> <p>This release includes an important security fix, and is a strongly recommended update for all users. More details will follow.</p>"
    },
    {
      "location": "release-notes/version-4.0/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#15119 - Add cluster &amp; cluster group UI filter fields for VLAN groups</li> <li>#16090 - Include current NetBox version when an unsupported plugin is detected</li> <li>#16096 - Introduce the <code>ENABLE_TRANSLATION</code> configuration parameter</li> <li>#16107 - Change the default value for <code>LOGIN_REQUIRED</code> to True</li> <li>#16127 - Add integration point for unsupported settings</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#16077 - Fix display of parameter values when viewing configuration revisions</li> <li>#16078 - Fix integer filters mistakenly marked as required for GraphQL API</li> <li>#16101 - Fix initial loading of pagination widget for dynamic object tables</li> <li>#16123 - Fix custom script execution via REST API</li> <li>#16124 - Fix GraphQL API support for querying virtual machine interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v401-2024-05-09",
      "title": "v4.0.1 (2024-05-09)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#15148 - Add copy-to-clipboard button for config context data</li> <li>#15328 - Add a virtual machines UI tab for host devices</li> <li>#15451 - Add 2.5 and 5 Gbps backplane Ethernet interface types</li> <li>#16010 - Enable Prometheus middleware only if metrics are enabled</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#15968 - Avoid resizing quick search field to display clear button</li> <li>#15973 - Fix AttributeError exception when modifying cable termination type</li> <li>#15977 - Hide all admin menu items for non-authenticated users</li> <li>#15982 - Restore the \"assign IP\" tab for assigning existing IP addresses to interfaces</li> <li>#15992 - Fix AttributeError exception when Sentry integration is enabled</li> <li>#15995 - Permit nullable fields referenced by unique constraints to be omitted from REST API requests</li> <li>#15999 - Fix layout of login form labels for certain languages</li> <li>#16003 - Enable cache busting for <code>setmode.js</code> asset to avoid breaking dark mode support on upgrade</li> <li>#16011 - Fix site tenant assignment by PK via REST API</li> <li>#16020 - Include Python version in system UI view</li> <li>#16022 - Fix database migration failure when encountering a script module which no longer exists on disk</li> <li>#16025 - Fix execution of scripts via the <code>runscript</code> management command</li> <li>#16031 - Render Markdown content in script log messages</li> <li>#16051 - Translate \"empty\" text for object tables</li> <li>#16061 - Omit hidden fields from display within event rule edit form</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#v400-2024-05-06",
      "title": "v4.0.0 (2024-05-06)",
      "text": "<p>Plugin Maintainers</p> <p>Please see the dedicated plugin migration guide for a checklist of changes that may be needed to ensure compatibility with NetBox v4.0.</p>"
    },
    {
      "location": "release-notes/version-4.0/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Support for Python 3.8 and 3.9 has been removed.</li> <li>The format for GraphQL query filters has changed. Please see the GraphQL documentation for details and examples.</li> <li>The deprecated <code>device_role</code> &amp; <code>device_role_id</code> filters for devices have been removed. (Use <code>role</code> and <code>role_id</code> instead.)</li> <li>The obsolete <code>device_role</code> field has been removed from the REST API serializer for devices. (Use <code>role</code> instead.)</li> <li>The legacy reports functionality has been dropped. Reports will be automatically converted to custom scripts on upgrade.</li> <li>The <code>parent</code> and <code>parent_id</code> filters for locations now return only immediate children of the specified location. (Use <code>ancestor</code> and <code>ancestor_id</code> to return all descendants.)</li> <li>The <code>object_type</code> field on the CustomField model has been renamed to <code>related_object_type</code>.</li> <li>The <code>utilities.utils</code> module has been removed and its resources reorganized into separate modules organized by function.</li> <li>The obsolete <code>NullableCharField</code> class has been removed. (Use Django's stock <code>CharField</code> class with <code>null=True</code> instead.)</li> <li>The <code>annotated_date</code> template filter and <code>annotated_now</code> template tag have been removed.</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-4.0/#complete-ui-refresh-12128",
      "title": "Complete UI Refresh (#12128)",
      "text": "<p>The NetBox user interface has been completely refreshed and updated. This massive effort entailed:</p> <ul> <li>Refactoring the base HTML templates</li> <li>Moving from Boostrap 5.0 to Bootstrap 5.3</li> <li>Adopting the Tabler UI theme</li> <li>Replacing slim-select with Tom-Select</li> <li>Displaying additional object attributes in dropdown form fields</li> <li>Enabling opt-in HTMX-powered navigation (see #14736)</li> <li>Widespread cleanup &amp; standardization of UI components</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#dynamic-rest-api-fields-15087",
      "title": "Dynamic REST API Fields (#15087)",
      "text": "<p>The REST API now supports specifying which fields to include in the response data. For example, the response to a request for</p> <pre><code>GET /api/dcim/sites/?fields=name,status,region,tenant\n</code></pre> <p>will include only the four specified fields in the representation of each site. Additionally, the underlying database queries effected by such requests have been optimized to omit fields which are not included in the response, resulting in a substantial performance improvement.</p>"
    },
    {
      "location": "release-notes/version-4.0/#strawberry-graphql-engine-9856",
      "title": "Strawberry GraphQL Engine (#9856)",
      "text": "<p>The GraphQL engine has been changed from using Graphene-Django to Strawberry-Django. Changes include:</p> <ul> <li>Queryset Optimizer - reduces the number of database queries when querying related tables</li> <li>Updated GraphiQL Browser</li> <li>The format for GraphQL query filters and lookups has changed. Please see the GraphQL documentation for details and examples.</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#advanced-form-rendering-functionality-14739",
      "title": "Advanced Form Rendering Functionality (#14739)",
      "text": "<p>New resources have been introduced to enable advanced form rendering without a need for custom HTML templates. These include:</p> <ul> <li>FieldSet - Represents a grouping of form fields (replaces the use of lists/tuples)</li> <li>InlineFields - Multiple fields rendered on a single row</li> <li>TabbedGroups - Fieldsets rendered under navigable tabs within a form</li> <li>ObjectAttribute - Renders a read-only representation of a particular object attribute (for reference)</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#legacy-admin-ui-disabled-12325",
      "title": "Legacy Admin UI Disabled (#12325)",
      "text": "<p>The legacy admin user interface is now disabled by default, and the few remaining views it provided have been relocated to the primary UI. NetBox deployments which still depend on the legacy admin functionality for plugins can enable it by setting the <code>DJANGO_ADMIN_ENABLED</code> configuration parameter to true.</p>"
    },
    {
      "location": "release-notes/version-4.0/#enhancements_9",
      "title": "Enhancements",
      "text": "<ul> <li>#12776 - Introduce the <code>htmx_table</code> template tag to simplify the rendering of embedded tables</li> <li>#12851 - Replace the deprecated Bleach HTML sanitization library with nh3</li> <li>#13283 - Display additional context on API-backed dropdown form fields (e.g. object descriptions)</li> <li>#13918 - Add <code>facility</code> field to Location model</li> <li>#14237 - Automatically clear dependent selection form fields when modifying a parent selection</li> <li>#14279 - Make the current request available as context when running custom validators</li> <li>#14454 - Include member devices in the REST API representation of virtual chassis</li> <li>#14637 - Upgrade to Django 5.0</li> <li>#14672 - Add support for Python 3.12</li> <li>#14728 - The plugins list view has been moved from the legacy admin UI to the main NetBox UI</li> <li>#14729 - All background task views have been moved from the legacy admin UI to the main NetBox UI</li> <li>#14736 - Introduce a user preference to enable HTMX-powered navigation</li> <li>#14438 - Track individual custom scripts as database objects</li> <li>#15131 - Automatically annotate related object counts on REST API querysets</li> <li>#15237 - Ensure consistent filtering ability for all model fields by testing for missing/incorrect filters</li> <li>#15238 - Include the <code>description</code> field in \"brief\" REST API serializations</li> <li>#15278 - BaseModelSerializer now takes a <code>nested</code> keyword argument allowing it to represent a related object</li> <li>#15383 - Standardize filtering logic for the parents of recursively-nested models (parent &amp; ancestor filters)</li> <li>#15413 - The global search engine now supports caching of non-field object attributes</li> <li>#15490 - Custom validators can now reference related object attributes via dotted paths</li> <li>#15547 - Add comments field to CustomField model</li> <li>#15712 - Enable image attachments for virtual machines</li> <li>#15735 - Display all dates &amp; times in ISO 8601 format consistently</li> <li>#15754 - Remove <code>is_staff</code> restriction on admin menu items</li> <li>#15764 - Increase maximum value of Device <code>vc_position</code> field</li> <li>#15915 - Provide a comprehensive system status view with export functionality</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#bug-fixes-from-beta2",
      "title": "Bug Fixes (from Beta2)",
      "text": "<ul> <li>#15630 - Ensure consistent toggling between light &amp; dark UI modes</li> <li>#15802 - Improve hyperlink color contrast in dark mode</li> <li>#15809 - Fix GraphQL union support for nullable fields</li> <li>#15815 - Convert dashboard widgets referencing old user/group models</li> <li>#15826 - Update <code>EXEMPT_EXCLUDE_MODELS</code> to reference new user &amp; group models</li> <li>#15831 - Fix LDAP group mirroring</li> <li>#15838 - Fix AttributeError exception when rendering custom date fields</li> <li>#15852 - Update total results count when filtering object lists</li> <li>#15853 - Correct background color for cable trace SVG images in dark mode</li> <li>#15855 - Fix AttributeError exception when creating an event rule tied to a custom script</li> <li>#15944 - Fix styling of paginator when displayed above an object list</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#10587 - Enable pagination and filtering for custom script logs</li> <li>#12325 - The Django admin UI is now disabled by default (set <code>DJANGO_ADMIN_ENABLED</code> to True to enable it)</li> <li>#12510 - Dropped support for legacy reports</li> <li>#12795 - NetBox now uses custom User and Group models rather than the stock models provided by Django</li> <li>#13647 - Squash all database migrations prior to v3.7</li> <li>#14092 - Remove backward compatibility for importing plugin resources from <code>extras.plugins</code> (now <code>netbox.plugins</code>)</li> <li>#14638 - Drop support for Python 3.8 and 3.9</li> <li>#14657 - Remove backward compatibility for old permissions mapping under <code>ActionsMixin</code></li> <li>#14658 - Remove backward compatibility for importing <code>process_webhook()</code> from <code>extras.webhooks_worker</code> (now <code>extras.webhooks.send_webhook()</code>)</li> <li>#14740 - Remove the obsolete <code>BootstrapMixin</code> form mixin class</li> <li>#15042 - The logic for registering models &amp; model features now executes under the <code>ready()</code> method of individual app configs, rather than relying on the <code>class_prepared</code> signal</li> <li>#15099 - Remove obsolete <code>device_role</code> and <code>device_role_id</code> filters for devices</li> <li>#15100 - Remove obsolete <code>NullableCharField</code> class</li> <li>#15154 - The installation documentation been extended to include instructions and an example configuration file for uWSGI as an alternative to gunicorn</li> <li>#15193 - Switch to compiled distribution of the <code>psycopg</code> library</li> <li>#15277 - Replace references to ContentType without ObjectType proxy model &amp; standardize field names</li> <li>#15292 - Remove obsolete <code>device_role</code> attribute from Device model (this field was renamed to <code>role</code> in v3.6)</li> <li>#15357 - The <code>object_type</code> field on the CustomField model has been renamed to <code>related_object_type</code> to avoid confusion with its <code>object_types</code> field</li> <li>#15401 - PostgreSQL indexes and sequence tables for the relocated L2VPN models (see #14311) have been renamed </li> <li>#15462 - Relocate resources from the <code>utilities.utils</code> module</li> <li>#15464 - The many-to-many relationships for ObjectPermission are now defined on the custom User and Group models</li> <li>#15736 - Remove obsolete <code>annotated_date</code> template filter &amp; <code>annotated_now</code> template tag</li> <li>#15738 - Remove obsolete configuration parameters for date &amp; time formatting</li> <li>#15752 - Remove the obsolete <code>ENABLE_LOCALIZATION</code> configuration parameter</li> <li>#15942 - Refactor <code>settings_and_registry()</code> context processor</li> </ul>"
    },
    {
      "location": "release-notes/version-4.0/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>The <code>/api/extras/content-types/</code> endpoint has moved to <code>/api/extras/object-types/</code></li> <li>The <code>/api/extras/reports/</code> endpoint has been removed</li> <li>The <code>description</code> field is now included by default when using \"brief mode\" for all relevant models</li> <li>dcim.Device<ul> <li>The obsolete read-only attribute <code>device_role</code> has been removed (replaced by <code>role</code> in v3.6)</li> </ul> </li> <li>dcim.Location<ul> <li>Added the optional <code>location</code> field</li> </ul> </li> <li>dcim.VirtualChassis<ul> <li>Added <code>members</code> field to list the member devices</li> </ul> </li> <li>extras.CustomField<ul> <li><code>content_types</code> has been renamed to <code>object_types</code></li> <li><code>object_type</code> has been renamed to <code>related_object_type</code></li> <li>The <code>content_types</code> filter is now <code>object_type</code></li> <li>The <code>content_type_id</code> filter is now <code>object_type_id</code></li> </ul> </li> <li>extras.CustomLink<ul> <li><code>content_types</code> has been renamed to <code>object_types</code></li> <li>The <code>content_types</code> filter is now <code>object_type</code></li> <li>The <code>content_type_id</code> filter is now <code>object_type_id</code></li> </ul> </li> <li>extras.EventRule<ul> <li><code>content_types</code> has been renamed to <code>object_types</code></li> <li>The <code>content_types</code> filter is now <code>object_type</code></li> <li>The <code>content_type_id</code> filter is now <code>object_type_id</code></li> </ul> </li> <li>extras.ExportTemplate<ul> <li><code>content_types</code> has been renamed to <code>object_types</code></li> <li>The <code>content_types</code> filter is now <code>object_type</code></li> <li>The <code>content_type_id</code> filter is now <code>object_type_id</code></li> </ul> </li> <li>extras.ImageAttachment<ul> <li><code>content_type</code> has been renamed to <code>object_type</code></li> <li>The <code>content_type</code> filter is now <code>object_type</code></li> </ul> </li> <li>extras.SavedFilter<ul> <li><code>content_types</code> has been renamed to <code>object_types</code></li> <li>The <code>content_types</code> filter is now <code>object_type</code></li> <li>The <code>content_type_id</code> filter is now <code>object_type_id</code></li> </ul> </li> <li>tenancy.ContactAssignment<ul> <li><code>content_type</code> has been renamed to <code>object_type</code></li> <li>The <code>content_type_id</code> filter is now <code>object_type_id</code></li> </ul> </li> <li>users.Group<ul> <li>Added the <code>permissions</code> field</li> </ul> </li> <li>users.User<ul> <li>Added the <code>permissions</code> field</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/",
      "title": "NetBox v4.1",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#v4111-2025-01-06",
      "title": "v4.1.11 (2025-01-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17771 - Fix duplicate entries appearing on VLAN list when filtering by interface assignment</li> <li>#18222 - Pass event rule action data to webhooks as context data</li> <li>#18263 - Fix recalculation of cable paths when modifying cable terminations via the REST API</li> <li>#18271 - Require only encryption or authentication algorithm when creating an IPSec proposal via the REST API</li> <li>#18289 - Enable ordering modules and module types by created &amp; last updated times</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v4110-2024-12-23",
      "title": "v4.1.10 (2024-12-23)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#18260 - Fix object change logging</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v419-2024-12-17",
      "title": "v4.1.9 (2024-12-17)",
      "text": "<p>Do Not Use</p> <p>This release contains a regression which breaks change logging. Please use release v4.1.10 instead.</p>"
    },
    {
      "location": "release-notes/version-4.1/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#17215 - Change the highlighted color of disabled interfaces in interface lists</li> <li>#18224 - Apply all registered request processors when running custom scripts</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#16757 - Fix rendering of IP addresses table when assigning an existing IP address to an interface with global HTMX navigation enabled</li> <li>#17868 - Fix <code>ZeroDivisionError</code> exception under specific circumstances when generating a cable trace</li> <li>#18124 - Enable referencing cable attributes when querying a <code>cabletermination_set</code> via the GraphQL API</li> <li>#18230 - Fix <code>AttributeError</code> exception when attempting to edit an IP address assigned to a virtual machine interface</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v418-2024-12-12",
      "title": "v4.1.8 (2024-12-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#17071 - Enable OOB IP address designation during bulk import</li> <li>#17465 - Enable designation of rack type during bulk import &amp; bulk edit</li> <li>#17889 - Enable designating an IP address as out-of-band for a device upon creation</li> <li>#17960 - Add L2TP, PPTP, Wireguard, and OpenVPN tunnel types</li> <li>#18021 - Automatically clear cache on restart when <code>DEBUG</code> is enabled</li> <li>#18061 - Omit stack trace from rendered device/VM configuration when an exception is raised</li> <li>#18065 - Include status in device details when hovering on rack elevation</li> <li>#18211 - Enable the dynamic registration of context managers for request processing</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#14044 - Fix unhandled AttributeError exception when bulk renaming objects</li> <li>#17490 - Fix dynamic inclusion support for config templates</li> <li>#17810 - Fix validation of racked device fields when modifying via REST API</li> <li>#17820 - Ensure default custom field values are populated when creating new modules</li> <li>#18044 - Show plugin-generated alerts within UI views for custom scripts</li> <li>#18150 - Fix REST API pagination for low <code>MAX_PAGE_SIZE</code> values</li> <li>#18183 - Omit UI navigation bar when printing</li> <li>#18213 - Fix searching for ASN ranges by name</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v417-2024-11-21",
      "title": "v4.1.7 (2024-11-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#15239 - Enable adding/removing individual VLANs while bulk editing device interfaces</li> <li>#17871 - Enable the assignment/removal of virtualization cluster via device bulk edit</li> <li>#17934 - Add 1000Base-LX interface type</li> <li>#18007 - Hide sensitive parameters under data source view (even for privileged users)</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17459 - Correct help text on <code>name</code> field of module type component templates</li> <li>#17901 - Ensure GraphiQL UI resources are served locally</li> <li>#17921 - Fix scheduling of recurring custom scripts</li> <li>#17923 - Fix the execution of custom scripts via REST API &amp; management command</li> <li>#17963 - Fix selection of all listed objects during bulk edit</li> <li>#17969 - Fix system info export when a config revision exists</li> <li>#17972 - Force evaluation of <code>LOGIN_REQUIRED</code> when requesting static media</li> <li>#17986 - Correct labels for virtual machine &amp; virtual disk size properties</li> <li>#18037 - Fix validation of maximum VLAN ID value when defining VLAN groups</li> <li>#18038 - The <code>to_grams()</code> utility function should always return an integer value</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v416-2024-10-31",
      "title": "v4.1.6 (2024-10-31)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_5",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17700 - Fix warning when no scripts are found within a script module</li> <li>#17884 - Fix translation support for certain tab headings</li> <li>#17885 - Fix regression preventing custom scripts from executing</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v415-2024-10-28",
      "title": "v4.1.5 (2024-10-28)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#17789 - Provide a single \"scope\" field for bulk editing VLAN group scope assignments</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_6",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17358 - Fix validation of overlapping IP ranges</li> <li>#17374 - Fix styling of highlighted table rows in dark mode</li> <li>#17460 - Ensure bulk action buttons are consistent for device type components</li> <li>#17635 - Ensure AbortTransaction is caught when running a custom script with <code>commit=False</code></li> <li>#17685 - Ensure background jobs are validated before being scheduled</li> <li>#17710 - Remove cached fields on CableTermination model from GraphQL API</li> <li>#17740 - Ensure support for image attachments with a <code>.webp</code> file extension</li> <li>#17749 - Restore missing <code>devicetypes</code> and <code>children</code> fields for several objects in GraphQL API</li> <li>#17754 - Remove paginator from version history table under plugin view</li> <li>#17759 - Retain <code>job_timeout</code> value when scheduling a recurring custom script</li> <li>#17774 - Fix SSO login support for Entra ID (formerly Azure AD)</li> <li>#17802 - Fix background color for bulk rename buttons in list views</li> <li>#17838 - Adjust <code>manage.py</code> to reference <code>python3</code> executable</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v414-2024-10-15",
      "title": "v4.1.4 (2024-10-15)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#enhancements_4",
      "title": "Enhancements",
      "text": "<ul> <li>#11671 - Display device's rack position in cable traces</li> <li>#15829 - Rename Microsoft Azure AD SSO backend to Microsoft Entra ID</li> <li>#16009 - Float form &amp; bulk operation buttons within UI</li> <li>#17079 - Introduce additional choices for device airflow direction</li> <li>#17216 - Add EVPN-VPWS L2VPN type</li> <li>#17655 - Limit the display of tagged VLANs within interface tables</li> <li>#17669 - Enable filtering VLANs by assigned device or VM interface</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_7",
      "title": "Bug Fixes",
      "text": "<ul> <li>#16024 - Fix AND/OR filtering in GraphQL API for selection fields</li> <li>#17400 - Fix cable tracing across split paths</li> <li>#17562 - Fix GraphQL API query support for custom field choices</li> <li>#17566 - Fix AttributeError exception resulting from background jobs with no associated object type</li> <li>#17614 - Disallow removal of a master device from its virtual chassis</li> <li>#17636 - Fix filtering of related objects when adding a power port, rear port, or inventory item template to a device type</li> <li>#17644 - Correct sizing of logo &amp; SSO icons on login page</li> <li>#17648 - Fix AttributeError exception when attempting to delete a background job under certain conditions</li> <li>#17663 - Fix extended lookups for choice field filters</li> <li>#17671 - Fix the display of rack types in global search results</li> <li>#17713 - Fix UnboundLocalError exception when attempting to sync data source in parallel</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v413-2024-10-02",
      "title": "v4.1.3 (2024-10-02)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#enhancements_5",
      "title": "Enhancements",
      "text": "<ul> <li>#17639 - Add SOCKS support to proxy settings for Git remote data sources</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_8",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17558 - Raise validation error when attempting to remove a custom field choice in use</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v412-2024-09-26",
      "title": "v4.1.2 (2024-09-26)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#enhancements_6",
      "title": "Enhancements",
      "text": "<ul> <li>#14201 - Enable global search for AS numbers using \"AS\" prefix</li> <li>#15408 - Enable bulk import of primary IPv4 &amp; IPv6 addresses for virtual device contexts (VDCs)</li> <li>#16781 - Add 100Base-X SFP interface type</li> <li>#17255 - Include return URL when creating new IP address from prefix IPs list</li> <li>#17471 - Add Eaton C39 power outlet type</li> <li>#17482 - Do not preload Branch &amp; StagedChange models in <code>nbshell</code></li> <li>#17550 - Add IEEE 802.15.4 wireless interface type</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_9",
      "title": "Bug Fixes",
      "text": "<ul> <li>#16837 - Fix filtering of cables with no type assigned</li> <li>#17083 - Trim clickable area of form field labels</li> <li>#17126 - Show total device weight in both imperial &amp; metric units</li> <li>#17360 - Fix AttributeError under child object views when experimental HTMX navigation is enabled</li> <li>#17406 - Fix the cleanup of stale custom field data after removing a plugin</li> <li>#17419 - Rebuild MPTT for module bays on upgrade to v4.1</li> <li>#17492 - Fix URL resolution in <code>NetBoxModelSerializer</code> for plugin models</li> <li>#17497 - Fix uncaught FieldError exception when referencing an invalid field on a related object during bulk import</li> <li>#17498 - Fix MultipleObjectsReturned exception when importing a device type without uniquely specifying a manufacturer</li> <li>#17501 - Fix reporting of last run time &amp; status for custom scripts under UI</li> <li>#17511 - Restore consistent font support for non-Latin characters</li> <li>#17517 - Fix cable termination selection after switching termination type</li> <li>#17521 - Correct text color in notification pop-ups under dark mode</li> <li>#17522 - Fix language translation of form field labels under user preferences</li> <li>#17537 - Fix global search support for ASN range names</li> <li>#17555 - Fix toggling disconnected interfaces under device view</li> <li>#17601 - Record change to terminating object when disconnecting a cable</li> <li>#17605 - Fix calculation of aggregate VM disk space under cluster view</li> <li>#17611 - Correct custom field minimum value validation error message</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v411-2024-09-12",
      "title": "v4.1.1 (2024-09-12)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#enhancements_7",
      "title": "Enhancements",
      "text": "<ul> <li>#16926 - Add USB front &amp; rear port types</li> <li>#17347 - Add NEMA L22-20 power port &amp; outlet types</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes_10",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17066 - Fix OpenAPI schema definition for custom scripts REST API endpoint</li> <li>#17332 - Restore pagination for object list dashboard widgets</li> <li>#17333 - Avoid prefetching all jobs when retrieving custom scripts via the REST API</li> <li>#17353 - Fix styling of map buttons under site and device views</li> <li>#17354 - Prevent object &amp; multi-object custom fields from breaking bulk import forms</li> <li>#17362 - Remove duplicate prefixes &amp; IP addresses returned by the <code>present_in_vrf</code> query filter</li> <li>#17364 - Fix rendering of Markdown tables inside object list dashboard widgets</li> <li>#17387 - Fix display of the changelog tab for users with sufficient permission</li> <li>#17410 - Enable debug toolbar middleware for <code>strawberry-django</code> only when <code>DEBUG</code> is true</li> <li>#17414 - Fix support for declaring individual VLAN IDs within a VLAN group</li> <li>#17431 - Fix database migration error when upgrading to v4.1 from v3.7 or earlier</li> <li>#17437 - Fix exception when specifying a bridge relationship on an interface template</li> <li>#17444 - Custom script fails to execute when triggered by an event rule</li> <li>#17457 - GraphQL <code>service_list</code> filter should not require a port number</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#v410-2024-09-03",
      "title": "v4.1.0 (2024-09-03)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Several filters deprecated in v4.0 have been removed (see #15410).</li> <li>The unit size for <code>VirtualMachine.disk</code> and <code>VirtualDisk.size</code> has been changed from 1 gigabyte to 1 megabyte. Existing values will be adjusted automatically during the upgrade process.</li> <li>The <code>min_vid</code> and <code>max_vid</code> fields on the VLAN group model have been replaced with <code>vid_ranges</code>, an array of starting and ending VLAN ID pairs.</li> <li>The five individual event type fields on the EventRule model have been replaced by a single <code>event_types</code> array field, which lists applicable event types by name.</li> <li>All UI views &amp; API endpoints associated with change records have been moved from <code>/extras</code> to <code>/core</code>.</li> <li>The <code>validate()</code> method on CustomValidator subclasses now must accept the request argument (deprecated in v4.0 by #14279).</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-4.1/#circuit-groups-7025",
      "title": "Circuit Groups (#7025)",
      "text": "<p>Circuits can now be assigned to groups for administrative purposes. Each circuit may be assigned to multiple groups, and each assignment may optionally indicate a priority (primary, secondary, or tertiary).</p>"
    },
    {
      "location": "release-notes/version-4.1/#vlan-group-id-ranges-9627",
      "title": "VLAN Group ID Ranges (#9627)",
      "text": "<p>The VLAN group model has been enhanced to support multiple VLAN ID (VID) ranges, whereas previously it could track only a single beginning and ending VID pair. VID ranges are stored as an array of beginning and ending (inclusive) integer pairs, e.g. <code>1-100,1000-1999</code>.</p>"
    },
    {
      "location": "release-notes/version-4.1/#nested-device-modules-10500",
      "title": "Nested Device Modules (#10500)",
      "text": "<p>Module bays can now be added to modules to effect a hierarchical arrangement of submodules within a device. A module installed within a device's module bay may itself have module bays into which child modules may be installed.</p>"
    },
    {
      "location": "release-notes/version-4.1/#rack-types-12826",
      "title": "Rack Types (#12826)",
      "text": "<p>A new rack type model has been introduced, which functions similarly to device types. Users can now define a common make and model of equipment rack, the attributes of which are automatically populated when creating a new rack of that type. Backward compatibility for racks with individually defined characteristics is fully retained.</p>"
    },
    {
      "location": "release-notes/version-4.1/#plugins-catalog-integration-14731",
      "title": "Plugins Catalog Integration (#14731)",
      "text": "<p>The NetBox UI now integrates directly with the canonical plugins catalog hosted by NetBox Labs. Users can now explore available plugins and check for newer releases natively within the NetBox user interface.</p>"
    },
    {
      "location": "release-notes/version-4.1/#user-notifications-15621",
      "title": "User Notifications (#15621)",
      "text": "<p>NetBox now includes a user notification system. Users can subscribe to individual objects and be alerted to changes within the web interface. Additionally, event rules can be created to trigger notifications for specific users and/or groups. Plugins can also employ this notification system for their own purposes.</p>"
    },
    {
      "location": "release-notes/version-4.1/#enhancements_8",
      "title": "Enhancements",
      "text": "<ul> <li>#7537 - Add a serial number field for virtual machines</li> <li>#8198 - Enable uniqueness enforcement for custom field values</li> <li>#8984 - Enable filtering of custom script output by log level</li> <li>#11969 - Support for tracking airflow on racks and module types</li> <li>#14656 - Dynamically render the custom field edit form depending on the selected field type</li> <li>#15106 - Add <code>distance</code> and <code>distance_unit</code> fields for wireless links</li> <li>#15156 - Add <code>display_url</code> field to all REST API serializers, which links to the corresponding UI view for an object</li> <li>#16574 - Add <code>last_synced</code> time to REST API serializer for data sources</li> <li>#16580 - Enable plugin views to enforce <code>LOGIN_REQUIRED</code> selectively (remove <code>AUTH_EXEMPT_PATHS</code>)</li> <li>#16782 - Enable filtering of selection choices for object and multi-object custom fields</li> <li>#16907 - Update user interface styling</li> <li>#17051 - Introduce <code>ISOLATED_DEPLOYMENT</code> config parameter for denoting Internet isolation</li> <li>#17221 - <code>ObjectEditView</code> now supports HTMX-based object editing</li> <li>#17288 - Introduce a configurable limit on the number of aliases within a GraphQL API request</li> <li>#17289 - Enforce a standard policy for local passwords by default</li> <li>#17318 - Include the assigned provider in nested API representation of circuits</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#bug-fixes-from-beta1",
      "title": "Bug Fixes (From Beta1)",
      "text": "<ul> <li>#17086 - Fix exception when viewing a job with no related object</li> <li>#17097 - Record static object representation when calling <code>NotificationGroup.notify()</code></li> <li>#17098 - Prevent automatic deletion of related notifications when deleting an object</li> <li>#17159 - Correct file paths in plugin installation instructions</li> <li>#17163 - Fix filtering of related services under IP address view</li> <li>#17169 - Avoid duplicating catalog listings for installed plugins</li> <li>#17301 - Correct styling of the edit &amp; delete buttons for custom script modules</li> <li>#17302 - Fix log level filtering support for custom script messages</li> <li>#17306 - Correct rounding of reported VLAN group utilization</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#plugins",
      "title": "Plugins",
      "text": "<ul> <li>#15692 - Introduce improved plugin support for background jobs</li> <li>#16359 - Enable plugins to embed content in the top navigation bar</li> <li>#16726 - Extend <code>PluginTemplateExtension</code> to enable registering multiple models</li> <li>#16776 - Add an <code>alerts()</code> method to <code>PluginTemplateExtension</code> for embedding important information on object views</li> <li>#16886 - Introduce a mechanism for plugins to register custom event types (for use with user notifications)</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#14692 - Change the atomic unit for virtual disks from 1GB to 1MB</li> <li>#14861 - The URL path for UI views concerning virtual disks has been standardized to <code>/virtualization/virtual-disks/</code></li> <li>#15410 - Remove various deprecated query filters</li> <li>#15908 - Indicate product edition in release data</li> <li>#16388 - Move all change logging resources from <code>extras</code> to <code>core</code></li> <li>#16884 - Remove the ID column from the default table configuration for changelog records</li> <li>#16988 - Relocate rack items in navigation menu</li> <li>#17143 - The use of legacy \"nested\" serializer classes has been deprecated</li> </ul>"
    },
    {
      "location": "release-notes/version-4.1/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>The <code>/api/extras/object-changes/</code> endpoint has moved to <code>/api/core/object-changes/</code>.</li> <li>Most object representations now include a read-only <code>display_url</code> field, which links to the object's corresponding UI view.</li> <li>Added the following endpoints:<ul> <li><code>/api/circuits/circuit-groups/</code></li> <li><code>/api/circuits/circuit-group-assignments/</code></li> <li><code>/api/dcim/rack-types/</code></li> <li><code>/api/extras/notification-groups/</code></li> <li><code>/api/extras/notifications/</code></li> <li><code>/api/extras/subscriptions/</code></li> </ul> </li> <li>circuits.Circuit<ul> <li>Added the <code>assignments</code> field, which lists all group assignments</li> </ul> </li> <li>core.DataSource<ul> <li>Added the read-only <code>last_synced</code> field</li> </ul> </li> <li>dcim.ModuleBay<ul> <li>Added the optional <code>module</code> foreign key field</li> </ul> </li> <li>dcim.ModuleBayTemplate<ul> <li>Added the optional <code>module_type</code> foreign key field</li> </ul> </li> <li>dcim.ModuleType<ul> <li>Added the optional <code>airflow</code> choice field</li> </ul> </li> <li>dcim.Rack<ul> <li>Added the optional <code>rack_type</code> foreign key field</li> <li>Added the optional <code>airflow</code> choice field</li> </ul> </li> <li>extras.CustomField<ul> <li>Added the <code>related_object_filter</code> JSON field for object and multi-object custom fields</li> <li>Added the <code>validation_unique</code> boolean field</li> </ul> </li> <li>extras.EventRule<ul> <li>Removed the <code>type_create</code>, <code>type_update</code>, <code>type_delete</code>, <code>type_job_start</code>, and <code>type_job_end</code> boolean fields</li> <li>Added the <code>event_types</code> array field</li> </ul> </li> <li>ipam.VLANGroup<ul> <li>Removed the <code>min_vid</code> and <code>max_vid</code> fields</li> <li>Added the <code>vid_ranges</code> field, an array of starting &amp; ending VLAN IDs</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li>Added the optional <code>serial</code> field</li> </ul> </li> <li>wireless.WirelessLink<ul> <li>Added the optional <code>distance</code> and <code>distance_unit</code> fields</li> </ul> </li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/",
      "title": "NetBox v4.2",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#v425-2025-03-06",
      "title": "v4.2.5 (2025-03-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#enhancements",
      "title": "Enhancements",
      "text": "<ul> <li>#17357 - Use VirtualChassis name as fallback for unnamed devices</li> <li>#17542 - Add contact assignments to VPN tunnels</li> <li>#17944 - Allow script inputs to be filtered on ObjectVar and MultiObjectVar selections</li> <li>#18024 - Add permalink URL pattern to match a custom script by module and class name</li> <li>#18095 - Ensure contacts are shown on children of objects with contacts</li> <li>#18141 - Support \"Quick Add\" for plugins</li> <li>#18403 - Improve performance of job list views</li> <li>#18693 - Support setting VLAN translation on bulk edit of interfaces</li> <li>#18772 - Add \"type\" filter for virtual circuits</li> <li>#18774 - Add tooltip preview of tag descriptions when hovering over tags</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#bug-fixes",
      "title": "Bug Fixes",
      "text": "<ul> <li>#15016 - Prevent AssertionError when adding multiple devices \"mid-span\" in a cable trace</li> <li>#15924 - Prevent setting tagged VLANs on interfaces with mode: tagged-all</li> <li>#17488 - Ensure VLANGroup.vid_ranges shows up in API results</li> <li>#17709 - Allow primary key for nested models in OpenAPI request schemas</li> <li>#17796 - Fix IndexError on \"Create &amp; Add Another\" operation on custom field choices</li> <li>#18605 - Limit VLAN selection dropdown to choices appropriate to site</li> <li>#18722 - Improve UI feedback on failed script execution</li> <li>#18729 - Fix unpredictable ordering on querysets with annotations/groupings</li> <li>#18753 - Prevent webhooks from being triggered on a script dry-run</li> <li>#18758 - Fix FieldError when sorting by account count field in providers list</li> <li>#18768 - Fix removing a secondary MAC address from an interface</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#v424-2025-02-21",
      "title": "v4.2.4 (2025-02-21)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#enhancements_1",
      "title": "Enhancements",
      "text": "<ul> <li>#17309 - Omit empty counts in related object tables</li> <li>#18277 - Improve multi-table inheritance in serialization of change-logged models</li> <li>#18286 - Add more job duration choices</li> <li>#18357 - Display author name in plugin list for locally installed plugins</li> <li>#18408 - Add Paused status for virtual machines</li> <li>#18584 - Add rack type column to manufacturer list</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#bug-fixes_1",
      "title": "Bug Fixes",
      "text": "<ul> <li>#17436 - Fix {module} replacement in module bays</li> <li>#18013 - Limit object type to selected object in change log filter</li> <li>#18241 - Default logging level of custom scripts changed to INFO</li> <li>#18247 - Fix visibility of disabled cable paths in dark mode</li> <li>#18480 - Clean data passed to script in runscript command</li> <li>#18555 - Add default get_absolute_url method to plugin models</li> <li>#18585 - Fix filtering circuits by location</li> <li>#18593 - Fix \"Create &amp; Add Another\" IP Address workflow</li> <li>#18594 - Enable sorting by ASN count on site and provider lists</li> <li>#18619 - Ensure shift-click selection selects only visible list items</li> <li>#18674 - Preserve form values when selecting speed on circuit termination</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#v423-2025-02-04",
      "title": "v4.2.3 (2025-02-04)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#enhancements_2",
      "title": "Enhancements",
      "text": "<ul> <li>#18518 - Add a \"hostname\" <code>&lt;meta&gt;</code> tag to the page header</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#bug-fixes_2",
      "title": "Bug Fixes",
      "text": "<ul> <li>#18497 - Fix unhandled <code>FieldDoesNotExist</code> exception when search results include virtual circuit</li> <li>#18433 - Fix MAC address not shown as \"primary for interface\" in MAC address detail view</li> <li>#18154 - Allow anonymous users to change default table preferences</li> <li>#18515 - Fix Django <code>collectstatic</code> management command in debug mode with Redis not running</li> <li>#18456 - Avoid duplicate MAC Address column in interface tables</li> <li>#18447 - Fix <code>FieldError</code> exception when sorting interface tables on MAC Address columns </li> <li>#18438 - Improve performance in IPAM migration <code>0072_prefix_cached_relations</code> when upgrading from v4.1 or earlier</li> <li>#18436 - Reset primary MAC address when unassigning MAC address from interface</li> <li>#18181 - Fix \"Create &amp; Add Another\" workflow when adding IP addresses to interfaces</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#v422-2025-01-17",
      "title": "v4.2.2 (2025-01-17)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#bug-fixes_3",
      "title": "Bug Fixes",
      "text": "<ul> <li>#18336 - Validate new rack height against installed devices when changing a rack's type</li> <li>#18350 - Fix <code>FieldDoesNotExist</code> exception when global search results include a circuit termination</li> <li>#18353 - Disable fetching of plugin catalog data when <code>ISOLATED_DEPLOYMENT</code> is enabled</li> <li>#18362 - Avoid transmitting census data on every worker restart</li> <li>#18363 - Fix support for assigning a MAC address to an interface via the REST API</li> <li>#18368 - Restore missing attributes from REST API serializer for MAC addresses (<code>tags</code>, <code>created</code>, <code>last_updated</code>, and custom fields)</li> <li>#18369 - Fix <code>TypeError</code> exception when rendering the system configuration view with one or more custom classes defined under <code>PROTECTION_RULES</code></li> <li>#18373 - Fix <code>AttributeError</code> exception when attempting to assign host devices to a cluster</li> <li>#18376 - Fix the display of tagged VLANs in interfaces list for Q-in-Q interfaces</li> <li>#18379 - Ensure RSS feed dashboard widget content is sanitized</li> <li>#18392 - Virtual machines should not inherit config contexts assigned to locations</li> <li>#18400 - Fix support for <code>STORAGE_BACKEND</code> configuration parameter</li> <li>#18406 - Scope column headers in object lists should not be orderable</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#v421-2025-01-08",
      "title": "v4.2.1 (2025-01-08)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#bug-fixes_4",
      "title": "Bug Fixes",
      "text": "<ul> <li>#18282 - Fix ordering of prefixes list by assigned VLAN</li> <li>#18314 - Fix KeyError exception when rendering pre-saved dashboard (<code>requires_internet</code> missing)</li> <li>#18316 - Fix AttributeError exception when global search results include prefixes and/or clusters</li> <li>#18318 - Correct navigation breadcrumbs for module type UI view</li> <li>#18324 - Correct filtering for certain related object listings</li> <li>#18329 - Address upstream bug in GraphQL API where only one primary IP address is returned within a device/VM list</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#v420-2025-01-06",
      "title": "v4.2.0 (2025-01-06)",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#breaking-changes",
      "title": "Breaking Changes",
      "text": "<ul> <li>Support for the Django admin UI has been completely removed. (The Django admin UI was disabled by default in NetBox v4.0.)</li> <li>This release drops support for PostgreSQL 12. PostgreSQL 13 or later is required to run this release.</li> <li>NetBox has adopted collation-based natural ordering for many models. This may alter the order in which some objects are listed by default.</li> <li>Automatic redirects from pre-v4.1 UI views for virtual disks have been removed.</li> <li>The <code>site</code> and <code>provider_network</code> foreign key fields on <code>circuits.CircuitTermination</code> have been replaced by the <code>termination</code> generic foreign key.</li> <li>The <code>site</code> foreign key field on <code>ipam.Prefix</code> has been replaced by the <code>scope</code> generic foreign key.</li> <li>The <code>site</code> foreign key field on <code>virtualization.Cluster</code> has been replaced by the <code>scope</code> generic foreign key.</li> <li>The <code>circuit</code> foreign key field on <code>circuits.CircuitGroupAssignment</code> has been replaced by the <code>member</code> generic foreign key.</li> <li>Obsolete nested REST API serializers have been removed. These were deprecated in NetBox v4.1 under #17143.</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#new-features",
      "title": "New Features",
      "text": ""
    },
    {
      "location": "release-notes/version-4.2/#assign-multiple-mac-addresses-per-interface-4867",
      "title": "Assign Multiple MAC Addresses per Interface (#4867)",
      "text": "<p>MAC addresses are now managed as independent objects, rather than attributes on device and VM interfaces. NetBox now supports the assignment of multiple MAC addresses per interface, and allows a primary MAC address to be designated for each.</p>"
    },
    {
      "location": "release-notes/version-4.2/#quick-add-ui-widget-5858",
      "title": "Quick Add UI Widget (#5858)",
      "text": "<p>A new UI widget has been introduced to enable conveniently creating new related objects while creating or editing an object. For instance, it is now possible to create and assign a new device role when creating or editing a device from within the device form.</p>"
    },
    {
      "location": "release-notes/version-4.2/#vlan-translation-7336",
      "title": "VLAN Translation (#7336)",
      "text": "<p>User can now define policies which track the translation of VLAN IDs on IEEE 802.1Q-encapsulated interfaces. Translation policies can be reused across multiple interfaces.</p>"
    },
    {
      "location": "release-notes/version-4.2/#virtual-circuits-13086",
      "title": "Virtual Circuits (#13086)",
      "text": "<p>New models have been introduced to support the documentation of virtual circuits as an extension to the physical circuit modeling already supported. This enables users to accurately reflect point-to-point or multipoint virtual circuits atop infrastructure comprising physical circuits and cables.</p>"
    },
    {
      "location": "release-notes/version-4.2/#q-in-q-encapsulation-13428",
      "title": "Q-in-Q Encapsulation (#13428)",
      "text": "<p>NetBox now supports the designation of customer VLANs (CVLANs) and service VLANs (SVLANs) to support IEEE 802.1ad/Q-in-Q encapsulation. Each interface can now have it mode designated \"Q-in-Q\" and be assigned an SVLAN.</p>"
    },
    {
      "location": "release-notes/version-4.2/#enhancements_3",
      "title": "Enhancements",
      "text": "<ul> <li>#6414 - Prefixes can now be scoped by region, site group, site, or location</li> <li>#7699 - Virtualization clusters can now be scoped by region, site group, site, or location</li> <li>#9604 - The scope of a circuit termination now include a region, site group, site, location, or provider network</li> <li>#10711 - Wireless LANs can now be scoped by region, site group, site, or location</li> <li>#11279 - Improved the use of natural ordering for various models throughout the application</li> <li>#12596 - Extended the virtualization clusters REST API endpoint to report on allocated VM resources</li> <li>#16547 - Add a geographic distance field for circuits</li> <li>#16783 - Add an operational status field for inventory items</li> <li>#17195 - Add a color field for power outlets</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#plugins",
      "title": "Plugins",
      "text": "<ul> <li>#15093 - Introduced the <code>events_pipeline</code> configuration parameter, which allows plugins to hook into NetBox event processing</li> <li>#16546 - NetBoxModel now provides a default <code>get_absolute_url()</code> method</li> <li>#16971 - Plugins can now easily register system jobs to perform background tasks</li> <li>#17029 - Registering a <code>PluginTemplateExtension</code> subclass for a single model has been deprecated (replace <code>model</code> with <code>models</code>)</li> <li>#18023 - Extend <code>register_model_view()</code> to handle list views</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#other-changes",
      "title": "Other Changes",
      "text": "<ul> <li>#16136 - Removed support for the Django admin UI</li> <li>#17165 - All obsolete nested REST API serializers have been removed</li> <li>#17472 - The legacy staged changes API has been deprecated, and will be removed in Netbox v4.3</li> <li>#17476 - Upgrade to Django 5.1</li> <li>#17752 - Bulk object import URL paths have been renamed from <code>*_import</code> to <code>*_bulk_import</code></li> <li>#17761 - Optional choice fields now store empty values as null (rather than empty strings) in the database</li> <li>#18093 - Redirects for pre-v4.1 virtual disk UI views have been removed</li> </ul>"
    },
    {
      "location": "release-notes/version-4.2/#rest-api-changes",
      "title": "REST API Changes",
      "text": "<ul> <li>Added the following endpoints:<ul> <li><code>/api/circuits/virtual-circuits/</code></li> <li><code>/api/circuits/virtual-circuit-terminations/</code></li> <li><code>/api/dcim/mac-addresses/</code></li> <li><code>/api/ipam/vlan-translation-policies/</code></li> <li><code>/api/ipam/vlan-translation-rules/</code></li> </ul> </li> <li>circuits.Circuit<ul> <li>Added the optional <code>distance</code> and <code>distance_unit</code> fields</li> </ul> </li> <li>circuits.CircuitGroupAssignment<ul> <li>Replaced the <code>circuit</code> field with <code>member_type</code> and <code>member_id</code> to support virtual circuit assignment</li> </ul> </li> <li>circuits.CircuitTermination<ul> <li>Removed the <code>site</code> &amp; <code>provider_network</code> fields</li> <li>Added the <code>termination_type</code> &amp; <code>termination_id</code> fields to facilitate termination assignment</li> <li>Added the read-only <code>termination</code> field</li> </ul> </li> <li>dcim.Interface<ul> <li>The <code>mac_address</code> field is now read-only</li> <li>Added the <code>primary_mac_address</code> relation to dcim.MACAddress</li> <li>Added the read-only <code>mac_addresses</code> list</li> <li>Added the <code>qinq_svlan</code> relation to ipam.VLAN</li> <li>Added the <code>vlan_translation_policy</code> relation to ipam.VLANTranslationPolicy</li> <li>Added <code>mode</code> choice \"Q-in-Q\"</li> </ul> </li> <li>dcim.InventoryItem<ul> <li>Added the optional <code>status</code> choice field</li> </ul> </li> <li>dcim.Location<ul> <li>Added the read-only <code>prefix_count</code> field</li> </ul> </li> <li>dcim.PowerOutlet<ul> <li>Added the optional <code>color</code> field</li> </ul> </li> <li>dcim.Region<ul> <li>Added the read-only <code>prefix_count</code> field</li> </ul> </li> <li>dcim.SiteGroup<ul> <li>Added the read-only <code>prefix_count</code> field</li> </ul> </li> <li>ipam.Prefix<ul> <li>Removed the <code>site</code> field</li> <li>Added the <code>scope_type</code> &amp; <code>scope_id</code> fields to facilitate scope assignment</li> <li>Added the read-only <code>scope</code> field</li> </ul> </li> <li>ipam.VLAN<ul> <li>Added the optional <code>qinq_role</code> selection field</li> <li>Added the <code>qinq_svlan</code> recursive relation</li> </ul> </li> <li>virtualization.Cluster<ul> <li>Removed the <code>site</code> field</li> <li>Added the <code>scope_type</code> &amp; <code>scope_id</code> fields to facilitate scope assignment</li> <li>Added the read-only <code>scope</code> field</li> </ul> </li> <li>virtualization.Cluster<ul> <li>Added the read-only fields <code>allocated_vcpus</code>, <code>allocated_memory</code>, and <code>allocated_disk</code></li> </ul> </li> <li>virtualization.VMInterface<ul> <li>The <code>mac_address</code> field is now read-only</li> <li>Added the <code>primary_mac_address</code> relation to dcim.MACAddress</li> <li>Added the read-only <code>mac_addresses</code> list</li> <li>Added the <code>qinq_svlan</code> relation to ipam.VLAN</li> <li>Added the <code>vlan_translation_policy</code> relation to ipam.VLANTranslationPolicy</li> <li>Added <code>mode</code> choice \"Q-in-Q\"</li> </ul> </li> <li>wireless.WirelessLAN<ul> <li>Added the <code>scope_type</code> &amp; <code>scope_id</code> fields to support scope assignment</li> <li>Added the read-only <code>scope</code> field</li> </ul> </li> </ul>"
    }
  ]
}
